{"./":{"url":"./","title":"前言","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1.html":{"url":"chapter1.html","title":"python","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/django.html":{"url":"chapter1/django.html","title":"Django","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/django/shi-wu-mo-ban.html":{"url":"chapter1/django/shi-wu-mo-ban.html","title":"django事务模板","keywords":"","body":"from django.db import transaction try: active = True with transaction.atomic(): save_id = transaction.savepoint() except Exception as e: # 失败则回滚 active = False transaction.savepoint_rollback(save_id) logger.error('') # 判断是否提交该次事务 if active: transaction.savepoint_commit(save_id) console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/django/queryset.html":{"url":"chapter1/django/queryset.html","title":"orm","keywords":"","body":"queryset惰性机制（缓存机制）select_relatedqueryset惰性机制（缓存机制） select_related model.tb.objects.all().select_related('外键字段') model.tb.objects.all().select_related('外键字段__外键字段') 概念 对于一对一字段（OneToOneField）和外键字段（ForeignKey，多对一），可以使用select_related 来对QuerySet进行优化 select_related函数帮我们做了：在一次的查询中查询到对象集合以及和关联的对象的集合。可以直接获取相应的外键的对象列表。 在效率上比之前的分步查询上，效率高， 前提：查询的表和关联的表的层级不深和不多。情况下：效率高； 如果查询的表的层级比较多，关联的表较多（外键较多），会耗时。 在对QuerySet使用select_related()函数后，Django会获取相应外键对应的对象，从而在之后需要的时候不必再查询数据库了 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"git.html":{"url":"git.html","title":"git","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"git/xin-jila-qu-git-xiang-mu.html":{"url":"git/xin-jila-qu-git-xiang-mu.html","title":"新机拉取git项目","keywords":"","body":"新机拉取github项目git 全局配置 用户名 和 邮箱新机拉取github项目 git 全局配置 用户名 和 邮箱 # 用户名 git config --global user.name 【name】 # 邮箱 git config --global user.email 【email】 # 查看已配置项 git config --global --list # 或者 git config --list 或者查看 本机config文件 接着生成 git 的 ssh 密钥 ssh-keygen -t rsa -C [email] 接着在本地查看ssh文件 然后登录 github 操作 将ssh文件中 id_rsa.pub copy 到里面，名称随便起 这就表示成功了 测试 输入，表示成功 ssh -T git@github.com 接着clone 项目 就可以了 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"git/gitshang-4f20-la-qu-wen-ti.html":{"url":"git/gitshang-4f20-la-qu-wen-ti.html","title":"git上传/拉取问题","keywords":"","body":"git 常见错误解决 Failed to connect to github.com port 443: Timed out git 拉取github代码失败，提示 Failed to connect to github.com port 443: Timed out，取消设置git代理，就可以了。 设置代理 git config --global https.proxy [http://127.0.0.1:1080](http://127.0.0.1:1080/) git config --global https.proxy [https://127.0.0.1:1080](https://127.0.0.1:1080/) 取消代理 git config --global --unset http.proxy git config --global --unset https.proxy 添加key正确，但是输入命令 ssh -T git@github.com 得到结果是 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 解决：输入命令 git remote set-url origin git@github.com:名字/仓库名.git OpenSSL SSL_read: Connection was reset, errno 10054 错误解决 git config --global http.sslVerify \"false\" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}