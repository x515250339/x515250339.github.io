<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心瘾</title>
  
  
  <link href="https://yanxiang.wang/atom.xml" rel="self"/>
  
  <link href="https://yanxiang.wang/"/>
  <updated>2024-07-15T14:15:33.617Z</updated>
  <id>https://yanxiang.wang/</id>
  
  <author>
    <name>王彦翔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自动化部署：一键开启博客新纪元</title>
    <link href="https://yanxiang.wang/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog/"/>
    <id>https://yanxiang.wang/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog/</id>
    <published>2024-06-18T14:10:05.000Z</published>
    <updated>2024-07-15T14:15:33.617Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>        <img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/f8930dc16b61049931afec210ae32d614e763895-345x348.webp" width="30%" height="30%" loading="lazy">        </p>  </center></div><span id="more"></span><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><a href="https://app.gitbook.com/">gitbook</a> (<a href="https://app.gitbook.com/">https://app.gitbook.com/</a>)</p><p>最初，我使用GitBook进行记录。免费版功能已能满足日常需求，并且支持直接使用Markdown语法进行编辑。然而，访问时需要通过特殊方式（科技）。GitBook的主要优点是其灵活的记录和排版功能，可以将内容整理成书籍形式并分享。例如，你可以参考这个示例：<a href="https://technical-3.gitbook.io/untitled">示例</a>。编辑时，GitBook允许多层级内容结构，还提供许多实用功能，例如支持多种内容类型的直接嵌入，甚至包括网页URL。此外，你还可以在页面中嵌入许多实用的内容。然而，我们还有一个独立的博客系统，这导致两者之间<strong>不兼容</strong>。</p><div align="center">    <img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/image-20240613152805851.png" alt="图片1" width="30%" loading="lazy">    <img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/image-20240613153046500.png" alt="图片2" width="30%" style="margin-left: 10px;" loading="lazy">   <img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/image-20240613153234818.png" alt="图片2" width="30%" style="margin-left: 10px;" loading="lazy"> </div># 目标<p>GitBook只能在使用科技的情况下访问链接。而且，如果从博客页面访问，会跳转到GitBook的链接，相当于在两个不同的网站之间切换，用户体验非常差。因此，我们需要将GitBook内容<strong>本地化</strong>，并与博客系统<strong>兼容</strong>，实现<strong>一端访问</strong>。</p><h1 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h1><p>首先，我们需要准备一台开发机（例如Mac Mini，或者其他合适的设备），以及一台阿里云服务器用于做代理。通过使用frp进行内网穿透，使得本地开发机可以通过公网进行访问（在此过程中，请务必注意本地的安全设置）。</p><img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/%E6%B5%81%E7%A8%8B.png" width="50%" height="50%" loading="lazy"><h1 id="设计细节"><a href="#设计细节" class="headerlink" title="设计细节"></a>设计细节</h1><h2 id="gitbook"><a href="#gitbook" class="headerlink" title="gitbook"></a>gitbook</h2><p>将GitBook与GitHub关联起来，当写作完成后，可以同步到GitHub，方便进行版本管理。你也可以在本地编辑内容，然后推送到GitHub，这样会自动同步到GitBook。当然，我们的博客内容也存储在GitHub上，并通过代理进行转发。同样地，GitLab也可以实现这些功能。</p><div align="center">    <img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/image-20240614111940197.png" alt="图片1" width="30%" loading="lazy">    <img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/image-20240614112009567.png" alt="图片2" width="30%" style="margin-left: 10px;" loading="lazy"> </div><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>在GitHub上创建相应的仓库和分支，然后执行上一步的内容同步。接下来，为该仓库添加一个Webhook。这里添加的Webhook URL将会用于后续配置的Open API。</p><p>具体步骤如下：</p><ol><li><strong>创建仓库和分支</strong><ul><li>在GitHub上创建一个新的仓库，并根据需要创建对应的分支。</li><li>将本地的GitBook内容推送到这个仓库中。</li></ul></li><li><strong>添加 Webhook</strong><ul><li>进入GitHub仓库的设置页面，选择“Webhooks”。</li><li>点击“Add webhook”按钮。</li><li>在“Payload URL”字段中，填写后续配置的Open API URL。</li><li>选择“Content type”为<code>application/json</code>。</li><li>配置其他选项后，点击“Add webhook”保存。</li></ul></li></ol><p>这些步骤将确保GitHub仓库中的内容可以通过Webhook进行自动化处理，进一步与GitBook和博客系统集成。</p><ol><li><strong>Push 事件</strong>：当有人向仓库推送代码时触发。</li><li><strong>Pull Request 事件</strong>：当有人创建、更新、合并或关闭 pull request 时触发。</li><li><strong>Issue 事件</strong>：当有人创建、更新、关闭或重新打开 issue 时触发。</li><li><strong>Comment 事件</strong>：当在 commit、issue、pull request 上添加评论时触发。</li><li><strong>Release 事件</strong>：当发布新版本时触发。</li><li><strong>Repository 事件</strong>：当仓库被创建、删除、公开、私有化、重命名或添加、删除标签时触发。</li><li><strong>Status 事件</strong>：当 Git 提交状态发生更改时触发（例如，CI/CD 管道完成）。</li><li><strong>Watch 事件</strong>：当用户开始或停止关注仓库时触发。</li><li><strong>Fork 事件</strong>：当仓库被 fork 时触发。</li><li><strong>Membership 事件</strong>：当团队中的成员关系发生更改时触发。</li><li><strong>Deployment 事件</strong>：当部署被创建或更新时触发。</li><li><strong>Deployment Status 事件</strong>：当部署状态发生更改时触发。</li><li><strong>Branch Protection 规则更改事件</strong>：当分支保护规则被添加、更新或删除时触发。</li><li><strong>Check Suite 事件</strong>：当检查套件被创建、请求或完成时触发。</li><li><strong>Check Run 事件</strong>：当检查运行被创建、更新或完成时触发。</li><li><strong>Create 事件</strong>：当在仓库中创建分支或标签时触发。</li><li><strong>Delete 事件</strong>：当在仓库中删除分支或标签时触发。</li><li><strong>Public 事件</strong>：当仓库从私有变为公开时触发。</li><li><strong>Private 事件</strong>：当仓库从公开变为私有时触发。</li></ol><p>…以及其他更多类型的事件。</p><div align="center">    <img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/iShot_2024-06-14_14.51.03.png" alt="图片1" width="30%" loading="lazy">    <img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/image-20240614145627334.png" alt="图片2" width="30%" style="margin-left: 10px;" loading="lazy"> </div><h2 id="mac-amp-aly"><a href="#mac-amp-aly" class="headerlink" title="mac &amp; aly"></a>mac &amp; aly</h2><p>当考虑购买轻量级服务器来托管应用时，特别是在实际服务运行于本地Mac Mini的情况下，我们的需求不需要高性能的服务器。如果不打算使用公网IP，可以通过购买域名来简化访问管理。</p><img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/image-20240614155027792.png" width="50%" height="50%" loading="lazy"><h1 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h1><h3 id="一、frp简介"><a href="#一、frp简介" class="headerlink" title="一、frp简介"></a>一、frp简介</h3><h4 id="1-frp是什么"><a href="#1-frp是什么" class="headerlink" title="1.frp是什么"></a>1.frp是什么</h4><p>FRP 是一种用于实现内网穿透的工具。内网穿透是一种技术，允许你从互联网访问位于私有网络（内网）中的计算机、服务器或设备，即使它们位于防火墙或路由器后面。</p><p>FRP 使用客户端-服务器架构，其中客户端位于内网，服务器位于公共网络中（例如互联网）。</p><p>项目地址：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><h4 id="2-为什么使用-frp-？"><a href="#2-为什么使用-frp-？" class="headerlink" title="2.为什么使用 frp ？"></a>2.为什么使用 frp ？</h4><p>使用FRP进行内网穿透有几个优势和原因，特别是在需要远程访问位于私有网络内的设备或服务时：</p><ol><li><strong>绕过网络限制和防火墙：</strong> 很多公司、组织和家庭网络都设置了防火墙和网络限制，以保护内部网络安全。使用FRP可以绕过这些限制，从外部网络访问内部设备，而无需在防火墙上进行复杂的端口映射设置。</li><li><strong>安全性和加密：</strong> FRP支持数据的加密传输，从而确保通过公共网络传输的数据是安全的。这对于保护敏感信息和隐私非常重要。</li><li><strong>简化网络配置：</strong> 使用FRP可以避免手动配置复杂的端口映射和路由设置，这在某些情况下可能会很繁琐和容易出错。FRP提供了更简化的方法来实现内网穿透。</li><li><strong>动态 IP 地址处理：</strong> 如果你的内部网络中的设备使用动态分配的IP地址，使用FRP可以消除由于IP地址变化而导致的连接问题。FRP通过与服务器建立稳定的连接，无论IP地址是否变化，都能够维持通信。</li><li><strong>跨平台支持：</strong> FRP在多个操作系统和平台上都有支持，这使得它适用于不同类型的设备和应用。</li><li><strong>远程维护和访问：</strong> 使用FRP，你可以轻松地远程访问和维护内部网络中的设备，无论你身在何处。这对于IT支持、设备管理和远程故障排除非常有用。</li><li><strong>访问内部服务：</strong> 如果你运行着一些需要从外部网络访问的服务（如网站、数据库等），使用FRP可以方便地使这些服务对外开放。</li></ol><p>需要注意的是，使用内网穿透工具时要确保安全性和隐私，以避免未经授权的访问。另外，选择正确的工具并正确配置它是确保成功实现内网穿透的关键。</p><p>通过使用 FRP，你可以实现安全且受控的内网穿透，允许远程访问内部服务，而无需将内网设备暴露在公共网络中。</p><p>请注意，由于技术和软件可能会不断演进，建议在使用任何工具之前查阅最新的文档和教程以获取准确的设置和配置信息。</p><h4 id="3-基本原理"><a href="#3-基本原理" class="headerlink" title="3.基本原理"></a>3.基本原理</h4><ul><li>在带有公网ip的云服务器上部署frp的服务端frps；</li><li>在需要穿透的内网服务器上部署frp的客户端frpc；</li></ul><h3 id="二、前置环境准备"><a href="#二、前置环境准备" class="headerlink" title="二、前置环境准备"></a>二、前置环境准备</h3><p>服务端和客户端使用的都是同一份文件，只是配置文件和启动文件不同。因此只需要下载一份文件，将其上传到各个服务器即可。</p><h4 id="1-下载解压"><a href="#1-下载解压" class="headerlink" title="1.下载解压"></a>1.下载解压</h4><p>下载地址：</p><p><a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p>解压：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -xvf frp_0.44.0_linux_amd64.tar.gz  <span class="token comment"># 解压缩</span><span class="token function">mv</span> frp_0.44.0_linux_amd64 frp  <span class="token comment"># 重命名文件夹为frp</span></code></pre><h4 id="2-目录解读"><a href="#2-目录解读" class="headerlink" title="2.目录解读"></a>2.目录解读</h4><ul><li>frpc：客户端可执行程序</li><li>frpc_full.ini：客户端所有配置项（可以在此文件查看frp的所有的配置项）</li><li>frpc.ini：客户端配置项</li><li>frps：服务端可执行程序</li><li>frps_full.ini：服务端所有配置项（可以在此文件查看frp的所有的配置项）</li><li>frps.ini：服务端配置项</li><li>LICENSE：许可证</li></ul><h3 id="三、服务端配置"><a href="#三、服务端配置" class="headerlink" title="三、服务端配置"></a>三、服务端配置</h3><p>服务端需部署在带有公网ip的服务器上，最好是云服务器。frp对于云服务器的配置要求不高，类似2C2G的入门级云服务器即可。而且目前各大厂商都在搞活动，入门级云服务器一年才50元左右。</p><h4 id="1-配置服务端（阿里云）"><a href="#1-配置服务端（阿里云）" class="headerlink" title="1.配置服务端（阿里云）"></a>1.配置服务端（阿里云）</h4><p>为避免误操作，可以删除客户端相关的文件及配置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -fr frpc*  <span class="token comment"># 删除所有客户端相关的文件及配置</span><span class="token function">cp</span> frps.ini frps.ini.bak  <span class="token comment"># 备份原始配置文件</span></code></pre><p>编辑配置文件：frps.ini</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">common</span><span class="token punctuation">]</span></span><span class="token key attr-name">bind_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">7000</span><span class="token key attr-name">token</span> <span class="token punctuation">=</span> <span class="token value attr-value">U4ZvrO/.M]Wp&#123;D;@[u;vUMZ5es9&amp;)&#125;(</span> <span class="token comment"># vhost_http_port = 18888</span><span class="token comment"># tcp_mux = false</span><span class="token comment"># frp管理后台端口，请按自己需求更改</span><span class="token key attr-name">dashboard_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">7500</span><span class="token comment"># frp管理后台用户名和密码，请改成自己的</span><span class="token key attr-name">dashboard_user</span> <span class="token punctuation">=</span> <span class="token value attr-value">admin</span><span class="token key attr-name">dashboard_pwd</span> <span class="token punctuation">=</span> <span class="token value attr-value">password</span><span class="token key attr-name">enable_prometheus</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span><span class="token comment"># frp日志配置</span><span class="token key attr-name">log_file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/home/frp/log/frps.log</span><span class="token key attr-name">log_level</span> <span class="token punctuation">=</span> <span class="token value attr-value">info</span><span class="token key attr-name">log_max_days</span> <span class="token punctuation">=</span> <span class="token value attr-value">3</span>./frps -c frps.ini  # 启动服务端</code></pre><h4 id="2-开通安全组"><a href="#2-开通安全组" class="headerlink" title="2.开通安全组"></a>2.开通安全组</h4><p>若公网服务器是在阿里云、百度云等云服务器上的，则需要在安全组中为frp开通指定的端口号，如：7000是frp服务默认端口号、7500是在frps.ini配置文件中指定的dashboard_port、其他的则是需要映射到内网服务器的端口</p><h4 id="3-访问dashboard"><a href="#3-访问dashboard" class="headerlink" title="3.访问dashboard"></a>3.访问dashboard</h4><p>访问地址：<a href="http://8.146.201.200:7500/">http://<strong>.</strong><em>.</em>**:7500/</a></p><p>账号密码：admin、password（对应配置文件中的dashboard_user与dashboard_pwd）</p><h4 id="4-将frps添加为本地服务（可选）"><a href="#4-将frps添加为本地服务（可选）" class="headerlink" title="4.将frps添加为本地服务（可选）"></a>4.将frps添加为本地服务（可选）</h4><p>也可以将frps添加为本地服务，具体步骤如下：</p><p><strong>① 服务端新建文件：frps.service</strong></p><p>内容如下：</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Unit</span><span class="token punctuation">]</span></span><span class="token key attr-name">Description</span><span class="token punctuation">=</span><span class="token value attr-value">frps service</span><span class="token key attr-name">After</span><span class="token punctuation">=</span><span class="token value attr-value">network.target syslog.target</span><span class="token key attr-name">Wants</span><span class="token punctuation">=</span><span class="token value attr-value">network.target</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Service</span><span class="token punctuation">]</span></span><span class="token key attr-name">Type</span><span class="token punctuation">=</span><span class="token value attr-value">simple</span><span class="token key attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token value attr-value">/home/frp/frps -c /home/frp/frps.ini</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">Install</span><span class="token punctuation">]</span></span><span class="token key attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token value attr-value">multi-user.target</span></code></pre><p><strong>② 创建配置文件目录并复制文件</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /etc/frp<span class="token function">cp</span> frps.ini /etc/frp/<span class="token function">cp</span> frps /usr/bin/<span class="token function">cp</span> frps.service /usr/lib/systemd/system/</code></pre><p><strong>③ 配置自并启动客户端服务</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> frps  <span class="token comment"># 允许自启动</span><span class="token comment"># 执行成功会提示“Created symlink /etc/systemd/system/multi-user.target.wants/frps.service → /usr/lib/systemd/system/frps.service.”</span>systemctl start frps  <span class="token comment"># 启动客户端服务</span></code></pre><p>若更改了frps.service，则需使用“systemctl daemon-reload”命令重新加载配置。</p><h3 id="三、客户端配置"><a href="#三、客户端配置" class="headerlink" title="三、客户端配置"></a>三、客户端配置</h3><h4 id="1-配置客户端"><a href="#1-配置客户端" class="headerlink" title="1.配置客户端"></a>1.配置客户端</h4><p>编辑客户端配置文件frpc.ini</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">common</span><span class="token punctuation">]</span></span><span class="token key attr-name">server_addr</span> <span class="token punctuation">=</span> <span class="token value attr-value">.xxx.xxx.xxx  # 服务端所在的公网ip地址</span><span class="token key attr-name">server_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">7000  # 服务端默认端口号，与服务端配置文件保持一致</span><span class="token key attr-name">token</span> <span class="token punctuation">=</span> <span class="token value attr-value">e10adc3949ba59abbe56e057f20f883e</span><span class="token comment"># 去掉速度限制</span><span class="token key attr-name">tcp_mux</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span><span class="token comment"># [sample]</span><span class="token comment"># type = tcp # 注意：这个地方一律填写tcp</span><span class="token comment"># local_ip = 0.0.0.0  # jira所在内网服务器的ip地址</span><span class="token comment"># local_port = 8088 # 本地访问端口号</span><span class="token comment"># remote_port = 8088 # 映射到云服务器的端口号</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">vnc</span><span class="token punctuation">]</span></span><span class="token key attr-name">type</span> <span class="token punctuation">=</span> <span class="token value attr-value">tcp</span><span class="token key attr-name">local_ip</span> <span class="token punctuation">=</span> <span class="token value attr-value">0.0.0.0</span><span class="token key attr-name">local_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">5900</span><span class="token key attr-name">remote_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">35900</span><span class="token key attr-name">use_encryption</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span><span class="token key attr-name">use_compression</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">ssh</span><span class="token punctuation">]</span></span>                   <span class="token key attr-name">type</span> <span class="token punctuation">=</span> <span class="token value attr-value">tcp</span><span class="token key attr-name">local_ip</span> <span class="token punctuation">=</span> <span class="token value attr-value">0.0.0.0</span><span class="token key attr-name">local_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">22</span><span class="token key attr-name">remote_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">322</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">test</span><span class="token punctuation">]</span></span><span class="token key attr-name">type</span> <span class="token punctuation">=</span> <span class="token value attr-value">tcp</span><span class="token key attr-name">local_ip</span> <span class="token punctuation">=</span> <span class="token value attr-value">0.0.0.0</span><span class="token key attr-name">local_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">4000</span><span class="token key attr-name">remote_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">4000</span></code></pre><h4 id="2-启动客户端"><a href="#2-启动客户端" class="headerlink" title="2.启动客户端"></a>2.启动客户端</h4><pre class="language-bash" data-language="bash"><code class="language-bash">./frpc -c frpc.ini <span class="token comment"># 启动客户端</span></code></pre><h4 id="3-云服务器安全组添加端口号"><a href="#3-云服务器安全组添加端口号" class="headerlink" title="3.云服务器安全组添加端口号"></a>3.云服务器安全组添加端口号</h4><p>安全组中添加remote_port端口号</p><h4 id="4-访问HTTP服务"><a href="#4-访问HTTP服务" class="headerlink" title="4.访问HTTP服务"></a>4.访问HTTP服务</h4><p>此时则可以通过公网IP+内网端口访问指定服务，如下图所示，访问的是内网服务器的服务。</p><h4 id="5-查看dashboard连接记录"><a href="#5-查看dashboard连接记录" class="headerlink" title="5.查看dashboard连接记录"></a>5.查看dashboard连接记录</h4><p>客户端启动成功，通过代理访问后，可以看到dashboard的Proxies-TCP中记录了连接信息：</p><h4 id="6-将frpc服务加为本地服务（可选）"><a href="#6-将frpc服务加为本地服务（可选）" class="headerlink" title="6.将frpc服务加为本地服务（可选）"></a>6.将frpc服务加为本地服务（可选）</h4><p>要实现macOS下程序的自启动，很多人都知道在“设置” - “用户和群组”中设置和取消开机启动，但这里要说的是另外一种方式，那就是launchd的方式，通过在launchd下编写plist启动文件实现FRP带参数启动。这里要啰嗦两句，在launchd下其实有两种实现程序自启的方式</p><blockquote><p>1.如果需要 root，并且是需要用户登陆后才能运行，把 plist 放在 /Library/LaunchAgents/\ 2.如果需要 root，并且不需要用户登陆后都能运行，把 plist 放在 /Library/LaunchDaemons/</p></blockquote><p>怎么理解呢，第一种就是系统启动后，你不登录到桌面，程序就不会在后台启动，类似于Windows下的开始菜单里的startup。第二种就是系统启动后，程序也随系统在后台启动，不管用户是否登录桌面，类似于Windows下的系统服务。你需要哪种方式让程序自启，自行选择第一种或者第二种。</p><p>出于安全的考虑或者说被迫害妄想症作怪<img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/36.png" alt="macOS系统下配置FRP客户端并实现开机自启动" loading="lazy"> 我不想完全把我的macOS暴露出去，我只选择了在/Library/LaunchAgents/创建plist</p><blockquote><p>sudo vim ~/Library/LaunchAgents/frpc.plist</p></blockquote><p>让我们用上面的命令创建FRP的启动文件frpc.plist，并用vim编辑它，你当然也可以用你自己喜欢的编辑器编辑<img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/43.png" alt="macOS系统下配置FRP客户端并实现开机自启动" loading="lazy"></p><blockquote><p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;\ &lt;!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN\ <a href="http://www.apple.com/DTDs/PropertyList-1.0.dtd">http://www.apple.com/DTDs/PropertyList-1.0.dtd</a> &gt;\ \ \ \Label\ \frpc\ \ProgramArguments\ \ \pwd**/frpc<strong>\ -c\ \pwd</strong>/frpc.ini**\ \ \KeepAlive\ \ \RunAtLoad\ \ \ \</p></blockquote><p>将上面一段代码粘贴到frpc.plist里，粗体字部分请修改为你的frpc和frpc.ini的真实路径，千万别照抄作业哦，老师会发现的<img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/56.png" alt="macOS系统下配置FRP客户端并实现开机自启动" loading="lazy"></p><p>最后，在终端输入下面的两段命令给frpc.plist赋予权限，并加载配置到系统使配置生效</p><blockquote><p>sudo chown root ~/Library/LaunchAgents/frpc.plist\ sudo launchctl load -w ~/Library/LaunchAgents/frpc.plist\</p></blockquote><p>好了，现在你可以重启系统，然后就会发现FRP客户端已经可以随系统自启</p><p>打开活动监视器，可以看到frpc的后台进程</p><p>如果某一天你后悔了，不想让它自启了，只要在终端里输入下面的命令，下次FRP客户端就不会跟随你的系统自启了</p><blockquote><p>sudo launchctl unload -w ~/Library/LaunchAgents/frpc.plist</p></blockquote><h3 id="四、常见问题及解决"><a href="#四、常见问题及解决" class="headerlink" title="四、常见问题及解决"></a>四、常见问题及解决</h3><h4 id="1-客户端配置http转发启动服务报错"><a href="#1-客户端配置http转发启动服务报错" class="headerlink" title="1.客户端配置http转发启动服务报错"></a>1.客户端配置http转发启动服务报错</h4><p>若在客户端配置文件中配置了http转发，启动客户端服务时发生如下报错：</p><p>【原因】：服务端配置文件frps.ini中未配置vhost_http_port</p><p>【解决办法】：</p><p>① 服务端配置文件frps.ini的[common]中添加vhost_http_port</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">common</span><span class="token punctuation">]</span></span><span class="token comment"># frp监听的端口，默认是7000，可以改成其他的</span><span class="token key attr-name">bind_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">7000</span><span class="token comment"># 授权码，请改成更复杂的，这个token之后在客户端会用到</span><span class="token key attr-name">token</span> <span class="token punctuation">=</span> <span class="token value attr-value">e10adc3949ba59abbe56e057f20f883e</span><span class="token comment"># 开启HTTP</span><span class="token key attr-name">vhost_http_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">8088</span></code></pre><p>② 客户端配置文件frpc.ini中添加custom_domains</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">web</span><span class="token punctuation">]</span></span><span class="token key attr-name">type</span> <span class="token punctuation">=</span> <span class="token value attr-value">http</span><span class="token key attr-name">local_ip</span> <span class="token punctuation">=</span> <span class="token value attr-value">192.168.1.211  # 内网本机ip</span><span class="token key attr-name">local_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">8088  # 本地服务端口号</span><span class="token key attr-name">remote_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">8088  # 映射到的公网服务器端口号</span><span class="token key attr-name">custom_domains</span> <span class="token punctuation">=</span> <span class="token value attr-value">服务端所在的公网ip</span></code></pre><p>③ 配置后重新启动客户端服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">./frpc -c frpc.ini</code></pre><p>注意事项：</p><p>1、若要直接在客户端配置文件中配置http代理，则服务端配置文件frps.ini中必须配置vhost_http_port；</p><p>2、若在客户端配置文件中配置http代理：type = http，则必须在底部带上custom_domains=xxx.xxx.xx.xx；</p><h4 id="2-配置代理多HTTP"><a href="#2-配置代理多HTTP" class="headerlink" title="2.配置代理多HTTP"></a>2.配置代理多HTTP</h4><p>上述问题1的配置方法，似乎只能代理访问一个端口的http，即使客户端配置文件frpc.ini中指定了多个type=http的 [web] 项，但因为服务端配置文件frps.ini中只能指定一个vhost_http_port=xxx，所以此方法最终还是只能代理访问一个http的服务，即vhost_http_port端口号对应的那个http。</p><p>【解决方法】：</p><p>参考：</p><p>服务端配置文件frps.ini中不需要配置vhost_http_port，直接在客户端配置文件frpc.ini中配置多个 [web] 项，即要代理的HTTP即可，其中type=tcp，也不用指定custom_domains。配置示例如下：</p><pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">common</span><span class="token punctuation">]</span></span><span class="token key attr-name">server_addr</span> <span class="token punctuation">=</span> <span class="token value attr-value">180.xx.xx.xx</span><span class="token key attr-name">server_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">7000</span><span class="token key attr-name">token</span> <span class="token punctuation">=</span> <span class="token value attr-value">e10adc3949ba59abbe56e057f20f883e</span><span class="token comment"># 去掉速度限制</span><span class="token key attr-name">tcp_mux</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">jira</span><span class="token punctuation">]</span></span><span class="token key attr-name">type</span> <span class="token punctuation">=</span> <span class="token value attr-value">tcp</span><span class="token key attr-name">local_ip</span> <span class="token punctuation">=</span> <span class="token value attr-value">192.168.1.211</span><span class="token key attr-name">local_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">8088</span><span class="token key attr-name">remote_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">8088</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">gitlab</span><span class="token punctuation">]</span></span><span class="token key attr-name">type</span> <span class="token punctuation">=</span> <span class="token value attr-value">tcp</span><span class="token key attr-name">local_ip</span> <span class="token punctuation">=</span> <span class="token value attr-value">192.168.1.211</span><span class="token key attr-name">local_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">8081</span><span class="token key attr-name">remote_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">8081</span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>以上是利用frp实现内网穿透的完整流程。在这个过程中，无需在各个访问端设备（如手机、PC、平板）安装frp客户端，只需在公网服务器上安装frp服务端，并在需要被代理转发的内网服务器上安装frp客户端，并正确配置各个服务的端口号。这样一来，所有用户可以在需要时通过手机、PC或平板随时随地访问内网服务。</p><p>另外，网络安全问题同样需要高度重视。由于内网穿透服务本身带有一定风险，建议在公网服务器和内网服务器上都开启防火墙，并根据需求临时开放必要的端口。此外，确保服务器的登录密码足够复杂和安全，以防止不明访问和潜在攻击。</p><h1 id="Open-API"><a href="#Open-API" class="headerlink" title="Open API"></a>Open API</h1><p>你可以选择使用任何一种编程语言开发一个接口作为GitHub webhook的请求地址。开发完成后，需要将该接口的URL配置到GitHub webhook中。此外，你还需要在本地和Aly（可能是指阿里云）两个地方配置frp，以便将该接口的API接口暴露出去。</p><p>接口的代码逻辑很简单：启动服务，监听一个接口，当接收到请求时开始执行相应的逻辑。</p><img src="../images/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2blog.assets/%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%20(1).png" width="50%" height="50%" loading="lazy"><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><p>使用fastapi框架，快速部署。<a href="https://fastapi.tiangolo.com/advanced/openapi-webhooks/">https://fastapi.tiangolo.com/advanced/openapi-webhooks/</a></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> uvicorn<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">from</span> github_webhooks <span class="token keyword">import</span> create_app<span class="token keyword">from</span> github_webhooks<span class="token punctuation">.</span>schemas <span class="token keyword">import</span> WebhookCommonPayload<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Query<span class="token comment"># app = FastAPI()</span>app <span class="token operator">=</span> create_app<span class="token punctuation">(</span>secret_token<span class="token operator">=</span><span class="token string">'*******'</span><span class="token punctuation">)</span><span class="token comment"># WebhookCommonPayload is based on pydantic.BaseModel</span><span class="token keyword">class</span> <span class="token class-name">PullRequestPayload</span><span class="token punctuation">(</span>WebhookCommonPayload<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Pull</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>        title<span class="token punctuation">:</span> <span class="token builtin">str</span>        url<span class="token punctuation">:</span> <span class="token builtin">str</span>    action<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/github_webhook"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"Hello"</span><span class="token punctuation">:</span> <span class="token string">"World"</span><span class="token punctuation">&#125;</span><span class="token comment"># push动作触发</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token string">'push'</span><span class="token punctuation">,</span> WebhookCommonPayload<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>payload<span class="token punctuation">:</span> WebhookCommonPayload<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    sender=User(id=, type='', login='') repository=Repository(id=, name='', full_name='', fork=False, url='', owner=User(id=, type='User', login='')) organization=None    """</span>    name <span class="token operator">=</span> payload<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>name    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">"main:app"</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token operator">**</span><span class="token operator">**</span>                <span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token builtin">reload</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h2 id="local-gitbook"><a href="#local-gitbook" class="headerlink" title="local gitbook"></a>local gitbook</h2><p>根据自己的场景开发，gitbook build ./ ./$1 编译为电子书，gitbook pdf ./ 编辑为pdf格式。在web端转编译是需要会员才可以的。</p><h3 id="1-node-版本-v10-23-0"><a href="#1-node-版本-v10-23-0" class="headerlink" title="1.node 版本 v10.23.0"></a>1.node 版本 v10.23.0</h3><h3 id="2-修改node镜像源为淘宝"><a href="#2-修改node镜像源为淘宝" class="headerlink" title="2.修改node镜像源为淘宝"></a>2.修改node镜像源为淘宝</h3><pre class="language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre><p>校验</p><pre class="language-none"><code class="language-none">npm config get registry</code></pre><h3 id="3-安装gitbook"><a href="#3-安装gitbook" class="headerlink" title="3.安装gitbook"></a>3.安装gitbook</h3><pre class="language-none"><code class="language-none">sudo npm install -g gitbooksudo npm install -g gitbook-cli</code></pre><p>执行gitbook -V查看版本</p><h3 id="4-安装calibre-ebook"><a href="#4-安装calibre-ebook" class="headerlink" title="4.安装calibre-ebook"></a>4.安装calibre-ebook</h3><p><a href="https://calibre-ebook.com/download/_osx">https://calibre-ebook.com/download_osx</a></p><p>配置 ~./bash_profile</p><pre class="language-none"><code class="language-none"># gitbook export pdf appexport EBOOK_PATH&#x3D;&#x2F;Applications&#x2F;calibre.app&#x2F;Contents&#x2F;MacOSexport PATH&#x3D;$PATH:$EBOOK_PATH</code></pre><p>执行</p><pre class="language-none"><code class="language-none">source ~.&#x2F;bash_profile</code></pre><p>校验版本</p><pre class="language-none"><code class="language-none">ebook-convert --version</code></pre><h3 id="5-导出pdf"><a href="#5-导出pdf" class="headerlink" title="5.导出pdf"></a>5.导出pdf</h3><pre class="language-none"><code class="language-none"># 生成 &#96;pdf&#96; 文件并输出 &#96;debug&#96; 级别日志$ gitbook pdf .&#x2F; .&#x2F;myBook.pdf --log&#x3D;debug# 生成 &#96;epub&#96; 文件并输出 &#96;debug&#96; 级别日志$ gitbook epub .&#x2F; .&#x2F;myBook.epub --log&#x3D;debug# 生成 &#96;mobi&#96; 文件并输出 &#96;debug&#96; 级别日志$ gitbook mobi .&#x2F; .&#x2F;myBook.mobi --log&#x3D;debug</code></pre><h2 id="local-hexo"><a href="#local-hexo" class="headerlink" title="local hexo"></a>local hexo</h2><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">source</span> ~/.bash_profilenvm use <span class="token number">18.17</span>.0<span class="token builtin class-name">cd</span> <span class="token variable">$ProjectsPath</span>/hexohexo g<span class="token builtin class-name">echo</span> <span class="token string">"hexo g success"</span>hexo d<span class="token builtin class-name">echo</span> <span class="token string">"hexo d success"</span><span class="token function">kill</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">lsof</span> -t -i:4000<span class="token variable">)</span></span>hexo s <span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token string">"hexo done"</span></code></pre><h2 id="启动-shell"><a href="#启动-shell" class="headerlink" title="启动 shell"></a>启动 shell</h2><pre class="language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">source</span> ~/.bash_profile<span class="token builtin class-name">cd</span> <span class="token variable">$ProjectsPath</span>/hexo/hexo s <span class="token operator">&amp;</span><span class="token builtin class-name">cd</span> /nvm use <span class="token number">10.23</span>.0<span class="token builtin class-name">cd</span> <span class="token variable">$ProjectsPath</span>/gitbook/interview/gitbook serve --port <span class="token number">4001</span> <span class="token punctuation">\</span><span class="token operator">&amp;</span><span class="token builtin class-name">cd</span> <span class="token variable">$ProjectsPath</span>/github_webhook/workon github_webhookpython main.py</code></pre><h2 id="高可用-supervisor"><a href="#高可用-supervisor" class="headerlink" title="高可用 supervisor"></a>高可用 supervisor</h2><p>如果服务因为电脑重启或断电等问题而中断，可以使用进程管理工具Supervisor来确保服务的持续运行。</p><p>Mac环境安装和使用 supervisor</p><blockquote><p>supervisor 用于管理自定义任务进程，可配置服务自动重启等多种功能，方便用户的计划任务管理。</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>推荐采用 brew 包管理工具进行安装：</p><pre class="language-sh" data-language="sh"><code class="language-sh">brew install supervisor</code></pre><p>如果通过pip进行安装，需要重点关注pip所在的python环境，是处于本机系统下还是在conda env中。\ 不同环境下，supervisor的配置文件位置和参数有差异，容易导致问题。</p><p>检查是否安装成功：</p><pre class="language-sh" data-language="sh"><code class="language-sh">% brew info supervisorLast login: Thu Aug 24 22:18:25 on ttys002➜  ~ brew info supervisor&#x3D;&#x3D;&gt; supervisor: stable 4.2.5 (bottled), HEADProcess Control Systemhttp:&#x2F;&#x2F;supervisord.org&#x2F;&#x2F;opt&#x2F;homebrew&#x2F;Cellar&#x2F;supervisor&#x2F;4.2.5 (951 files, 13.7MB) *  Poured from bottle using the formulae.brew.sh API on 2023-08-24 at 21:40:27From: https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-core&#x2F;blob&#x2F;HEAD&#x2F;Formula&#x2F;s&#x2F;supervisor.rbLicense: BSD-3-Clause-Modification&#x3D;&#x3D;&gt; DependenciesRequired: python@3.11 ✔&#x3D;&#x3D;&gt; Options--HEAD    Install HEAD version&#x3D;&#x3D;&gt; CaveatsTo start supervisor now and restart at login:  brew services start supervisorOr, if you don&#39;t want&#x2F;need a background service you can just run:  &#x2F;opt&#x2F;homebrew&#x2F;opt&#x2F;supervisor&#x2F;bin&#x2F;supervisord -c &#x2F;opt&#x2F;homebrew&#x2F;etc&#x2F;supervisord.conf --nodaemon&#x3D;&#x3D;&gt; Analyticsinstall: 371 (30 days), 1,001 (90 days), 1,962 (365 days)install-on-request: 367 (30 days), 997 (90 days), 1,958 (365 days)build-error: 0 (30 days)</code></pre><p>其默认配置文件位置：<code>/opt/homebrew/etc/supervisord.conf</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>这里首先说明一下，有不少文章说明是按照如下方式生成supervisord配置文件：</p><pre class="language-none"><code class="language-none">echo_supervisord_conf &gt; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;supervisord.ini</code></pre><p>但是本文实践过程中，不需要这一步骤，安装完成后即自动存在supervisord.conf配置文件。\ 接下来，我们直接打开并修改配置文件。</p><h4 id="启用http服务"><a href="#启用http服务" class="headerlink" title="启用http服务"></a>启用http服务</h4><p>打开监听TCP socket，启动inet的http服务。这个模块默认是未开启状态，打开后可通过web界面的方式管理子进程。只要将每行首位的分号；字符去掉即可。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>inet_http_server<span class="token punctuation">]</span>         <span class="token punctuation">;</span> inet <span class="token punctuation">(</span>TCP<span class="token punctuation">)</span> server disabled by default<span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:9000        <span class="token punctuation">;</span> ip_address:port specifier, *:port <span class="token keyword">for</span> all iface<span class="token assign-left variable">username</span><span class="token operator">=</span>user              <span class="token punctuation">;</span> default is no username <span class="token punctuation">(</span>open server<span class="token punctuation">)</span><span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token number">123</span>               <span class="token punctuation">;</span> default is no password <span class="token punctuation">(</span>open server<span class="token punctuation">)</span></code></pre><h4 id="查看-supervisord全局配置"><a href="#查看-supervisord全局配置" class="headerlink" title="查看 supervisord全局配置"></a>查看 supervisord全局配置</h4><p>在<code>[supervisord]</code>部分，可看到logfile等各类配置参数，一般情况下保持默认即可。</p><h4 id="修改-supervisorctl配置"><a href="#修改-supervisorctl配置" class="headerlink" title="修改 supervisorctl配置"></a>修改 supervisorctl配置</h4><p>supervisord 与 supervisorctl 之间是服务端与客户端的关系，因此，需要配置如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>supervisorctl<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token assign-left variable">serverurl</span><span class="token operator">=</span>unix:///opt/homebrew/var/run/supervisor.sock <span class="token punctuation">;</span> use a unix:// URL  <span class="token keyword">for</span> a unix socket<span class="token assign-left variable">serverurl</span><span class="token operator">=</span>http://127.0.0.1:9000 <span class="token punctuation">;</span> use an http:// url to specify an inet socket<span class="token assign-left variable">username</span><span class="token operator">=</span>user                <span class="token punctuation">;</span> should be same as <span class="token keyword">in</span> <span class="token punctuation">[</span>*_http_server<span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token builtin class-name">set</span><span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token number">123</span>                 <span class="token punctuation">;</span> should be same as <span class="token keyword">in</span> <span class="token punctuation">[</span>*_http_server<span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token builtin class-name">set</span><span class="token punctuation">;</span><span class="token assign-left variable">prompt</span><span class="token operator">=</span>mysupervisor         <span class="token punctuation">;</span> cmd line prompt <span class="token punctuation">(</span>default <span class="token string">"supervisor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token assign-left variable">history_file</span><span class="token operator">=~</span>/.sc_history  <span class="token punctuation">;</span> use readline <span class="token function">history</span> <span class="token keyword">if</span> available</code></pre><p>这里服务端url和账户信息，要与前面 [inet_http_server]的配置保持一致。</p><h4 id="编写-program任务配置"><a href="#编写-program任务配置" class="headerlink" title="编写 program任务配置"></a>编写 program任务配置</h4><p>supervisord.conf的结尾处，定义了如何管理自定义配置文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">;</span> The <span class="token punctuation">[</span>include<span class="token punctuation">]</span> section can just contain the <span class="token string">"files"</span> setting.  This<span class="token punctuation">;</span> setting can list multiple files <span class="token punctuation">(</span>separated by whitespace or<span class="token punctuation">;</span> newlines<span class="token punctuation">)</span>.  It can also contain wildcards.  The filenames are<span class="token punctuation">;</span> interpreted as relative to this file.  Included files *cannot*<span class="token punctuation">;</span> include files themselves.<span class="token punctuation">[</span>include<span class="token punctuation">]</span>files <span class="token operator">=</span> /opt/homebrew/etc/supervisor.d/*.ini</code></pre><p>因此，不推荐直接在 supervisord.conf中编写 program，而应该按照如上include说明，在同级目录下创建一个文件夹 supervisor.d，然后将自己的任务配置文件放在该文件夹下。</p><pre class="language-none"><code class="language-none">mkdir &#x2F;opt&#x2F;homebrew&#x2F;etc&#x2F;supervisor.dtouch github_webhook.ini</code></pre><p>子进程配置项主要包括：</p><ul><li>program: 设置子进程的名称，也即web界面中展示的进程名称，不允许重复。</li><li>command: 启动子进程的命令行</li><li>directory: 执行的项目目录</li><li>stdout_logfile: log日志输出文件路径，必须事先创建好</li></ul><p>配置示例：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>program:github_webhook<span class="token punctuation">]</span><span class="token assign-left variable">command</span><span class="token operator">=</span>sh /Volumes/SDD/MyFile/Projects/github_webhook/run.sh<span class="token assign-left variable">directory</span><span class="token operator">=</span>/Volumes/SDD/MyFile/Projects/github_webhook<span class="token assign-left variable">autostart</span><span class="token operator">=</span>false<span class="token assign-left variable">startsecs</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">stdout_logfile</span><span class="token operator">=</span>/Volumes/SDD/MyFile/Projects/logs/github_webhook/supervisor.log</code></pre><h3 id="开始运行"><a href="#开始运行" class="headerlink" title="开始运行"></a>开始运行</h3><p>启动 supervisor</p><pre class="language-bash" data-language="bash"><code class="language-bash">supervisord -c /opt/homebrew/etc/supervisord.conf</code></pre><p>进入 web后台管理页面，浏览器输入：<code>http://127.0.0.1:9000</code>，按照提示输入前面配置的用户名密码。\ 登录成功后，即可通过web界面来操作已经配置的子进程。</p><h3 id="命令行管理"><a href="#命令行管理" class="headerlink" title="命令行管理"></a>命令行管理</h3><p>除了通过web页面进行任务进程的管理，也可使用 supervisorctl 命令进行管理。\ 常用命令如下：</p><pre class="language-none"><code class="language-none">supervisorctl</code></pre><pre class="language-sh" data-language="sh"><code class="language-sh">#关闭所有任务supervisorctl shutdown # 启动某个进程supervisorctl start programxxx# 重启某个进程supervisorctl restart programxxx# 停止全部进程 注：start、restart、stop都不会载入最新的配置文件supervisorctl stop all# 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。supervisorctl reload# 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。supervisorctl update</code></pre><p>查看执行的日志</p><pre class="language-bash" data-language="bash"><code class="language-bash">supervisorctl <span class="token function">tail</span> 「name」 stderr</code></pre><p>brew安装的重启命令</p><pre class="language-none"><code class="language-none">brew services start supervisor</code></pre><p>关闭supervisorctl密码，把图中的注释即可</p><h2 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h2><p>LogTail软件，直接查看supervisor的日志就可以。</p>]]></content>
    
    
    <summary type="html">春风得意马蹄疾，一日看尽长安花</summary>
    
    
    
    <category term="blog - 自动化" scheme="https://yanxiang.wang/categories/blog-%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
    <category term="hexo" scheme="https://yanxiang.wang/tags/hexo/"/>
    
    <category term="自动化博客" scheme="https://yanxiang.wang/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="frp" scheme="https://yanxiang.wang/tags/frp/"/>
    
    <category term="gitbook" scheme="https://yanxiang.wang/tags/gitbook/"/>
    
  </entry>
  
  <entry>
    <title>智擎疾行，胜逐时速</title>
    <link href="https://yanxiang.wang/algorithm%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yanxiang.wang/algorithm%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-06-12T13:47:16.000Z</published>
    <updated>2024-06-12T13:21:38.543Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>    </p>    <img src="../images/算法.jpg" height="50%" width="50%" loading="lazy">    </p>  </center></div><span id="more"></span>]]></content>
    
    
    <summary type="html">智者千虑，必有一得</summary>
    
    
    
    <category term="algorithm" scheme="https://yanxiang.wang/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://yanxiang.wang/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>数据浩瀚似海，Elasticsearch 速度不待</title>
    <link href="https://yanxiang.wang/elasticsearch%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yanxiang.wang/elasticsearch%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-05-09T13:47:16.000Z</published>
    <updated>2024-05-09T14:08:13.157Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>    </p>    <img src="../images/elasticsearch.png" height="50%" width="50%" loading="lazy">    </p>  </center></div><span id="more"></span>]]></content>
    
    
    <summary type="html">青山隐隐水迢迢，秋尽江南草未凋</summary>
    
    
    
    <category term="elasticsearch" scheme="https://yanxiang.wang/categories/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="https://yanxiang.wang/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>索引革命，数据腾飞</title>
    <link href="https://yanxiang.wang/mysql%E5%8D%83%E4%B8%87%E6%95%B0%E6%8D%AE%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/"/>
    <id>https://yanxiang.wang/mysql%E5%8D%83%E4%B8%87%E6%95%B0%E6%8D%AE%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/</id>
    <published>2023-09-19T14:21:59.000Z</published>
    <updated>2024-12-12T15:18:13.048Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>        <img src="../images/mysql优化.jpg" height="50%" width="50%" loading="lazy">        </p>  </center></div><span id="more"></span><h1 id="创建千万数据集"><a href="#创建千万数据集" class="headerlink" title="创建千万数据集"></a>创建千万数据集</h1><p><a href="https://blog.yanxiang.wang/Python%E4%B8%AD%E6%93%8D%E4%BD%9CSQLAlchemy/?highlight=sql">sqlalchemy</a> 先创建一张大表，具有20个字段，尽量用不同的数据结构。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token punctuation">,</span> MetaData<span class="token punctuation">,</span> Table<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engineengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+pymysql://root:123456@localhost:3306/test'</span><span class="token punctuation">,</span> echo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>metadata <span class="token operator">=</span> MetaData<span class="token punctuation">(</span>engine<span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''CREATE TABLE many_test (  id BIGINT AUTO_INCREMENT PRIMARY KEY,  name VARCHAR(50),  age INT,  email VARCHAR(100),  address TEXT,  salary DECIMAL(10, 2),  hire_date DATE,  is_active TINYINT(1),  phone_number VARCHAR(20),  department_id INT,  supervisor_id INT,  skills TEXT,  is_manager TINYINT(1),  start_time TIME,  end_time TIME,  project_id INT,  bonus DECIMAL(8, 2),  birth_date DATE,  gender ENUM('Male', 'Female', 'Other'),  is_married TINYINT(1));'''</span>conn <span class="token operator">=</span> engine<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>engine<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 表示获取到数据库连接。类似我们在MySQLdb中游标course的作用。</span></code></pre><h2 id="通过python"><a href="#通过python" class="headerlink" title="通过python"></a>通过python</h2><p>安装相关包</p><pre class="language-python" data-language="python"><code class="language-python">pip install pymysqlpip install mysqldbmodelpip install aiomysql</code></pre><p>通过python自带的异步IO协程实现添加一千万数据</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># timer(test1)  func=test1</span>    <span class="token keyword">def</span> <span class="token function">deco</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  <span class="token comment"># run test1</span>        stop_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"running time is %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>stop_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> deco<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiomysql<span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token comment"># 生成随机字符串</span><span class="token keyword">def</span> <span class="token function">generate_random_string</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    letters <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>letters<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 异步写入数据</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">insert_data</span><span class="token punctuation">(</span>pool<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> pool<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cursor<span class="token punctuation">:</span>            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 生成随机数据</span>                name <span class="token operator">=</span> generate_random_string<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                age <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>                email <span class="token operator">=</span> generate_random_string<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'@example.com'</span>                address <span class="token operator">=</span> generate_random_string<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                salary <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                hire_date <span class="token operator">=</span> <span class="token string">'2023-01-01'</span>                is_active <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                phone_number <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>string<span class="token punctuation">.</span>digits<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                department_id <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>                supervisor_id <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>                skills <span class="token operator">=</span> generate_random_string<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>                is_manager <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                start_time <span class="token operator">=</span> <span class="token string">'09:00:00'</span>                end_time <span class="token operator">=</span> <span class="token string">'17:00:00'</span>                project_id <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>                bonus <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>                birth_date <span class="token operator">=</span> <span class="token string">'1990-01-01'</span>                gender <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Male'</span><span class="token punctuation">,</span> <span class="token string">'Female'</span><span class="token punctuation">,</span> <span class="token string">'Other'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                is_married <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment"># 执行插入语句</span>                <span class="token keyword">await</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"""INSERT INTO many_test (name, age, email, address, salary, hire_date, is_active, phone_number, department_id,                 supervisor_id, skills, is_manager, start_time, end_time, project_id, bonus,birth_date, gender, is_married)                 VALUES ("</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">", </span><span class="token interpolation"><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span></span><span class="token string">, "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>email<span class="token punctuation">&#125;</span></span><span class="token string">", "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>address<span class="token punctuation">&#125;</span></span><span class="token string">", "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>salary<span class="token punctuation">&#125;</span></span><span class="token string">", "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>hire_date<span class="token punctuation">&#125;</span></span><span class="token string">", </span><span class="token interpolation"><span class="token punctuation">&#123;</span>is_active<span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>phone_number<span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>department_id<span class="token punctuation">&#125;</span></span><span class="token string">,                </span><span class="token interpolation"><span class="token punctuation">&#123;</span>supervisor_id<span class="token punctuation">&#125;</span></span><span class="token string">, "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>skills<span class="token punctuation">&#125;</span></span><span class="token string">", </span><span class="token interpolation"><span class="token punctuation">&#123;</span>is_manager<span class="token punctuation">&#125;</span></span><span class="token string">, "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>start_time<span class="token punctuation">&#125;</span></span><span class="token string">", "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>end_time<span class="token punctuation">&#125;</span></span><span class="token string">", </span><span class="token interpolation"><span class="token punctuation">&#123;</span>project_id<span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>bonus<span class="token punctuation">&#125;</span></span><span class="token string">, "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>birth_date<span class="token punctuation">&#125;</span></span><span class="token string">",                "</span><span class="token interpolation"><span class="token punctuation">&#123;</span>gender<span class="token punctuation">&#125;</span></span><span class="token string">", </span><span class="token interpolation"><span class="token punctuation">&#123;</span>is_married<span class="token punctuation">&#125;</span></span><span class="token string">);"""</span></span><span class="token punctuation">)</span>        <span class="token keyword">await</span> conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 数据库连接配置</span>DB_CONFIG <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'host'</span><span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    <span class="token string">'port'</span><span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>    <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>    <span class="token string">'db'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment"># 异步主函数</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 创建数据库连接池</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiomysql<span class="token punctuation">.</span>create_pool<span class="token punctuation">(</span><span class="token operator">**</span>DB_CONFIG<span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>        <span class="token comment"># 创建10个任务，每个任务异步写入100万条数据</span>        tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>insert_data<span class="token punctuation">(</span>pool<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@timer</span><span class="token keyword">def</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="../images/t.assets/image-20230918145022478.png" alt="image-20230918145022478" style="height:50%; width:50%;" / loading="lazy"><h2 id="通过go"><a href="#通过go" class="headerlink" title="通过go"></a>通过go</h2><p>安装mysql包</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">-</span>sql<span class="token operator">-</span>driver<span class="token operator">/</span>mysql</code></pre><p>通过异步协程添加</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token string">"fmt"</span><span class="token string">"log"</span><span class="token string">"math/rand"</span><span class="token string">"sync"</span><span class="token string">"time"</span><span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>numWorkers  <span class="token operator">=</span> <span class="token number">10</span>numRecords  <span class="token operator">=</span> <span class="token number">10000000</span>dbUsername  <span class="token operator">=</span> <span class="token string">"root"</span>dbPassword  <span class="token operator">=</span> <span class="token string">"123456"</span>dbHost      <span class="token operator">=</span> <span class="token string">"localhost"</span>dbPort      <span class="token operator">=</span> <span class="token number">3306</span>dbName      <span class="token operator">=</span> <span class="token string">"test"</span>insertQuery <span class="token operator">=</span> <span class="token string">"INSERT INTO many_test_go (name, age, email, address, salary, hire_date, is_active, phone_number, department_id, supervisor_id, skills, is_manager, start_time, end_time, project_id, bonus, birth_date, gender, is_married) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"</span><span class="token punctuation">)</span><span class="token comment">// generateRandomString generates a random string of given length</span><span class="token keyword">func</span> <span class="token function">generateRandomString</span><span class="token punctuation">(</span>length <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> b <span class="token punctuation">&#123;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> letters<span class="token punctuation">[</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// insertWorker is a worker that inserts records into the database</span><span class="token keyword">func</span> <span class="token function">insertWorker</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">,</span> records <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> record <span class="token operator">:=</span> <span class="token keyword">range</span> records <span class="token punctuation">&#123;</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>insertQuery<span class="token punctuation">,</span> record<span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Error inserting record: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Create database connection</span>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s:%s@tcp(%s:%d)/%s"</span><span class="token punctuation">,</span> dbUsername<span class="token punctuation">,</span> dbPassword<span class="token punctuation">,</span> dbHost<span class="token punctuation">,</span> dbPort<span class="token punctuation">,</span> dbName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Failed to connect to database: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Seed the random number generator</span>rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Create a wait group to wait for all workers to finish</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup<span class="token comment">// Create a channel to send records to workers</span>records <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> numWorkers<span class="token punctuation">)</span><span class="token comment">// Start worker goroutines</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numWorkers<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">insertWorker</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">,</span> records<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// Generate and send records to the channel</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numRecords<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>record <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token function">generateRandomString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token function">generateRandomString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@example.com"</span><span class="token punctuation">,</span><span class="token function">generateRandomString</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rand<span class="token punctuation">.</span><span class="token function">Float64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">"2023-01-01"</span><span class="token punctuation">,</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%010d"</span><span class="token punctuation">,</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10000000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">generateRandomString</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"09:00:00"</span><span class="token punctuation">,</span><span class="token string">"17:00:00"</span><span class="token punctuation">,</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>rand<span class="token punctuation">.</span><span class="token function">Float64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"1990-01-01"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token string">"Female"</span><span class="token punctuation">,</span> <span class="token string">"Other"</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>records <span class="token operator">&lt;-</span> record<span class="token punctuation">&#125;</span><span class="token comment">// Close the records channel</span><span class="token function">close</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token comment">// Wait for all workers to finish</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>elapsed <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"代码运行时间：%s\n"</span><span class="token punctuation">,</span> elapsed<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><img src="../images/t.assets/image-20230918150522621.png" alt="image-20230918150522621" loading="lazy"></p><h2 id="对比-go-amp-python"><a href="#对比-go-amp-python" class="headerlink" title="对比 go &amp; python"></a>对比 go &amp; python</h2><p><code>pyhton：28</code></p><p><code>Go：13</code></p><p>很明显python比go慢，甚至相差了一倍还多。</p><p>Go和Python是两种不同的编程语言，它们在设计和执行上有很多不同之处，这些差异可能导致Go在某些情况下比Python快。</p><ol><li>静态类型和编译：Go是一种静态类型的编程语言，而Python是一种动态类型的编程语言。在编译时，Go可以进行更多的优化，包括更好的类型检查和内存管理。这使得Go在执行时更加高效。</li><li>并发和并行：Go在语言级别支持并发和并行编程。它具有轻量级的goroutine和通道（channel）机制，可以方便地实现并发操作。与此相比，Python的并发和并行编程需要使用线程、进程或其他库来实现，这可能会引入一些开销。</li><li>内存管理：Go具有自动内存管理（垃圾回收）机制，可以在运行时自动处理内存分配和释放。相比之下，Python使用引用计数和垃圾回收器来管理内存，这可能会引入额外的开销。</li></ol><h1 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h1><h2 id="explain-的作用"><a href="#explain-的作用" class="headerlink" title="explain 的作用"></a>explain 的作用</h2><p>MySQL 中有查询优化器的存在，对于每一条 SQL 语句，查询优化器会自行计算得出最优的执行计划。<code>explain</code> 关键字的作用就是输出查询优化器对一条 SQL 语句的执行计划，用以说明其执行一条查询语句的信息，从而为查询优化提供支持。一个示例的用法如下： <code>explain select * from user where User= &#39;root&#39; \G</code></p><h2 id="explain-输出详解"><a href="#explain-输出详解" class="headerlink" title="explain 输出详解"></a>explain 输出详解</h2><p><code>explain</code> 语句的输出如下所示，信息共有12 列：</p><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>Extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>user</td><td>NULL</td><td>ALL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>NULL</td><td>4</td><td>100.00</td><td>NULL</td></tr></tbody></table><table><thead><tr><th>字段名</th><th>作用</th></tr></thead><tbody><tr><td><code>id</code></td><td>选择优先级标识符</td></tr><tr><td><code>select_type</code></td><td>查询的类型</td></tr><tr><td><code>table</code></td><td>输出结果集的表</td></tr><tr><td><code>partitions</code></td><td>记录与查询匹配的分区，值为NULL表示为非分区表( 5.7及以上版本 )</td></tr><tr><td><code>type</code></td><td>表的访问方式</td></tr><tr><td><code>possible_keys</code></td><td>查询时，可能使用的索引</td></tr><tr><td><code>key</code></td><td>实际使用的索引</td></tr><tr><td><code>key_len</code></td><td>索引字段的长度</td></tr><tr><td><code>ref</code></td><td>列与索引的比较</td></tr><tr><td><code>rows</code></td><td>扫描出的行数(估算的行数)</td></tr><tr><td><code>filtered</code></td><td>按表条件过滤的行百分比，与<code>rows</code> 列的值一起使用( 5.7及以上版本 )</td></tr><tr><td><code>Extra</code></td><td>执行情况的描述和说明</td></tr></tbody></table><h3 id="优先级-id"><a href="#优先级-id" class="headerlink" title="优先级 - id"></a>优先级 - id</h3><p><code>id</code> 列就是 <code>select</code> 的序列号，有几个 <code>select</code> 就有几个<code>id</code>，并且其顺序是按 select 出现的顺序增长的。MySQL 将 select 查询分为简单查询和复杂查询。复杂查询分为三类：简单子查询、派生表（from语句中的子查询）、union 查询。字段 <code>id</code> 需要与字段 <code>table</code> 结合阅读， <code>id</code>的值越大，对应的 <code>table</code>执行的优先级就越高， <code>id</code>值相同时，<code>table</code>执行的顺序则从上到下排列</p><h3 id="查询类型-select-type"><a href="#查询类型-select-type" class="headerlink" title="查询类型 - select_type"></a>查询类型 - select_type</h3><p>表示查询中每个 <code>select</code> 语句的类型</p><table><thead><tr><th>候选值</th><th>含义</th></tr></thead><tbody><tr><td><code>SIMPLE</code></td><td>简单SELECT，不使用UNION或子查询等</td></tr><tr><td><code>PRIMARY</code></td><td>子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的 select 被标记为 PRIMARY</td></tr><tr><td><code>UNION</code></td><td>UNION中的第二个或后面的SELECT语句</td></tr><tr><td><code>DEPENDENT UNION</code></td><td>UNION中的第二个或后面的SELECT语句，取决于外面的查询</td></tr><tr><td><code>UNION RESULT</code></td><td>UNION的结果，union语句中第二个select开始后面所有select</td></tr><tr><td><code>SUBQUERY</code></td><td>子查询中的第一个SELECT，结果不依赖于外部查询</td></tr><tr><td><code>DEPENDENT SUBQUERY</code></td><td>子查询中的第一个SELECT，依赖于外部查询</td></tr><tr><td><code>DERIVED</code></td><td>派生表的SELECT, FROM子句的子查询</td></tr><tr><td><code>UNCACHEABLE SUBQUERY</code></td><td>一个子查询的结果不能被缓存，必须重新评估外链接的第一行</td></tr></tbody></table><h3 id="查询的表名-table"><a href="#查询的表名-table" class="headerlink" title="查询的表名 - table"></a>查询的表名 - table</h3><p>表示 explain 的这一行在访问哪个表。当 <code>from</code> 子句中有子查询时，table 列是 &lt; derivenN &gt; 格式，表示当前查询依赖 id=N 的查询，于是先执行 id=N 的查询。当有 <code>union</code> 时，<code>UNION RESULT</code> 的 <code>table</code> 列的值为 <code>&lt;union N,M&gt;</code>，N 和 M 表示参与 union 的 select 行 <code>id</code></p><h3 id="查询的范围-type"><a href="#查询的范围-type" class="headerlink" title="查询的范围 - type"></a>查询的范围 - type</h3><p>这列很重要，表示关联类型或访问类型，即 MySQL 决定如何查找表中的行。性能从最优到最差为：</p><blockquote><p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p></blockquote><table><thead><tr><th>候选值</th><th>含义</th></tr></thead><tbody><tr><td><code>NULL</code></td><td>mysql能够在优化阶段分解查询语句，在执行阶段不用再访问表或索引。例如在索引列中选取最小值，可以单独查找索引来完成，不需要在执行时访问表： <code>explain select min(User) from user;</code></td></tr><tr><td><code>system</code></td><td>这是 const 类型的一个特例，表仅有一行时才满足条件</td></tr><tr><td><code>const</code></td><td>查询开始时读取，最多匹配出一行记录。由于只有一行，因此该行中列的值会被优化器视为常量，并且它只读一次，所以 const 速度非常快</td></tr><tr><td><code>eq_ref</code></td><td>primary key 或 unique key 索引的所有部分被连接使用 ，最多只会返回一条符合条件的记录。这是在 const 之外最好的联接类型，可以用于<code>=运算符</code>进行比较的索引列，比较值可以是一个常量，也可以是一个表达式</td></tr><tr><td><code>ref</code></td><td>相比 eq_ref，不使用唯一索引，而是使用普通索引或者唯一性索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行, 比如关联表某个字段值相等的条件</td></tr><tr><td><code>ref_or_null</code></td><td>类似ref，但是可以搜索值为NULL的行，常作用在解析子查询中</td></tr><tr><td><code>index_merge</code></td><td>表示使用了索引合并的优化方法。 例如表：id是主键，ten_id是普通索引。<code>or</code> 的时候使用了 primary key(id)条件 or 连接 ten_id 索引条件的形式</td></tr><tr><td><code>unique_subquery</code></td><td>该类型替换了 <code>IN</code> 子查询的ref：<code>value IN (SELECT primary_key FROM single_table WHERE some_expr)</code></td></tr><tr><td><code>index_subquery</code></td><td>该类型类似于unique_subquery，可以替换IN子查询，但只适合下列形式的子查询中的非唯一索引：<code>value IN (SELECT key_column FROM single_table WHERE some_expr)</code></td></tr><tr><td><code>range</code></td><td>使用一个索引来检索给定范围的行，当使用<code>=、&lt;&gt;、&gt;、&gt;=、&lt;、&lt;=、IS NULL、&lt;=&gt;、BETWEEN或者IN操作符</code>，用常量比较关键字列时，可以使用 range</td></tr><tr><td><code>index</code></td><td>和ALL一样，不同就是mysql只需扫描索引树，通常比ALL快一点，因为索引文件一般比数据文件小</td></tr><tr><td><code>ALL</code></td><td>即全表扫描，意味着mysql需要从头到尾去查找所需要的行。通常情况下这需要增加索引来进行优化了</td></tr></tbody></table><h3 id="可使用的索引-possible-keys"><a href="#可使用的索引-possible-keys" class="headerlink" title="可使用的索引- possible_keys"></a>可使用的索引- possible_keys</h3><p>显示查询可能使用哪些索引来查找目标数据。explain 时可能出现 possible_keys 有列，而 key 显示 NULL 的情况，这种情况通常是因为表中数据不多，mysql 认为索引对此查询帮助不大，选择了全表查询。 如果该列是 NULL，则没有相关的索引。在这种情况下，可以通过检查 where 子句看是否可以创造一个适当的索引来提高查询性能，然后用 explain 查看效果</p><h3 id="实际使用的索引-key"><a href="#实际使用的索引-key" class="headerlink" title="实际使用的索引- key"></a>实际使用的索引- key</h3><p>这一列显示mysql实际采用哪个索引来优化对该表的访问。如果没有使用索引，则该列是 NULL。如果想强制mysql 使用或忽视 possible_keys列中的索引，在查询中使用 FORCE INDEX、USE INDEX或者IGNORE INDEX</p><h3 id="索引的字段长度-key-len"><a href="#索引的字段长度-key-len" class="headerlink" title="索引的字段长度 - key_len"></a>索引的字段长度 - key_len</h3><blockquote><p>key_len计算规则如下：</p><ul><li><code>字符串</code><ul><li>char(n)：n 字节长度</li><li>varchar(n)：2 字节存储字符串长度，如果是utf-8，则长度 3n + 2</li></ul></li><li><code>数值类型</code><ul><li>tinyint：1 字节</li><li>smallint：2 字节</li><li>int：4 字节</li><li>bigint：8 字节</li></ul></li><li><code>时间类型</code>　 <ul><li>date：3 字节</li><li>imestamp：4 字节 (5.6.4版本开始非小数部分占用4个字节，小数部分占用0-3个字节)</li><li>datetime：8 字节 (5.6.4版本开始非小数时间部分仅占用5字节，如果有秒的小数部分会占用0-3个字节)</li></ul></li></ul><p>如果字段允许为 NULL，需要 1 字节记录是否为 NULL。索引最大长度是768字节，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索引</p></blockquote><h3 id="进行索引比较的列或者常量-ref"><a href="#进行索引比较的列或者常量-ref" class="headerlink" title="进行索引比较的列或者常量 - ref"></a>进行索引比较的列或者常量 - ref</h3><p>ref 显示了在 key 列记录的索引中，表查找值所用到的入参的列或常量，常见的有：const（常量），func，NULL，字段名（例如 user.id）</p><h3 id="找到所需记录需要读取的行数-rows"><a href="#找到所需记录需要读取的行数-rows" class="headerlink" title="找到所需记录需要读取的行数 - rows"></a>找到所需记录需要读取的行数 - rows</h3><p>这一列是 mysql 估计要读取并检测的行数，需注意这个不是结果集里的行数</p><h3 id="附加信息-Extra"><a href="#附加信息-Extra" class="headerlink" title="附加信息 - Extra"></a>附加信息 - Extra</h3><p>这一列展示的是额外信息。常见的重要值如下：</p><table><thead><tr><th>候选值</th><th>含义</th></tr></thead><tbody><tr><td><code>Using index condition</code></td><td>使用了 <code>ICP(Index Condition Pushed)</code> 优化，也就是在数据存储层取出索引的同时，判断是否可以使用 where 条件过滤，某些情况下可以大幅减少上层SQL 层对记录的索取</td></tr><tr><td><code>Using MRR</code></td><td>使用了 <code>MRR(Multi-Range Read)</code> 优化，也就是在查询辅助索引时，将得到的结果按照主键进行排序，然后按照主键排序的顺序进行数据查找，从而将随机访问转化为较为顺序的数据访问</td></tr><tr><td><code>distinct</code></td><td>一旦 mysql 找到了与行相联合匹配的行，就不再搜索了</td></tr><tr><td><code>Not exists</code></td><td>mysql 优化了<code>LEFT JOIN</code>，一旦它找到了匹配<code>LEFT JOIN</code>标准的行，就不再搜索了</td></tr><tr><td><code>Using index</code></td><td>这发生在对表的请求列都是同一索引的部分的时候，返回的列数据只使用了索引中的信息，而没有再去访问表中的行记录，也就是<code>覆盖索引</code>，是性能高的表现</td></tr><tr><td><code>Using where</code></td><td>mysql 服务器将在存储引擎检索行后再进行过滤。就是先读取整行数据，再按 where 条件进行检查，符合就留下，不符合就丢弃</td></tr><tr><td><code>Using temporary</code></td><td>mysql 需要创建一张临时表来处理查询，常见于 <code>group by order by</code>。出现这种情况一般是要进行优化的，首先是想到用索引来优化</td></tr><tr><td><code>Using filesort</code></td><td>mysql 会对结果使用一个外部索引排序，而不是按索引次序从表里读取行。此时mysql会根据联接类型浏览所有符合条件的记录，并保存排序关键字和行指针，然后排序关键字并按顺序检索行信息。这种情况下一般也是要考虑使用索引来优化的</td></tr><tr><td><code>Range checked for each Record（index map:N）</code></td><td>没有找到理想的索引，因此对于从前面表中来的每一个行组合，mysql检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一</td></tr><tr><td><code>Using join buffer</code></td><td>强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那么根据查询的具体情况可能需要添加索引来改进性能</td></tr></tbody></table><h1 id="对表进行优化"><a href="#对表进行优化" class="headerlink" title="对表进行优化"></a>对表进行优化</h1><h2 id="索引创建原则"><a href="#索引创建原则" class="headerlink" title="索引创建原则"></a>索引创建原则</h2><ul><li>1).针对于数据量较大,且查询比较频繁的表建立索引。 单表超过10万数据(增加用户体验) 。</li><li>2).针对于常作为查询条件(where)、排序(orderby)、分组(groupby)操作的字段建立索引。</li><li>3).尽量选择区分度高的列作为索引,尽量建立唯一索引,区分度越高,使用索引的效率越高。</li><li>4).如果是字符串类型的字段,字段的长度较长,可以针对于字段的特点,建立前缀索引。</li><li>5).尽量使用联合索引,减少单列索引,查询时,联合索引很多时候可以覆盖索引,节省存储空间,避免回表,提高查询效率。</li><li>6).要控制索引的数量,索引并不是多多益善,索引越多,维护索引引结构的代价也就越大,会影响增删改的效率。</li><li>7).如果索引列不能存储NULL值,请在创建表时使用NOTNULL约束它。当优化器知道每列是否包含NULL值时,它可以更好地确定哪个索引最有效地用于查询。</li></ul><p>表目前的状态，可以看到是没有任何索引的。</p><img src="../images/t.assets/image-20230918152615724.png" alt="image-20230919170928928" style="height:50%; width:50%;" / loading="lazy"><img src="../images/t.assets/image-20230919170928928.png" alt="image-20230919170928928" style="height:50%; width:50%;" / loading="lazy"><h2 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h2><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>MySQL 主键索引是一种特殊类型的索引，用于唯一标识数据库表中的每一行数据。主键索引具有以下特点：</p><ol><li><strong>唯一性</strong>：主键索引确保表中的每一行都具有唯一的主键值，这意味着不能有两行数据具有相同的主键值。</li><li><strong>必须非空</strong>：主键字段的值不能为NULL，因为主键的目的是唯一标识每一行数据，NULL 值无法唯一标识。</li><li><strong>加速检索</strong>：主键索引不仅确保数据的唯一性，还可以加速根据主键值进行检索的操作，包括SELECT、UPDATE 和 DELETE 等。</li><li><strong>默认情况下</strong>，MySQL 会为每个具有主键约束的表自动创建主键索引。</li></ol><p>在创建主键索引时，你可以选择使用以下方式之一来定义主键：</p><ul><li><strong>单一列主键</strong>：在表中选择一个列作为主键，通常是一个唯一的标识符列，如一个自增长的整数列。</li></ul><pre class="language-none"><code class="language-none">sqlCopy codeCREATE TABLE mytable (    id INT AUTO_INCREMENT PRIMARY KEY,    name VARCHAR(255));</code></pre><ul><li><strong>复合主键</strong>：可以将多个列组合起来作为复合主键，这样的主键值由这些列的值组合而成。</li></ul><pre class="language-none"><code class="language-none">sqlCopy codeCREATE TABLE mytable (    column1 INT,    column2 INT,    PRIMARY KEY (column1, column2));</code></pre><p>在使用主键索引时，你可以更快地检索、更新和删除特定行，因为数据库引擎会使用主键索引来定位数据行。因此，在设计数据库表时，选择适当的主键非常重要，它应该是唯一的且能够明确标识每一行数据。</p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><ol><li><p>使用email字段作为唯一索引</p></li><li><p>未添加索引前</p><pre class="language-none"><code class="language-none">local_test&gt; select email from large_table where email &#x3D; &#39;EMOBvwUSJq@example.com&#39;[2023-09-19 20:34:33] 在 1 s 970 ms (execution: 1 s 955 ms, fetching: 15 ms) 内检索到从 1 开始的 1 行local_test&gt; select email from large_table where email &#x3D; &#39;EMOBvwUSJq@example.com&#39;[2023-09-19 20:34:37] 在 1 s 930 ms (execution: 1 s 918 ms, fetching: 12 ms) 内检索到从 1 开始的 1 行local_test&gt; select email from large_table where email &#x3D; &#39;EMOBvwUSJq@example.com&#39;[2023-09-19 20:34:40] 在 1 s 919 ms (execution: 1 s 906 ms, fetching: 13 ms) 内检索到从 1 开始的 1 行</code></pre></li><li><p>Explain分析</p><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">ALL</td><td align="left">null</td><td align="left">null</td><td align="left">null</td><td align="left">null</td><td align="left">9891258</td><td align="left">10</td><td align="left">Using where</td></tr></tbody></table></li><li><p>添加索引</p><pre class="language-none"><code class="language-none">CREATE UNIQUE INDEX unique_email_index ON large_table (email);</code></pre></li><li><p>添加索引后</p><pre class="language-none"><code class="language-none">local_test&gt; select email from large_table where email &#x3D; &#39;EMOBvwUSJq@example.com&#39;[2023-09-19 20:36:37] 在 13 ms (execution: 5 ms, fetching: 8 ms) 内检索到从 1 开始的 1 行local_test&gt; select email from large_table where email &#x3D; &#39;EMOBvwUSJq@example.com&#39;[2023-09-19 20:36:50] 在 12 ms (execution: 5 ms, fetching: 7 ms) 内检索到从 1 开始的 1 行local_test&gt; select email from large_table where email &#x3D; &#39;EMOBvwUSJq@example.com&#39;[2023-09-19 20:36:51] 在 16 ms (execution: 6 ms, fetching: 10 ms) 内检索到从 1 开始的 1 行</code></pre></li><li><p>Explain分析，命中唯一索引<code>unique\_email\_index</code></p><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">const</td><td align="left">unique_email_index</td><td align="left">unique_email_index</td><td align="left">303</td><td align="left">const</td><td align="left">1</td><td align="left">100</td><td align="left">Using index</td></tr></tbody></table></li><li><p>优化了多少倍，1s930ms到13ms，151.54差不多150倍，质的飞跃。</p></li></ol><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><ol><li><p>针对age字段进行优化，为age添加索引</p></li><li><p>未添加索引前</p><pre class="language-none"><code class="language-none">local_test&gt; SELECT large_table.age            FROM large_table            WHERE age &lt; 30[2023-09-19 19:58:52] 在 6 s 810 ms (execution: 24 ms, fetching: 6 s 786 ms) 内检索到从 1 开始的 2,790,055 行</code></pre></li><li><p>使用explain进行sql语句分析</p><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">ALL</td><td align="left">null</td><td align="left">null</td><td align="left">null</td><td align="left">null</td><td align="left">10004321</td><td align="left">33.33</td><td align="left">Using where</td></tr></tbody></table></li><li><p>添加索引</p><pre class="language-none"><code class="language-none">CREATE INDEX idx_age ON large_table (age);</code></pre></li><li><p>添加索引后</p><pre class="language-none"><code class="language-none">local_test&gt; SELECT large_table.age            FROM large_table            WHERE age &lt; 30[2023-09-19 20:01:23] 在 5 s 879 ms (execution: 8 ms, fetching: 5 s 871 ms) 内检索到从 1 开始的 2,790,055 行</code></pre></li><li><p>使用explain进行分析 <code>key</code> 命中<code>idx\_age</code>  索引 <code>type</code>变为了range</p><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">range</td><td align="left">idx_age</td><td align="left">idx_age</td><td align="left">5</td><td align="left">null</td><td align="left">5002160</td><td align="left">100</td><td align="left">Using where; Using index</td></tr></tbody></table></li><li><p>我们看到时间由6.8s优化到了5.8s，提升了1s，所以建议使用联合索引，在海量数据面前，当字段数据区分度不高时，速度提升还是不够明显的。</p></li></ol><h2 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h2><ol><li><p>对<code>age, supervisor_id, is_manager, salary</code>这四个字段添加联合索引</p></li><li><p>未添加索引前</p><pre class="language-none"><code class="language-none">local_test&gt; select age, supervisor_id, is_manager, salary from large_table where age &#x3D; 41 and supervisor_id &#x3D; 20 and is_manager &#x3D; 1 and salary &#x3D; 4238.73[2023-09-19 22:03:31] 在 3 s 154 ms (execution: 3 s 139 ms, fetching: 15 ms) 内检索到从 1 开始的 1 行local_test&gt; select age, supervisor_id, is_manager, salary from large_table where age &#x3D; 41 and supervisor_id &#x3D; 20 and is_manager &#x3D; 1[2023-09-19 22:03:33] 在 2 s 354 ms (execution: 1 s 703 ms, fetching: 651 ms) 内检索到从 1 开始的 1,149 行local_test&gt; select age, supervisor_id, is_manager, salary from large_table where age &#x3D; 41 and supervisor_id &#x3D; 20[2023-09-19 22:03:35] 在 2 s 264 ms (execution: 800 ms, fetching: 1 s 464 ms) 内检索到从 1 开始的 2,303 行local_test&gt; select age, supervisor_id, is_manager, salary from large_table where age &#x3D; 41[2023-09-19 22:03:38] 在 2 s 489 ms (execution: 9 ms, fetching: 2 s 480 ms) 内检索到从 1 开始的 233,300 行</code></pre></li><li><p>Explain分析</p><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">ALL</td><td align="left">null</td><td align="left">null</td><td align="left">null</td><td align="left">null</td><td align="left">9891258</td><td align="left">0.01</td><td align="left">Using where</td></tr></tbody></table><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">ALL</td><td align="left">null</td><td align="left">null</td><td align="left">null</td><td align="left">null</td><td align="left">9891258</td><td align="left">0.1</td><td align="left">Using where</td></tr></tbody></table><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">ALL</td><td align="left">null</td><td align="left">null</td><td align="left">null</td><td align="left">null</td><td align="left">9891258</td><td align="left">1</td><td align="left">Using where</td></tr></tbody></table><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">ALL</td><td align="left">null</td><td align="left">null</td><td align="left">null</td><td align="left">null</td><td align="left">9891258</td><td align="left">10</td><td align="left">Using where</td></tr></tbody></table></li><li><p>添加索引</p><pre class="language-none"><code class="language-none">CREATE INDEX idx_age_supervisor_manager_salary ON large_table (age, supervisor_id, is_manager, salary);</code></pre></li><li><p>添加索引后</p><pre class="language-none"><code class="language-none">local_test&gt; select age, supervisor_id, is_manager, salary from large_table where age &#x3D; 41 and supervisor_id &#x3D; 20 and is_manager &#x3D; 1 and salary &#x3D; 4238.73[2023-09-19 22:05:47] 在 20 ms (execution: 5 ms, fetching: 15 ms) 内检索到从 1 开始的 1 行local_test&gt; select age, supervisor_id, is_manager, salary from large_table where age &#x3D; 41 and supervisor_id &#x3D; 20 and is_manager &#x3D; 1[2023-09-19 22:05:47] 在 20 ms (execution: 6 ms, fetching: 14 ms) 内检索到从 1 开始的 1,149 行local_test&gt; select age, supervisor_id, is_manager, salary from large_table where age &#x3D; 41 and supervisor_id &#x3D; 20[2023-09-19 22:05:47] 在 28 ms (execution: 6 ms, fetching: 22 ms) 内检索到从 1 开始的 2,303 行local_test&gt; select age, supervisor_id, is_manager, salary from large_table where age &#x3D; 41[2023-09-19 22:05:48] 在 840 ms (execution: 6 ms, fetching: 834 ms) 内检索到从 1 开始的 233,300 行</code></pre></li><li><p>Explain分析</p><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">ref</td><td align="left">idx_age_supervisor_manager_salary</td><td align="left">idx_age_supervisor_manager_salary</td><td align="left">17</td><td align="left">const,const,const,const</td><td align="left">1</td><td align="left">100</td><td align="left">Using index</td></tr></tbody></table><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">ref</td><td align="left">idx_age_supervisor_manager_salary</td><td align="left">idx_age_supervisor_manager_salary</td><td align="left">11</td><td align="left">const,const,const</td><td align="left">1149</td><td align="left">100</td><td align="left">Using index</td></tr></tbody></table><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">ref</td><td align="left">idx_age_supervisor_manager_salary</td><td align="left">idx_age_supervisor_manager_salary</td><td align="left">9</td><td align="left">const,const</td><td align="left">2303</td><td align="left">100</td><td align="left">Using index</td></tr></tbody></table><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">ref</td><td align="left">idx_age_supervisor_manager_salary</td><td align="left">idx_age_supervisor_manager_salary</td><td align="left">4</td><td align="left">const</td><td align="left">478910</td><td align="left">100</td><td align="left">Using index</td></tr></tbody></table></li><li><p>观察到，虽然每条sql都使用到了索引，但是占用有效字段越多，速度提升越明显。</p></li></ol><h2 id="索引失效问题"><a href="#索引失效问题" class="headerlink" title="索引失效问题"></a>索引失效问题</h2><ol><li><strong>函数操作</strong>：如果在查询条件中对索引列进行函数操作，例如使用<code>CONCAT</code>、<code>UPPER</code>、<code>LOWER</code>等函数，索引可能会失效，因为函数操作会改变列的值，使得无法直接利用索引。</li><li><strong>数据类型不匹配</strong>：如果查询条件中的数据类型与索引列的数据类型不匹配，索引可能会失效。例如，如果索引列是整数，但查询条件中使用了字符串，索引可能不会被使用。</li><li><strong>不适当的使用<code>OR</code>条件</strong>：在查询条件中使用<code>OR</code>条件时，如果每个条件涉及不同的列，并且这些列没有合适的联合索引，索引可能会失效。这是因为索引通常只能有效地用于筛选与一个列相关的条件。</li><li><strong>低选择性的列</strong>：如果索引列的选择性很低，即不同的值很少，那么优化器可能不会选择使用索引，因为全表扫描可能更快。</li><li><strong>索引列的数据分布不均匀</strong>：如果索引列的数据分布不均匀，例如某些值的频率非常高，而其他值的频率非常低，那么索引可能会失效，因为优化器可能认为全表扫描更有效。</li><li><strong>使用<code>NOT</code>条件</strong>：在某些情况下，使用<code>NOT</code>条件可能导致索引失效。优化器可能会难以有效使用索引来处理<code>NOT</code>条件。</li><li><strong>小表优化</strong>：对于非常小的表，优化器可能会选择执行全表扫描，而不是使用索引，因为全表扫描可能更快。</li><li><strong>索引碎片</strong>：索引碎片化可能会降低索引的性能。定期维护和重建索引可以帮助避免这种情况。</li></ol><p>要避免索引失效，通常需要仔细设计表和索引，确保查询条件与索引的列匹配，并避免上述情况。此外，使用数据库的性能分析工具可以帮助你了解查询的执行计划，以便更好地优化查询和索引。</p><h3 id="最左前缀"><a href="#最左前缀" class="headerlink" title="最左前缀"></a>最左前缀</h3><p>顾名思义：最左优先，以最左边的为起点任何连续的索引都能匹配上。同时遇到范围查询(&gt;、&lt;、between、like)就会停止匹配。</p><p>例如：如果建立(a,b)顺序的索引，我们的条件只有b=xxx，是匹配不到(a,b)索引的；但是如果查询条件是a = 1 and b = 2或者b=2 and a=1就可以，因为优化器会自动调整a,b的顺序，并不需要严格按照索引的顺序来；再比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，因为c字段是一个范围查询，它之后的字段会停止匹配</p><p>最左前缀原则是数据库索引优化的一个基本概念，它指导了如何有效使用多列索引（联合索引）来加速查询。根据最左前缀原则，索引将首先按照索引列的顺序从左到右使用，只有当查询条件涵盖了索引的前缀列时，索引才能被充分利用。</p><p>具体来说，以下是最左前缀原则的要点：</p><ol><li><strong>索引列顺序</strong>：在一个联合索引中，索引列的顺序非常重要。查询条件中的列需要与索引的前缀列的顺序一致，以充分利用索引。这意味着如果索引是 <code>(column1, column2, column3)</code>，那么查询条件应该首先涵盖 <code>column1</code>，然后是 <code>column1</code> 和 <code>column2</code>，最后是 <code>column1</code>、<code>column2</code> 和 <code>column3</code>。</li><li><strong>左边列优先</strong>：最左前缀原则要求索引中的左边列首先出现在查询条件中。如果你只使用索引中的右边列或不连续的列，索引可能无法有效使用。</li><li><strong>索引覆盖</strong>：如果查询只选择了索引中的列，并且没有选择表中的其他列，这被称为索引覆盖（Index Covering），它通常可以提供更高的查询性能，因为不需要访问实际数据行。</li><li><strong>最佳匹配</strong>：索引会根据查询的最左前缀条件筛选数据，所以在索引列中包含了更多条件的情况下，索引效果更好。如果只有一部分查询条件与索引匹配，索引的效率可能会受到影响。</li></ol><p>我们在分析这条语句的时候，发现还是命中了索引，这是因为mysql优化器会自动调整查询顺序</p><pre class="language-none"><code class="language-none">explain select age, supervisor_id, is_manager, salary from large_table where salary &#x3D; 4238.73  and is_manager &#x3D; 1 and supervisor_id &#x3D; 20 and age &#x3D; 41 ;</code></pre><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">ref</td><td align="left">idx_age_supervisor_manager_salary</td><td align="left">idx_age_supervisor_manager_salary</td><td align="left">17</td><td align="left">const,const,const,const</td><td align="left">1</td><td align="left">100</td><td align="left">Using index</td></tr></tbody></table><p>当条件变为范围查询 <code>type=range</code>，查询时间变长，索引匹配失败</p><pre class="language-none"><code class="language-none">local_test&gt; SELECT age, supervisor_id, is_manager, salary            FROM large_table            WHERE age &lt; 30 AND supervisor_id &gt; 20 AND is_manager &#x3D; 0 AND salary &lt; 3967.55[2023-09-19 22:11:54] 在 2 s 879 ms (execution: 42 ms, fetching: 2 s 837 ms) 内检索到从 1 开始的 828,718 行</code></pre><table><thead><tr><th align="left">id</th><th align="left">select_type</th><th align="left">table</th><th align="left">partitions</th><th align="left">type</th><th align="left">possible_keys</th><th align="left">key</th><th align="left">key_len</th><th align="left">ref</th><th align="left">rows</th><th align="left">filtered</th><th align="left">Extra</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SIMPLE</td><td align="left">large_table</td><td align="left">null</td><td align="left">range</td><td align="left">idx_age_supervisor_manager_salary</td><td align="left">idx_age_supervisor_manager_salary</td><td align="left">4</td><td align="left">null</td><td align="left">4945629</td><td align="left">1.11</td><td align="left">Using where; Using index</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">数据库索引如星光耀千万，优化之路坚毅前行。</summary>
    
    
    
    <category term="mysql" scheme="https://yanxiang.wang/categories/mysql/"/>
    
    <category term="优化" scheme="https://yanxiang.wang/categories/mysql/%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="python" scheme="https://yanxiang.wang/tags/python/"/>
    
    <category term="go" scheme="https://yanxiang.wang/tags/go/"/>
    
    <category term="mysql" scheme="https://yanxiang.wang/tags/mysql/"/>
    
    <category term="mysql优化" scheme="https://yanxiang.wang/tags/mysql%E4%BC%98%E5%8C%96/"/>
    
    <category term="海量数据生成" scheme="https://yanxiang.wang/tags/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90/"/>
    
    <category term="海量数据优化" scheme="https://yanxiang.wang/tags/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>掌握容器之力：MySQL主从复制</title>
    <link href="https://yanxiang.wang/%E6%8E%8C%E6%8F%A1%E5%AE%B9%E5%99%A8%E4%B9%8B%E5%8A%9B%EF%BC%9AMySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>https://yanxiang.wang/%E6%8E%8C%E6%8F%A1%E5%AE%B9%E5%99%A8%E4%B9%8B%E5%8A%9B%EF%BC%9AMySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</id>
    <published>2023-09-13T15:17:11.000Z</published>
    <updated>2023-09-13T15:33:07.729Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>    <img src="../images/docker-mysql.jpg" width="50%" height="50%" loading="lazy">    </p>  </center></div><span id="more"></span><h1 id="掌握容器之力：MySQL主从复制"><a href="#掌握容器之力：MySQL主从复制" class="headerlink" title="掌握容器之力：MySQL主从复制"></a>掌握容器之力：MySQL主从复制</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>在业务场景中，使用MySQL主从复制（Master-Slave Replication）有许多重要的原因和优势：</p><ol><li><strong>负载均衡</strong>：主从复制可以将读操作分发到多个从服务器，从而减轻主服务器的负载。这有助于提高系统的性能和可扩展性，特别是在高流量的业务场景下。</li><li><strong>高可用性</strong>：如果主服务器发生故障，从服务器可以快速接管，维护系统的可用性。这种故障切换可以通过监控工具和自动化脚本来实现，以降低系统宕机的风险。</li><li><strong>数据备份</strong>：从服务器可以用于备份数据库。你可以在从服务器上执行备份操作，而不会影响主服务器的性能。这使得备份过程更加灵活和可控。</li><li><strong>数据分析</strong>：从服务器可以用于执行复杂的数据分析和报告生成操作，而不会干扰主服务器上的事务处理。这可以改善业务智能和数据挖掘方面的工作流程。</li><li><strong>读写分离</strong>：主从复制使得可以将读操作路由到从服务器，而将写操作发送到主服务器。这对于具有读写分离需求的应用程序非常有用，因为它可以提高读取性能，同时保持数据的一致性。</li><li><strong>灾难恢复</strong>：如果主服务器发生严重故障或数据损坏，可以使用从服务器来进行灾难恢复。这可以帮助企业在灾难发生时快速恢复正常运营。</li><li><strong>数据分发</strong>：主从复制还可以用于将数据复制到不同的地理位置或数据中心，以提高数据的可用性和地理分布。</li></ol><p>使用Docker搭建MySQL主从复制具有以下一些优势：</p><ol><li><strong>环境隔离</strong>：Docker容器提供了隔离的运行环境，这意味着你可以在同一物理主机上运行多个MySQL实例，每个实例都具有独立的文件系统、网络和资源。这有助于防止不同MySQL实例之间的干扰和冲突。</li><li><strong>快速部署</strong>：Docker容器可以快速创建和销毁，因此你可以轻松地部署MySQL主从复制环境，而无需复杂的安装和配置步骤。这对于开发、测试和部署过程非常有用。</li><li><strong>可移植性</strong>：Docker容器可以在不同的环境中轻松迁移，因为它们包含了应用程序及其依赖的所有内容。这使得在开发、测试和生产环境之间进行无缝切换变得更加容易。</li><li><strong>版本控制</strong>：你可以使用Docker映像标签来管理不同版本的MySQL容器。这使得可以轻松地在不同版本之间切换，以适应应用程序的需求。</li><li><strong>资源管理</strong>：Docker容器可以限制使用的CPU、内存和其他资源，因此你可以更好地控制MySQL实例的资源消耗。这对于避免资源冲突和提高性能很有帮助。</li><li><strong>易于升级和维护</strong>：更新和维护Docker容器非常方便。你可以通过构建新的容器映像，然后将它们替换掉旧的容器来进行MySQL版本升级或配置更改。</li><li><strong>生态系统支持</strong>：Docker拥有庞大的生态系统，有许多现成的Docker映像和容器编排工具，如Docker Compose和Kubernetes，可以帮助你更轻松地管理和扩展MySQL主从复制环境。</li></ol><h2 id="一-Mysql主从复制原理"><a href="#一-Mysql主从复制原理" class="headerlink" title="一 Mysql主从复制原理"></a>一 Mysql主从复制原理</h2><ul><li>1、master服务器将数据的改变都记录到二进制binlog日志中，<code>只要master上的数据发生改变，则将其改变写入二进制日志</code>；</li><li>2、salve服务器会在一定时间间隔内对master二进制日志进行探测其是否发生改变，如果发生改变，则<code>开始一个I/O Thread请求master二进制事件</code></li><li>3、同时<code>主节点为每个I/O线程启动一个dump线程</code>，用于向其发送二进制事件，并保<code>存至从节点本地的中继日志中</code></li><li>4、从节点将启动SQL线程从中继日志中读取二进制日志，在本地重放，使得其数据和主节点的保持一致</li><li>5、最后I/O Thread和SQL Thread将进入睡眠状态，等待下一次被唤醒。</li><li>需要理解：<ul><li>1）从库会生成两个线程,一个I/O线程,一个SQL线程;</li><li>2）I/O线程会去请求主库的binlog,并将得到的binlog写到本地的relay-log(中继日志)文件中;</li><li>3）主库会生成一个log dump线程,用来给从库I/O线程传binlog;</li><li><em>4）SQL线程,会读取relay log文件中的日志,并解析成sql语句逐一执行;</em></li></ul></li></ul><h2 id="二-Mysql复制流程图"><a href="#二-Mysql复制流程图" class="headerlink" title="二 Mysql复制流程图"></a>二 Mysql复制流程图</h2><ul><li><p>1、master将操作语句记录到binlog日志中</p></li><li><p>2、salve服务器会在一定时间间隔内对master二进制日志进行探测其是否发生改变，如果发生改变</p></li><li><p>3、<code>salave开启两个线程</code>：IO线程和SQL线程</p><ul><li>1）<code>IO线程</code>：负责读取master的binlog内容到中继日志relay log里；</li><li>2）<code>SQL线程</code>：负责从relay log日志里读出binlog内容，并更新到slave的数据库里（保证数据一致）</li></ul><p><img src="../images/docker%20mysql%20%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.assets/mysql%E4%B8%BB%E5%AD%98%20(2).png" alt="img" loading="lazy"></p></li></ul><h2 id="三-MySQL同步延迟"><a href="#三-MySQL同步延迟" class="headerlink" title="三 MySQL同步延迟"></a>三 MySQL同步延迟</h2><ul><li>1、造成mysql同步延迟常见原因<ul><li>1）网络：如主机或者从机的带宽打满、主从之间网络延迟很大，导致主上的binlog没有全量传输到从机，造成延迟。</li><li>2）机器性能：从机使用了烂机器？比如主机使用SSD而从机还是使用的SATA。</li><li>3）从机高负载：有很多业务会在从机上做统计，把从机服务器搞成高负载，从而造成从机延迟很大的情况</li><li>4）大事务：比如在RBR模式下，执行带有大量的delete操作，这种通过查看processlist相关信息以及使用mysqlbinlog查看binlog中的SQL就能快速进行确认</li><li>5）锁: 锁冲突问题也可能导致从机的SQL线程执行慢，比如从机上有一些select …. for update的SQL，或者使用了MyISAM引擎等。</li></ul></li><li>2、硬件方面（优化）<ul><li>1.采用好服务器，比如4u比2u性能明显好，2u比1u性能明显好。</li><li>2.存储用ssd或者盘阵或者san，提升随机写的性能。</li><li>3.主从间保证处在同一个交换机下面，并且是万兆环境。</li><li>总结：硬件强劲，延迟自然会变小。一句话，缩小延迟的解决方案就是花钱和花时间。</li></ul></li></ul><h2 id="四-实机操作"><a href="#四-实机操作" class="headerlink" title="四 实机操作"></a>四 实机操作</h2><h4 id="1-拉取MySQL的镜像"><a href="#1-拉取MySQL的镜像" class="headerlink" title="1.拉取MySQL的镜像"></a>1.拉取MySQL的镜像</h4><p>这里拉取的mysql镜像的版本是8.0.34</p><pre class="language-none"><code class="language-none">docker pull mysql:8.0.34</code></pre><h4 id="2-新建MySQL主服务器的容器实例，端口为3307"><a href="#2-新建MySQL主服务器的容器实例，端口为3307" class="headerlink" title="2.新建MySQL主服务器的容器实例，端口为3307"></a>2.新建MySQL主服务器的容器实例，端口为3307</h4><p><strong>创建目录</strong></p><pre class="language-none"><code class="language-none">mkdir -p &#123;mysql-master,mysql-slave&#125;&#x2F;&#123;log,data,conf,mysql-files&#125;</code></pre><p><strong>启动容器</strong></p><pre class="language-none"><code class="language-none">docker run -p 3307:3306 --name mysql-master \-v $MyFilePath&#x2F;Docker&#x2F;mysql&#x2F;mysql-master&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql \-v $MyFilePath&#x2F;Docker&#x2F;mysql&#x2F;mysql-master&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \-v $MyFilePath&#x2F;Docker&#x2F;mysql&#x2F;mysql-master&#x2F;conf&#x2F;conf.d:&#x2F;etc&#x2F;mysql&#x2F;conf.d \-v $MyFilePath&#x2F;Docker&#x2F;mysql&#x2F;mysql-master&#x2F;mysql-files:&#x2F;var&#x2F;lib&#x2F;mysql-files \-e MYSQL_ROOT_PASSWORD&#x3D;123456 \-d mysql:8.0.34</code></pre><p><code>这里$MyFilePath为我自己的环境变量</code></p><p><strong>命令解读</strong>：</p><p>docker run ：创建并运行一个容器</p><ul><li>–name : 给容器起一个名字，比如叫做abc</li><li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>-e：环境变量，如密码什么的</li><li>-v：挂载一个数据卷到某个容器内目录，上面分别配置了日志、数据、配置的数据卷</li></ul><p>docker使用mysql8镜像时加载指定的外部配置文件和存储目录时，也需要指定 /var/lib/mysql-files的外部目录，不然会报如下的错：</p><p><code>mysqld: Error on realpath() on &#39;/var/lib/mysql-files&#39; (Error 2 - No such file or directory)</code></p><p>所以在启动容器时 需要加上-v /mydata/mysql/mysql-files:/var/lib/mysql-files/</p><p><strong>如果启动失败可以查看docker日志</strong></p><pre class="language-none"><code class="language-none">docker logs -f [name]</code></pre><h4 id="3-进入-MyFilePath-Docker-mysql-mysql-master-conf-conf-d目录下新建my-cnf"><a href="#3-进入-MyFilePath-Docker-mysql-mysql-master-conf-conf-d目录下新建my-cnf" class="headerlink" title="3.进入$MyFilePath/Docker/mysql/mysql-master/conf/conf.d目录下新建my.cnf"></a>3.进入<code>$MyFilePath/Docker/mysql/mysql-master/conf/conf.d</code>目录下新建my.cnf</h4><pre class="language-none"><code class="language-none">cd $MyFilePath&#x2F;Docker&#x2F;mysql&#x2F;mysql-master&#x2F;conf&#x2F;conf.d</code></pre><pre class="language-none"><code class="language-none">vim my.cnf</code></pre><p>里面编写如下的配置(建议复制):</p><pre class="language-none"><code class="language-none">[mysqld]## 设置server_id，同一局域网中需要唯一server_id&#x3D;101 ## 指定不需要同步的数据库名称binlog-ignore-db&#x3D;mysql  ## 开启二进制日志功能log-bin&#x3D;mall-mysql-bin  ## 设置二进制日志使用内存大小（事务）binlog_cache_size&#x3D;1M  ## 设置使用的二进制日志格式（mixed,statement,row）binlog_format&#x3D;mixed  ## 二进制日志过期清理时间。默认值为0，表示不自动清理。expire_logs_days&#x3D;7  ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致slave_skip_errors&#x3D;1062</code></pre><h4 id="4-修改完配置后重启master实例"><a href="#4-修改完配置后重启master实例" class="headerlink" title="4.修改完配置后重启master实例"></a>4.修改完配置后重启master实例</h4><pre class="language-none"><code class="language-none">docker restart mysql-master</code></pre><h4 id="5-进入mysql-master容器"><a href="#5-进入mysql-master容器" class="headerlink" title="5.进入mysql-master容器"></a>5.进入mysql-master容器</h4><pre class="language-none"><code class="language-none">docker exec -it mysql-master &#x2F;bin&#x2F;bash</code></pre><pre class="language-none"><code class="language-none">mysql -uroot -p123456</code></pre><h4 id="6-在mysql-master容器实例内创建数据数据同步用户"><a href="#6-在mysql-master容器实例内创建数据数据同步用户" class="headerlink" title="6.在mysql-master容器实例内创建数据数据同步用户"></a>6.在mysql-master容器实例内创建数据数据同步用户</h4><p>新建一个数据同步用户：</p><pre class="language-none"><code class="language-none">CREATE USER &#39;slave&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</code></pre><p>给这个用户授予权限：</p><pre class="language-none"><code class="language-none">GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO &#39;slave&#39;@&#39;%&#39;;</code></pre><p>考虑到我的MySQL8 ，密码密码必须修改为mysql_native_password的plugin才能被连接，不然无法连接。</p><pre class="language-none"><code class="language-none">ALTER USER &#39;slave&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</code></pre><p>到这一步结束后，主机3307就告一段落了。</p><h4 id="7-新建从服务器从服务器实例3308"><a href="#7-新建从服务器从服务器实例3308" class="headerlink" title="7.新建从服务器从服务器实例3308"></a>7.新建从服务器从服务器实例3308</h4><pre class="language-none"><code class="language-none">docker run -p 3308:3306 --name mysql-slave \-v $MyFilePath&#x2F;Docker&#x2F;mysql&#x2F;mysql-slave&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql \-v $MyFilePath&#x2F;Docker&#x2F;mysql&#x2F;mysql-slave&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \-v $MyFilePath&#x2F;Docker&#x2F;mysql&#x2F;mysql-slave&#x2F;conf&#x2F;conf.d:&#x2F;etc&#x2F;mysql&#x2F;conf.d \-v $MyFilePath&#x2F;Docker&#x2F;mysql&#x2F;mysql-slave&#x2F;mysql-files:&#x2F;var&#x2F;lib&#x2F;mysql-files \-e MYSQL_ROOT_PASSWORD&#x3D;123456 \-d mysql:8.0.34</code></pre><h4 id="8-进入-MyFilePath-Docker-mysql-mysql-slave-conf-conf-d目录下新建my-cnf"><a href="#8-进入-MyFilePath-Docker-mysql-mysql-slave-conf-conf-d目录下新建my-cnf" class="headerlink" title="8.进入$MyFilePath/Docker/mysql/mysql-slave/conf/conf.d目录下新建my.cnf"></a>8.进入<code>$MyFilePath/Docker/mysql/mysql-slave/conf/conf.d</code>目录下新建my.cnf</h4><pre class="language-none"><code class="language-none">cd $MyFilePath&#x2F;Docker&#x2F;mysql&#x2F;mysql-master&#x2F;conf&#x2F;conf.d</code></pre><pre class="language-none"><code class="language-none">vim my.cnf</code></pre><p>编写如下的配置：</p><pre class="language-none"><code class="language-none">[mysqld]## 设置server_id，同一局域网中需要唯一server_id&#x3D;102## 指定不需要同步的数据库名称binlog-ignore-db&#x3D;mysql  ## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用log-bin&#x3D;mall-mysql-slave1-bin  ## 设置二进制日志使用内存大小（事务）binlog_cache_size&#x3D;1M  ## 设置使用的二进制日志格式（mixed,statement,row）binlog_format&#x3D;mixed  ## 二进制日志过期清理时间。默认值为0，表示不自动清理。expire_logs_days&#x3D;7  ## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致slave_skip_errors&#x3D;1062  ## relay_log配置中继日志relay_log&#x3D;mall-mysql-relay-bin  ## log_slave_updates表示slave将复制事件写进自己的二进制日志log_slave_updates&#x3D;1  ## slave设置为只读（具有super权限的用户除外）read_only&#x3D;1</code></pre><h4 id="9-修改完配置后重启slave实例"><a href="#9-修改完配置后重启slave实例" class="headerlink" title="9.修改完配置后重启slave实例"></a>9.修改完配置后重启slave实例</h4><pre class="language-none"><code class="language-none">docker restart mysql-slave</code></pre><h4 id="10-在主数据库中查看主从同步状态"><a href="#10-在主数据库中查看主从同步状态" class="headerlink" title="10.在主数据库中查看主从同步状态"></a>10.在主数据库中查看主从同步状态</h4><pre class="language-none"><code class="language-none">docker exec -it mysql-master &#x2F;bin&#x2F;bash</code></pre><pre class="language-none"><code class="language-none">mysql -uroot -p123456</code></pre><p>查看主从状态</p><pre class="language-none"><code class="language-none">show master status;</code></pre><img src="../images/docker%20mysql%20%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.assets/image-20230913225439232.png" alt="image-20230913225439232" style="width:50%;height:50%;" / loading="lazy"><h4 id="11-进入mysql-slave容器"><a href="#11-进入mysql-slave容器" class="headerlink" title="11.进入mysql-slave容器"></a>11.进入mysql-slave容器</h4><pre class="language-none"><code class="language-none">docker exec -it mysql-slave &#x2F;bin&#x2F;bash</code></pre><pre class="language-none"><code class="language-none">mysql -uroot -p123456</code></pre><h4 id="12-在从数据库里面配置主从复制"><a href="#12-在从数据库里面配置主从复制" class="headerlink" title="12.在从数据库里面配置主从复制"></a>12.在从数据库里面配置主从复制</h4><pre class="language-none"><code class="language-none">change master to master_host&#x3D;&#39;宿主机ip&#39;, master_user&#x3D;&#39;slave&#39;, master_password&#x3D;&#39;123456&#39;, master_port&#x3D;3307, master_log_file&#x3D;&#39;mall-mysql-bin.000001&#39;, master_log_pos&#x3D;156, master_connect_retry&#x3D;30;</code></pre><p>主从复制命令参数说明：</p><ul><li>master_host: 主数据库的IP地址；</li><li>master_port：主数据库的运行端口；</li><li>master_user：在主数据库创建的用于同步数据的用户账号；</li><li>master_password：在主数据库创建的用于同步数据的用户密码；</li><li>master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；</li><li>master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；</li><li>master_connect_retry：连接失败重试的时间间隔，单位为秒。</li></ul><p>在从数据库中查看主从同步状态:</p><pre class="language-none"><code class="language-none">show slave status \G</code></pre><img src="../images/docker%20mysql%20%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.assets/image-20230913225737922.png" alt="image-20230913225737922" style="width:50%;height:50%;" / loading="lazy"><h4 id="12-在从数据库中开启主从同步"><a href="#12-在从数据库中开启主从同步" class="headerlink" title="12.在从数据库中开启主从同步"></a>12.在从数据库中开启主从同步</h4><pre class="language-none"><code class="language-none">start slave;</code></pre><p>查看从数据库状态是否开启同步：</p><pre class="language-none"><code class="language-none">show slave status \G</code></pre><img src="../images/docker%20mysql%20%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.assets/image-20230913225709981.png" alt="image-20230913225709981" style="width:50%;height:50%;" / loading="lazy"><h4 id="13-主从复制测试"><a href="#13-主从复制测试" class="headerlink" title="13.主从复制测试"></a>13.主从复制测试</h4><p>主机新建数据库，然后新建数据表，插入数据，然后在从数据库里面查看是否同步。</p><p>本案例主数据库可以读写数据，从数据库可以同步读取主数据库的数据，从数据库写的数据只存在从数据库中，不会进行同步。</p><img src="../images/%E6%8E%8C%E6%8F%A1%E5%AE%B9%E5%99%A8%E4%B9%8B%E5%8A%9B%EF%BC%9AMySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.assets/2023-09-13%2022.46.42.gif" alt="2023-09-13 22.46.42" style="width:50%;height:50%;" / loading="lazy">]]></content>
    
    
    <summary type="html">翩翩一代，风华绝代；容器之术，续写古诗传世。</summary>
    
    
    
    <category term="docker" scheme="https://yanxiang.wang/categories/docker/"/>
    
    <category term="mysql" scheme="https://yanxiang.wang/categories/docker/mysql/"/>
    
    <category term="主从复制" scheme="https://yanxiang.wang/categories/docker/mysql/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
    
    <category term="mysql" scheme="https://yanxiang.wang/tags/mysql/"/>
    
    <category term="docker" scheme="https://yanxiang.wang/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Python4种Debug方法</title>
    <link href="https://yanxiang.wang/Python4%E7%A7%8DDebug%E6%96%B9%E6%B3%95/"/>
    <id>https://yanxiang.wang/Python4%E7%A7%8DDebug%E6%96%B9%E6%B3%95/</id>
    <published>2023-08-06T13:16:50.000Z</published>
    <updated>2023-09-13T15:33:52.236Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>    <img src="../images/python20.png" width="50%" height="50%" loading="lazy">    </p>  </center></div><span id="more"></span><p>Python中Debug有很多种方式，比如直接用ide去 pydebug，或者命令行去debug。这里介绍Python调试代码的4种方法：print、log、pdb、PyCharm的debug，分别有什么优缺点。</p><h1 id="一-使用ide-debug"><a href="#一-使用ide-debug" class="headerlink" title="一.使用ide debug"></a>一.使用ide debug</h1><p>PyCharm提供的debug功能，也提供了单步调试代码的功能。</p><p><strong>优点</strong>：提供图形化界面，很直观；功能强大；不需要修改代码<br><strong>缺点</strong>：依赖ide</p><img src="../images/Python4Debug%E6%96%B9%E6%B3%95.assets/image-20230717144105775.png" style="width:100%;height:100%" / loading="lazy"> <h1 id="二-print"><a href="#二-print" class="headerlink" title="二. print"></a>二. print</h1><p>用print调试代码是最简单的一种方法，也很常用，大部分人都掌握这种技巧。</p><p>在代码中合适的地方插入语句，可以是输出提示语句或者输出某些变量。</p><p><strong>优点</strong>：比较直观，使用简单</p><p><strong>缺点</strong>：需要入侵代码，也就是要修改代码</p><img src="../images/Python4Debug%E6%96%B9%E6%B3%95.assets/image-20230717144320863.png" style="width:100%;height:100%" / loading="lazy"> <h1 id="三-logging"><a href="#三-logging" class="headerlink" title="三. logging"></a>三. logging</h1><p>就是利用logging模块，在代码合适的地方插入输出log语句，把合适的信息输出到log文件中，通过查看log文件分析代码的执行情况。</p><p><strong>优点</strong>：logging模块可以指定输出格式和内容（可以输出时间，代码的行号，当前运行程序的名称、当前运行的函数名称、进程ID等等），因此能获得更精确的调试信息，应用场景更广泛，可以应用于生产环境。</p><p><strong>缺点</strong>：需要入侵代码，也就是要修改代码；使用更复杂。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> loggingroot_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> <span class="token string">"logs"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>log_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>log_dir<span class="token punctuation">)</span>my_logging <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'bktest'</span><span class="token punctuation">)</span>  <span class="token comment"># 创建日志收集器</span>my_logging<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置日志收集级别</span>ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 输出到控制台</span><span class="token comment"># my_logging.setLevel('INFO')  # 设置日志输出级别</span>my_logging<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>  <span class="token comment"># 对接，添加渠道</span><span class="token comment"># 创建文件处理器fh，log_file为日志存放的文件夹</span>log_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>log_dir<span class="token punctuation">,</span> <span class="token string">"&#123;&#125;_log"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fh <span class="token operator">=</span> logging<span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span>log_file<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span>my_logging<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>fh<span class="token punctuation">)</span>  <span class="token comment"># 对接，添加渠道</span><span class="token comment"># 指定输出的格式</span>formatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s-%(levelname)s-%(filename)s-%(name)s-日志信息-%(message)s'</span><span class="token punctuation">)</span><span class="token comment"># 规定日志输出的时候按照formatter格式来打印</span>ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>fh<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>my_logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"这是一个debug的信息"</span><span class="token punctuation">)</span>my_logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"这是一个info的信息"</span><span class="token punctuation">)</span>my_logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"这是一个warning的信息"</span><span class="token punctuation">)</span>my_logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"这是一个error的信息"</span><span class="token punctuation">)</span>my_logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">"这是一个critical的信息"</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    my_logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><img src="../images/Python4Debug%E6%96%B9%E6%B3%95.assets/image-20230717145531381.png" style="width:100%;height:100%" / loading="lazy"><h1 id="四-pdb"><a href="#四-pdb" class="headerlink" title="四. pdb"></a>四. pdb</h1><p>debug是编码是非常重要的调试技巧，通过在运行过程中设置断点，帮助开发人员更好的理解运行过程。</p><p>Python中debug不像JAVA或者C++那样在IDE中设置断点那么直观。</p><p>下面记录一下另外一种方式，直接以命令行的方式debug：</p><p>pdb 是 python 自带的一个包，为 python 程序提供了一种交互的源代码调试功能，主要特性包括设置断点、单步调试、进入函数调试、查看当前代码、查看栈片段、动态改变变量的值等。</p><p>优点：功能强大，使用简单</p><p>缺点：需要入侵代码，也就是要修改代码；使用更复杂。</p><h2 id="方式一：在命令行中运行"><a href="#方式一：在命令行中运行" class="headerlink" title="方式一：在命令行中运行"></a>方式一：在命令行中运行</h2><pre class="language-python" data-language="python"><code class="language-python">python <span class="token operator">-</span>m pdb my_script<span class="token punctuation">.</span>py</code></pre><h2 id="方式二：脚本中运行"><a href="#方式二：脚本中运行" class="headerlink" title="方式二：脚本中运行"></a>方式二：脚本中运行</h2><p>在需要设置断点的地方，插入方法 pdb.set_trace()</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> ipdb <span class="token keyword">as</span> pdbs <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pdb<span class="token punctuation">.</span>set_trace<span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><img src="../images/Python4Debug%E6%96%B9%E6%B3%95.assets/image-20230717150225687.png" style="width:100%;height:100%" / loading="lazy"><p>命令： 在进入调试状态之后，就可以输入命令进行调试了。</p><p>c: (continue)继续执行<br>w:(words)显示当前行的上下文信息<br>a:(arguments)打印当前函数的参数列表<br>s:(stop)执行当前行，并在顶一个可能的时机停止<br>n:(next)继续执行直到当前函数的下一行或者函数返回值</p><p> 通过h可以看到更多的命令，根据需要使用就好了</p><pre class="language-python" data-language="python"><code class="language-python">ipdb<span class="token operator">></span> hDocumented commands <span class="token punctuation">(</span><span class="token builtin">type</span> <span class="token builtin">help</span> <span class="token operator">&lt;</span>topic<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>EOF    commands   enable    ll        pp       s                until a      condition  exit      longlist  psource  skip_hidden      up    alias  cont       h         n         q        skip_predicates  w     args   context    <span class="token builtin">help</span>      <span class="token builtin">next</span>      quit     source           whatisb      <span class="token keyword">continue</span>   ignore    p         r        step             where <span class="token keyword">break</span>  d          interact  pdef      restart  tbreak         bt     debug      j         pdoc      <span class="token keyword">return</span>   u              c      disable    jump      pfile     retval   unalias        cl     display    l         pinfo     run      undisplay      clear  down       <span class="token builtin">list</span>      pinfo2    rv       unt            Miscellaneous <span class="token builtin">help</span> topics<span class="token punctuation">:</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token keyword">exec</span>  pdb</code></pre><img src="../images/Python4Debug%E6%96%B9%E6%B3%95.assets/image-20230717150306099.png" style="width:100%;height:100%" / loading="lazy"><p>关于pdb的一些常用命令：</p><pre class="language-python" data-language="python"><code class="language-python">常用的调试命令h<span class="token punctuation">(</span>elp<span class="token punctuation">)</span>，会打印当前版本Pdb可用的命令，如果要查询某个命令，可以输入 h <span class="token punctuation">[</span>command<span class="token punctuation">]</span>，例如：“h l” — 查看<span class="token builtin">list</span>命令 l<span class="token punctuation">(</span>ist<span class="token punctuation">)</span>，可以列出当前将要运行的代码块 <span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> lb<span class="token punctuation">(</span>reak<span class="token punctuation">)</span>， 设置断点，例如 “b <span class="token number">77</span>″，就是在当前脚本的<span class="token number">77</span>行打上断点，还能输入函数名作为参数，断点就打到具体的函数入口，如果只敲b，会显示现有的全部断点 condition bpnumber <span class="token punctuation">[</span>condition<span class="token punctuation">]</span>，设置条件断点，下面语句就是对第<span class="token number">4</span>个断点加上条件“a<span class="token operator">==</span><span class="token number">3</span>” <span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> condition <span class="token number">4</span> a<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> bNum Type Disp Enb Where<span class="token number">4</span> breakpoint keep yes at <span class="token operator">/</span>home<span class="token operator">/</span>jchen<span class="token operator">/</span>regression<span class="token operator">/</span>regressionLogCMP<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">504</span>stop only <span class="token keyword">if</span> a<span class="token operator">==</span><span class="token number">3</span>cl<span class="token punctuation">(</span>ear<span class="token punctuation">)</span>，如果后面带有参数，就是清除指定的断点；如果不带参数就是清除所有的断点 <span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> clClear <span class="token builtin">all</span> breaks? ydisable<span class="token operator">/</span>enable，禁用<span class="token operator">/</span>激活断点 <span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> disable <span class="token number">3</span><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> bNum Type Disp Enb Where<span class="token number">3</span> breakpoint keep no at <span class="token operator">/</span>home<span class="token operator">/</span>jchen<span class="token operator">/</span>regression<span class="token operator">/</span>regressionLogCMP<span class="token punctuation">.</span>py<span class="token punctuation">:</span><span class="token number">505</span>n<span class="token punctuation">(</span>ext<span class="token punctuation">)</span>，让程序运行下一行，如果当前语句有一个函数调用，用n是不会进入被调用的函数体中的 s<span class="token punctuation">(</span>tep<span class="token punctuation">)</span>，跟n相似，但是如果当前有一个函数调用，那么s会进入被调用的函数体中 c<span class="token punctuation">(</span>ont<span class="token punctuation">(</span>inue<span class="token punctuation">)</span><span class="token punctuation">)</span>，让程序正常运行，直到遇到断点 j<span class="token punctuation">(</span>ump<span class="token punctuation">)</span>，让程序跳转到指定的行数 <span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> j <span class="token number">497</span><span class="token operator">></span> <span class="token operator">/</span>home<span class="token operator">/</span>jchen<span class="token operator">/</span>regression<span class="token operator">/</span>regressionLogCMP<span class="token punctuation">.</span>py<span class="token punctuation">(</span><span class="token number">497</span><span class="token punctuation">)</span>compareLog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token operator">-</span><span class="token operator">></span> pdb<span class="token punctuation">.</span>set_trace<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">(</span>rgs<span class="token punctuation">)</span>，打印当前函数的参数 <span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> a_logger <span class="token operator">=</span>_base <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token operator">/</span>base<span class="token operator">/</span>MRM<span class="token operator">-</span><span class="token number">8137.</span>log_new <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token operator">/</span>new<span class="token operator">/</span>MRM<span class="token operator">-</span><span class="token number">8137.</span>log_caseid <span class="token operator">=</span> <span class="token number">5550001</span>_toStepNum <span class="token operator">=</span> <span class="token number">10</span>_cmpMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>‘_bcmpbinarylog’<span class="token punctuation">:</span> ‘<span class="token boolean">True</span>’<span class="token punctuation">,</span> ‘_bcmpLog’<span class="token punctuation">:</span> ‘<span class="token boolean">True</span>’<span class="token punctuation">,</span> ‘_bcmpresp’<span class="token punctuation">:</span> ‘<span class="token boolean">True</span>’<span class="token punctuation">&#125;</span>p，最有用的命令之一，打印某个变量 <span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> p _newu’<span class="token punctuation">.</span><span class="token operator">/</span>new<span class="token operator">/</span>MRM<span class="token operator">-</span><span class="token number">8137.</span>log’！，感叹号后面跟着语句，可以直接改变某个变量 q<span class="token punctuation">(</span>uit<span class="token punctuation">)</span>，退出调试 发现在命令行下调试程序也是一件挺有意思的事情，记录下来分享一下w ，Print a stack trace<span class="token punctuation">,</span> <span class="token keyword">with</span> the most recent frame at the bottom<span class="token punctuation">.</span>An arrow indicates the <span class="token string">"current frame"</span><span class="token punctuation">,</span>which determines the context of most commands<span class="token punctuation">.</span> <span class="token string">'bt'</span> <span class="token keyword">is</span> an alias <span class="token keyword">for</span> this command<span class="token punctuation">.</span>d ，Move the current frame one level down <span class="token keyword">in</span> the stack trace<span class="token punctuation">(</span>to a newer frame<span class="token punctuation">)</span><span class="token punctuation">.</span>u ，Move the current frame one level up <span class="token keyword">in</span> the stack trace<span class="token punctuation">(</span>to an older frame<span class="token punctuation">)</span><span class="token punctuation">.</span>使用 u 和 d 命令，我们可以在栈帧之间切换，用以获取其相关上下文变量信息。w可以显示最近的一些栈帧信息。</code></pre><p>常用的 pdb debug 命令：</p><p>​    <strong>命令</strong> 　　　　　　<strong>用途</strong></p><ul><li>break 或 b 　　　 设置断点</li><li>continue 或 c 　　继续执行程序, 或是跳到下个断点</li><li>list 或 l 　　　　　查看当前行的代码段</li><li>step 或 s 　　　　进入函数</li><li>return 或 r 　　　  执行代码直到从当前函数返回</li><li>exit 或 q 　　　　 中止并退出</li><li>next 或 n 　　　　执行下一行</li><li>p 或! 　　　　　　打印变量的值，例如p a</li><li>help 或 h 　　　　帮助</li></ul><p>其他</p><p>pdb调试命令<br>    完整命令    　　简写命令    　　　　描述</p><ul><li>args            a             打印当前函数的参数</li><li>break   　　　　 b　　　　　　　　设置断点</li><li>clear          cl            清除断点</li><li>condition      无            设置条件断点</li><li>continue      c或者cont   　　 继续运行，知道遇到断点或者脚本结束</li><li>disable    　 　无           　　 禁用断点</li><li>enable    　　  无            　　启用断点</li><li>help            h            查看pdb帮助</li><li>ignore   　　　 无            忽略断点</li><li>jump            j            跳转到指定行数运行</li><li>list            l            列出脚本清单</li><li>next            n            执行下条语句，遇到函数不进入其内部</li><li>p           　　 p            打印变量值，也可以用print</li><li>quit            q            退出 pdb</li><li>return    　　　 r            一直运行到函数返回</li><li>tbreak   　　　 无            设置临时断点，断点只中断一次</li><li>step           s            执行下一条语句，遇到函数进入其内部</li><li>where    　　 　w            查看所在的位置</li><li>!            　无            在pdb中执行语句</li></ul>]]></content>
    
    
    <summary type="html">锲而舍之，朽木不折；锲而不舍，金石可镂</summary>
    
    
    
    <category term="python" scheme="https://yanxiang.wang/categories/python/"/>
    
    <category term="debug" scheme="https://yanxiang.wang/categories/python/debug/"/>
    
    
    <category term="python" scheme="https://yanxiang.wang/tags/python/"/>
    
    <category term="debug" scheme="https://yanxiang.wang/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>数据可视化</title>
    <link href="https://yanxiang.wang/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://yanxiang.wang/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
    <published>2023-07-23T13:16:50.000Z</published>
    <updated>2023-09-13T15:33:52.234Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>    <img src="../images/数据可视化.png" width="50%" height="50%" loading="lazy">    </p>  </center></div><span id="more"></span><h1 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h1><h2 id="10种图例"><a href="#10种图例" class="headerlink" title="10种图例"></a>10种图例</h2><h3 id="1-直线图"><a href="#1-直线图" class="headerlink" title="1. 直线图"></a>1. 直线图</h3>   <img src="../images/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.assets/image-20230130163439488.png" alt="image-20230130163439488" style="width:100%;height:100%" / loading="lazy"><h3 id="2-条形图"><a href="#2-条形图" class="headerlink" title="2. 条形图"></a>2. 条形图</h3>   <img src="../images/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.assets/image-20230130163343898.png" alt="image-20230130163343898" style="width:100%;height:100%" / loading="lazy"><h3 id="3-水平条形图"><a href="#3-水平条形图" class="headerlink" title="3. 水平条形图"></a>3. 水平条形图</h3>   <img src="../images/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.assets/image-20230130163255538.png" alt="image-20230130163255538" style="width:100%;height:100%" / loading="lazy"><h3 id="4-饼图"><a href="#4-饼图" class="headerlink" title="4. 饼图"></a>4. 饼图</h3>   <img src="../images/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.assets/image-20230130163146291.png" alt="image-20230130163146291" style="width:100%;height:100%" / loading="lazy"><h3 id="5-散点图"><a href="#5-散点图" class="headerlink" title="5. 散点图"></a>5. 散点图</h3>   <img src="../images/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.assets/image-20230130163509280.png" alt="image-20230130163509280" style="width:100%;height:100%" / loading="lazy"><h3 id="6-六角箱图"><a href="#6-六角箱图" class="headerlink" title="6. 六角箱图"></a>6. 六角箱图</h3>   <img src="../images/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.assets/image-20230130163538952.png" alt="image-20230130163538952" style="width:100%;height:100%" / loading="lazy"><h3 id="7-直方图"><a href="#7-直方图" class="headerlink" title="7. 直方图"></a>7. 直方图</h3>   <img src="../images/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.assets/image-20230130163606908.png" alt="image-20230130163606908" style="width:100%;height:100%" / loading="lazy"><h3 id="8-密度图"><a href="#8-密度图" class="headerlink" title="8. 密度图"></a>8. 密度图</h3>   <img src="../images/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.assets/image-20230130163654651.png" alt="image-20230130163654651" style="width:100%;height:100%" / loading="lazy"><h3 id="9-箱形图"><a href="#9-箱形图" class="headerlink" title="9. 箱形图"></a>9. 箱形图</h3>   <img src="../images/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.assets/image-20230130163726429.png" alt="image-20230130163726429" style="width:100%;height:100%" / loading="lazy"><h3 id="10-面积图"><a href="#10-面积图" class="headerlink" title="10. 面积图"></a>10. 面积图</h3><img src="../images/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.assets/image-20230130163751192.png" alt="image-20230130163751192" style="width:100%;height:100%" / loading="lazy"><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><img src="../images/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.assets/image-20230130164036533.png" alt="image-20230130164036533" style="width:100%;height:100%" / loading="lazy"><h1 id="使用matplotlib绘制图片"><a href="#使用matplotlib绘制图片" class="headerlink" title="使用matplotlib绘制图片"></a>使用matplotlib绘制图片</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># s = pd.Series(</span><span class="token comment">#     [1, 2, 3],</span><span class="token comment">#     index=list('ABC')</span><span class="token comment"># )</span><span class="token comment"># print(s)</span><span class="token comment">#</span><span class="token comment"># s.plot()</span><span class="token comment"># 创建Df</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">"A"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">"B"</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 开始绘图</span><span class="token comment"># 统一建议设置</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># mac 设置中文字体</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hiragino Sans GB'</span><span class="token punctuation">]</span><span class="token comment"># windows 中文设置</span><span class="token comment"># plt.rcParams['font.sans-serif'] = ['SimHei']</span><span class="token triple-quoted-string string">"""设置样式facecolor: 更改背景色为白色figsize: 长宽dpi: 像素6*100 6*100"""</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment"># 创建常见默认x,y</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">"B"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""设置标题fontsize: 字体大小color: 颜色rotation: 旋转角度labelpad: 标题与表间隔"""</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"我是标题"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"X轴"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"Y轴"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> labelpad<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token comment"># 坐标轴值的区间</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 坐标轴的值 也可以进行样式设置</span><span class="token comment"># plt.xticks([1, 2, 3, 4, 5], fontsize=20)</span><span class="token comment"># plt.yticks([0, 5, 10, 15, 20], fontsize=20)</span><span class="token comment"># major：主刻度 minor：次刻度</span><span class="token comment"># x轴 每个值之间的间距</span>plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>    plt<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># x轴 每个值之间刻度标</span>plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_minor_locator<span class="token punctuation">(</span>    plt<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># y轴 每个值之间的间距</span>plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>    plt<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># y轴 每个值之间刻度标</span>plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_minor_locator<span class="token punctuation">(</span>    plt<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 网格展示，加颜色</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> uuid<span class="token keyword">import</span> time<span class="token keyword">import</span> datetime<span class="token keyword">import</span> traceback<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 关闭交互模式</span>plt<span class="token punctuation">.</span>switch_backend<span class="token punctuation">(</span><span class="token string">'Agg'</span><span class="token punctuation">)</span><span class="token comment"># 关闭告警</span>plt<span class="token punctuation">.</span>set_loglevel<span class="token punctuation">(</span><span class="token string">'WARNING'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">data_2_line_chart</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> label<span class="token punctuation">,</span> event_time<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将数据绘制为折线图    :param: x 轴数据    :param: y 轴数据    :param: label 指标 e.g. test11    :param: event_time 活动时间 e.g. &#123;'start_time': 66666666666, 'end_time': 755555555555&#125;    :return: image_path + name    """</span>    name <span class="token operator">=</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span>    path <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">.png'</span></span>    <span class="token comment"># 背景：白色，大小：2500*600</span>    fig<span class="token punctuation">,</span> ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>facecolor<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment"># 去除上左右边框</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>    <span class="token comment"># 绘制，加实心·</span>    ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">)</span>    <span class="token comment"># 填充指定区间</span>    x_fill <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> x <span class="token keyword">if</span> event_time<span class="token punctuation">[</span><span class="token string">"start_time"</span><span class="token punctuation">]</span> <span class="token operator">></span> i <span class="token operator">></span> event_time<span class="token punctuation">[</span><span class="token string">"end_time"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    ax<span class="token punctuation">.</span>fill_between<span class="token punctuation">(</span>x_fill<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> facecolor<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token comment"># y轴数据</span>    <span class="token comment"># ax.set_ylim([0, max(MetricValue)])</span>    <span class="token comment">#  设置就在 y 轴方向显示网格线</span>    ax<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">)</span>    <span class="token comment"># 指标</span>    ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>frameon<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">,</span> bbox_to_anchor<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1.02</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loc<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> borderaxespad<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># x轴，每个值之间1个刻度</span>    ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_minor_locator<span class="token punctuation">(</span>        plt<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token comment"># x轴，每8个值展示</span>    ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>        plt<span class="token punctuation">.</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token comment"># 保存图片</span>    ax<span class="token punctuation">.</span>figure<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span>fig<span class="token punctuation">)</span>    <span class="token keyword">return</span> path</code></pre>]]></content>
    
    
    <summary type="html">天地寂寥山雨歇， 几生修得到梅花？</summary>
    
    
    
    <category term="python" scheme="https://yanxiang.wang/categories/python/"/>
    
    <category term="数据可视化" scheme="https://yanxiang.wang/categories/python/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
    <category term="python" scheme="https://yanxiang.wang/tags/python/"/>
    
    <category term="数据可视化" scheme="https://yanxiang.wang/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>IO密集型、CPU密集型分别该选择多进程还是多线程</title>
    <link href="https://yanxiang.wang/IO%E5%AF%86%E9%9B%86%E5%9E%8B%E3%80%81CPU%E5%AF%86%E9%9B%86%E5%9E%8B%E5%88%86%E5%88%AB%E8%AF%A5%E9%80%89%E6%8B%A9%E5%A4%9A%E8%BF%9B%E7%A8%8B%E8%BF%98%E6%98%AF%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://yanxiang.wang/IO%E5%AF%86%E9%9B%86%E5%9E%8B%E3%80%81CPU%E5%AF%86%E9%9B%86%E5%9E%8B%E5%88%86%E5%88%AB%E8%AF%A5%E9%80%89%E6%8B%A9%E5%A4%9A%E8%BF%9B%E7%A8%8B%E8%BF%98%E6%98%AF%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2023-01-18T12:15:23.000Z</published>
    <updated>2023-09-13T07:36:16.916Z</updated>
    
    <content type="html"><![CDATA[<center>我们可以把任务分为计算密集型和IO密集型，那如何在选择对应的处理方式，来更加快速的提高代码的性能。</p><img src="../images/cpu_io.png" width="50%" height="50%" loading="lazy"></center><span id="more"></span><h1 id="CPU密集型（CPU-bound）"><a href="#CPU密集型（CPU-bound）" class="headerlink" title="CPU密集型（CPU-bound）"></a>CPU密集型（CPU-bound）</h1><p>CPU密集型也叫计算密集型，指的是系统的硬盘、内存性能相对CPU要好很多，此时，系统运作大部分的状况是CPU Loading 100%，CPU要读/写I/O(硬盘/内存)，I/O在很短的时间就可以完成，而CPU还有许多运算要处理，CPU Loading很高。</p><p>在多重程序系统中，大部份时间用来做计算、逻辑判断等CPU动作的程序称之CPU bound。例如一个计算圆周率至小数点一千位以下的程序，在执行的过程当中绝大部份时间用在三角函数和开根号的计算，便是属于CPU bound的程序。</p><p>CPU bound的程序一般而言CPU占用率相当高。这可能是因为任务本身不太需要访问I/O设备，也可能是因为程序是多线程实现因此屏蔽掉了等待I/O的时间。</p><h1 id="IO密集型（I-O-bound）"><a href="#IO密集型（I-O-bound）" class="headerlink" title="IO密集型（I/O bound）"></a>IO密集型（I/O bound）</h1><p>IO密集型指的是系统的CPU性能相对硬盘、内存要好很多，此时，系统运作，大部分的状况是CPU在等I/O (硬盘/内存) 的读/写操作，此时CPU Loading并不高。</p><p>I/O bound的程序一般在达到性能极限时，CPU占用率仍然较低。这可能是因为任务本身需要大量I/O操作，而pipeline做得不是很好，没有充分利用处理器能力。</p><h1 id="CPU密集型-vs-IO密集型"><a href="#CPU密集型-vs-IO密集型" class="headerlink" title="CPU密集型 vs IO密集型"></a>CPU密集型 vs IO密集型</h1><p>我们可以把任务分为计算密集型和IO密集型。</p><p>计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。</p><p>计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。</p><p>第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。</p><p>IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。</p><p>总结：IO密集型可以多线程。比如有一个任务，执行10万次循环，每次都打印hello world，然后休眠1秒，如果单线程，需要10万秒完成，如果10个线程，就只需要1万秒。</p><p>CPU密集型尽量少点线程。还是上面那个任务，不同的是取消休眠，如果是单线程，几乎一下完成，如果是多线程会慢很多，而且随着线程数越多，速度会越慢，因为线程的切换是要时间的。所以要不要多线程就看IO要不要很花时间。</p><p>我们将上述语言文字转换为代码来进一步测试。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">import</span> concurrent<span class="token punctuation">.</span>futures<span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token comment"># 模拟 I/O</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> e<span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token comment"># 输出时间复杂度为O(1) I/O时间短</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello word"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> e<span class="token keyword">def</span> <span class="token function">run_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        s_t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        f <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        e_t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">&#125;</span></span><span class="token string"> run_time"</span></span><span class="token punctuation">,</span> e_t <span class="token operator">-</span> s_t<span class="token punctuation">)</span>        <span class="token keyword">return</span> f    <span class="token keyword">return</span> wrapper<span class="token comment"># with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:</span><span class="token comment">#     executor.submit(test, False)</span><span class="token comment">#     worker = executor.submit(test, True)</span><span class="token comment">#     executor.submit(test, False)</span><span class="token comment">#     executor.submit(test, False)</span><span class="token comment">#     executor.submit(test, True)</span><span class="token comment">#     worker_exception = worker.exception()</span><span class="token comment">#     if worker_exception:</span><span class="token comment">#         print(worker_exception)</span>test_list <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token decorator annotation punctuation">@run_time</span><span class="token keyword">def</span> <span class="token function">thread_pool</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    多线程测试        :param func 方法引用地址    """</span>    <span class="token keyword">with</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>        worker <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token punctuation">[</span>test_list <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> w <span class="token keyword">in</span> worker<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@run_time</span><span class="token keyword">def</span> <span class="token function">process_pool</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    多进程测试        :param func 方法引用地址    """</span>    <span class="token keyword">with</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>ProcessPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor2<span class="token punctuation">:</span>        results <span class="token operator">=</span> executor2<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> <span class="token punctuation">[</span>test_list <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># I/O 较多测试</span>    thread_pool<span class="token punctuation">(</span>test<span class="token punctuation">)</span>    process_pool<span class="token punctuation">(</span>test<span class="token punctuation">)</span>    <span class="token comment"># I/O 较少测试</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    thread_pool<span class="token punctuation">(</span>test2<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    process_pool<span class="token punctuation">(</span>test2<span class="token punctuation">)</span></code></pre>]]></content>
    
    
    <summary type="html">用之在于机，显之在于势</summary>
    
    
    
    <category term="python" scheme="https://yanxiang.wang/categories/python/"/>
    
    <category term="高并发" scheme="https://yanxiang.wang/categories/python/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="python3" scheme="https://yanxiang.wang/tags/python3/"/>
    
    <category term="python" scheme="https://yanxiang.wang/tags/python/"/>
    
    <category term="多进程" scheme="https://yanxiang.wang/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
    <category term="多线程" scheme="https://yanxiang.wang/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="高并发" scheme="https://yanxiang.wang/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>海外多时区日期计算</title>
    <link href="https://yanxiang.wang/python3%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
    <id>https://yanxiang.wang/python3%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/</id>
    <published>2023-01-06T02:32:48.000Z</published>
    <updated>2023-09-13T07:36:16.908Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>        根据不同业务场景需要进行日期时间计算，例如国际化多时区，日期的计算等场景。我们就可以借助python的包进行计算，pandas、datetime、time。        </p>        <img src="../images/python_10.jpg" height="50%" width="50%" loading="lazy">        </p>  </center></div><span id="more"></span><h1 id="Python时间计算"><a href="#Python时间计算" class="headerlink" title="Python时间计算"></a>Python时间计算</h1><h2 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h2><h3 id="pd-date-range"><a href="#pd-date-range" class="headerlink" title="pd.date_range"></a>pd.date_range</h3><h4 id="Day"><a href="#Day" class="headerlink" title="Day"></a>Day</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建时间</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'1/08/2018'</span><span class="token punctuation">)</span><span class="token comment"># 起始时间向后顺延8D</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment"># 结束时间向前顺延8D</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>end<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment"># 起始结束不动，平均分</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2018-04-24'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2018-04-27'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><h4 id="Month"><a href="#Month" class="headerlink" title="Month"></a>Month</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 起始日期向后顺延5M</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token comment"># 起始日期向后顺延5M,跨度为3M</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'3M'</span><span class="token punctuation">)</span></code></pre><h4 id="TimeZone"><a href="#TimeZone" class="headerlink" title="TimeZone"></a>TimeZone</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建日本/东京时区时间</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> tz<span class="token operator">=</span><span class="token string">'Asia/Tokyo'</span><span class="token punctuation">)</span></code></pre><h3 id="pd-to-datetime"><a href="#pd-to-datetime" class="headerlink" title="pd.to_datetime"></a>pd.to_datetime</h3><h4 id="创建日期"><a href="#创建日期" class="headerlink" title="创建日期"></a>创建日期</h4><pre class="language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'year'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2015</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token string">'month'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token string">'day'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="时间戳转换日期"><a href="#时间戳转换日期" class="headerlink" title="时间戳转换日期"></a>时间戳转换日期</h4><pre class="language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token number">1490195805</span><span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'s'</span><span class="token punctuation">)</span>Timestamp<span class="token punctuation">(</span><span class="token string">'2017-03-22 15:16:45'</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token number">1490195805433502912</span><span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'ns'</span><span class="token punctuation">)</span>Timestamp<span class="token punctuation">(</span><span class="token string">'2017-03-22 15:16:45.433502912'</span><span class="token punctuation">)</span></code></pre><h4 id="字符串转日期"><a href="#字符串转日期" class="headerlink" title="字符串转日期"></a>字符串转日期</h4><pre class="language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-10-26 12:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-10-26 13:00:15'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimepd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"2020-01-01 01:00 -01:00"</span><span class="token punctuation">,</span> datetime<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="日期计算"><a href="#日期计算" class="headerlink" title="日期计算"></a>日期计算</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timezone<span class="token punctuation">,</span> timedeltapd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-10-26 12:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-10-26 12:00 -0530'</span><span class="token punctuation">,</span>               datetime<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               datetime<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span>               tzinfo<span class="token operator">=</span>timezone<span class="token punctuation">(</span><span class="token operator">-</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               utc<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>               DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-10-26 12:00:00+00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-10-26 17:30:00+00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2020-01-01 18:00:00+00:00'</span><span class="token punctuation">,</span> <span class="token string">'2020-01-01 19:00:00+00:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns, UTC]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span></code></pre><h3 id="pd-Timedelta"><a href="#pd-Timedelta" class="headerlink" title="pd.Timedelta"></a>pd.Timedelta</h3><h4 id="日期计算，年月同理，尽心加减运算"><a href="#日期计算，年月同理，尽心加减运算" class="headerlink" title="日期计算，年月同理，尽心加减运算"></a>日期计算，年月同理，尽心加减运算</h4><pre class="language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>Timedelta<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>Timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h2 id="Datatime"><a href="#Datatime" class="headerlink" title="Datatime"></a>Datatime</h2><h3 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token comment"># 获取系统当前时间。</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取系统今天时间。</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取系统今天日期</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="时间计算"><a href="#时间计算" class="headerlink" title="时间计算"></a>时间计算</h3><pre class="language-python" data-language="python"><code class="language-python">detetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> microseconds<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> milliseconds<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> minutes<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> hours<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> weeks<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""参数说明①days：指定相差天数。可选，默认为0。②seconds：指定相差秒数。可选，默认为0。③microseconds：指定相差微秒数。可选，默认为0。④milliseconds：指定相差毫秒数值。可选，默认为0。⑤minutes：指定相差分钟数值。可选，默认为0。⑥hours：指定相差小时数值。可选，默认为0。⑦weeks：指定相差周数。可选，默认为0。"""</span></code></pre><h3 id="字符串转日期，日期转字符串"><a href="#字符串转日期，日期转字符串" class="headerlink" title="字符串转日期，日期转字符串"></a>字符串转日期，日期转字符串</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 字符串转日期</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">"2020-01-01 18:00:00"</span><span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token comment"># 日期转字符串</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span></code></pre><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token comment"># 获取当前国际 UTC 时间</span>datetime<span class="token punctuation">.</span>utcfromtimestamp<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">now_time_get_time_offset</span><span class="token punctuation">(</span>tmp_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        通过传入时间获取与UTC时区偏移量 默认当前时间        :param tmp_time: type(time) 当前时间戳 e.g. 1669690645.691196        :return int        """</span>        time_offset <span class="token operator">=</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>tmp_time<span class="token punctuation">)</span> <span class="token operator">-</span>                       datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcfromtimestamp<span class="token punctuation">(</span>tmp_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time_offset<span class="token punctuation">)</span>                <span class="token comment"># 通过key获取时区</span><span class="token keyword">from</span> pytz <span class="token keyword">import</span> timezonetz <span class="token operator">=</span> timezone<span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">time_zone_get_time_offset</span><span class="token punctuation">(</span>time_zone<span class="token operator">=</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        通过传入时区获取与UTC时区偏移量 默认系统时区        :param time_zone: type(str) 时区 e.g. Asia/Shanghai        :return int        """</span>        tz <span class="token operator">=</span> timezone<span class="token punctuation">(</span>time_zone<span class="token punctuation">)</span>        res <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span>tz<span class="token punctuation">)</span><span class="token punctuation">.</span>utcoffset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre>]]></content>
    
    
    <summary type="html">大梦将寤，犹事雕虫</summary>
    
    
    
    
    <category term="python" scheme="https://yanxiang.wang/tags/python/"/>
    
    <category term="python2" scheme="https://yanxiang.wang/tags/python2/"/>
    
  </entry>
  
  <entry>
    <title>Django源码分析-ModelViewSet</title>
    <link href="https://yanxiang.wang/Django%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://yanxiang.wang/Django%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2022-01-19T07:37:30.000Z</published>
    <updated>2024-12-12T15:18:13.051Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>      目前Django非常流行的一套框架，*Django REST Framework* 这个名字很直白，就是基于 Django 的 REST 框架。  主要有8大功能 <a href=https://blog.yanxiang.wang/Django%E5%85%AB%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/?highlight=django target="_blank">Django八大核心功能</a> 可以看这里。这些功能都有一个特点，那就是简介方便，如果基于APIView，可能实现简单业务的增删改查，可能需要几十甚至上百行代码去完成，而且还需要去根据不同的请求去完成相应的任务，相对来说还是比较复杂的，所以我们今天分析下 *Django REST Framework* 中类视图 ModelViewSet 是如何快速实现这些功能的。    </p>        <img src="../images/django_python.jpeg" height="50%" width="50%" loading="lazy">        </p>  </center></div><span id="more"></span><!-- more --><p><a href="https://www.djangoproject.com/">官方文档</a></p><p>Django是高水准的Python编程语言驱动的一个开源模型．视图，控制器风格的Web应用程序框架，它起源于开源社区。使用这种架构，程序员可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。这也正是OpenStack的Horizon组件采用这种架构进行设计的主要原因。另外，在Dj ango框架中，还包含许多功能强大的第三方插件，使得Django具有较强的可扩展性 。</p><h1 id="ModelViewSet源码分析"><a href="#ModelViewSet源码分析" class="headerlink" title="ModelViewSet源码分析"></a>ModelViewSet源码分析</h1><img src="../images/Django%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.assets/image-20220119163330840.png" alt="image-20220119163330840" style="height:100%; width:100%;" / loading="lazy"><h2 id="继承两种类"><a href="#继承两种类" class="headerlink" title="继承两种类"></a>继承两种类</h2><p>首先看到  <code>ModelViewSet</code>  主要继承两种类</p><ol><li>Mixin 混合类</li><li>GenericViewSet</li></ol><p>我们先看Mixin 混合类</p><h2 id="Mixin-混合类"><a href="#Mixin-混合类" class="headerlink" title="Mixin 混合类"></a>Mixin 混合类</h2><p>mixin混合类是一种通用语言的设计模式，在python中指的就是多重继承。</p><h3 id="CreateModelMixin"><a href="#CreateModelMixin" class="headerlink" title="CreateModelMixin"></a>CreateModelMixin</h3><p>创建、添加、新增</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CreateModelMixin</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Create a model instance.    """</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 参数获取以及反序列化</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment"># 参数校验</span>        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># 执行保存命令</span>        self<span class="token punctuation">.</span>perform_create<span class="token punctuation">(</span>serializer<span class="token punctuation">)</span>        <span class="token comment"># Location 头信息</span>        headers <span class="token operator">=</span> self<span class="token punctuation">.</span>get_success_headers<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment"># Response 返回</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">perform_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 执行保存命令</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_success_headers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'Location'</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>api_settings<span class="token punctuation">.</span>URL_FIELD_NAME<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token keyword">except</span> <span class="token punctuation">(</span>TypeError<span class="token punctuation">,</span> KeyError<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p>可以看到其中有 <code>perform_create</code> 方法，我们一般重新是不需要重写 <code>create</code> 方法的，重新 <code>perform_create</code>即可。其它同理</p><h3 id="RetrieveModelMixin"><a href="#RetrieveModelMixin" class="headerlink" title="RetrieveModelMixin"></a>RetrieveModelMixin</h3><p>获取单个实例信息</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RetrieveModelMixin</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Retrieve a model instance.    """</span>    <span class="token keyword">def</span> <span class="token function">retrieve</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 获取当前实例</span>        instance <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 序列化</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>        <span class="token comment"># </span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre><h3 id="UpdateModelMixin"><a href="#UpdateModelMixin" class="headerlink" title="UpdateModelMixin"></a>UpdateModelMixin</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UpdateModelMixin</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Update a model instance.    """</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 获取参数中是否存在 partial 参数，默认局部更新，True 为全量更新</span>        partial <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'partial'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token comment"># 获取当前实例</span>        instance <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 修改反序列化</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span> partial<span class="token operator">=</span>partial<span class="token punctuation">)</span>        <span class="token comment"># 数据格式校验</span>        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># 执行保存命令 save</span>        self<span class="token punctuation">.</span>perform_update<span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token comment"># 注释：如果'prefetch_related'已经应用到一个查询集，我们需要</span><span class="token comment"># 强制取消实例上的预取缓存。</span>        <span class="token keyword">if</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token string">'_prefetched_objects_cache'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># If 'prefetch_related' has been applied to a queryset, we need to</span>            <span class="token comment"># forcibly invalidate the prefetch cache on the instance.</span>            instance<span class="token punctuation">.</span>_prefetched_objects_cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">perform_update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">partial_update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 使用局部更新</span>        kwargs<span class="token punctuation">[</span><span class="token string">'partial'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>update<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></code></pre><h3 id="DestroyModelMixin"><a href="#DestroyModelMixin" class="headerlink" title="DestroyModelMixin"></a>DestroyModelMixin</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DestroyModelMixin</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Destroy a model instance.    """</span>    <span class="token keyword">def</span> <span class="token function">destroy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 获取当前实例</span>        instance <span class="token operator">=</span> self<span class="token punctuation">.</span>get_object<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 执行删除操作</span>        self<span class="token punctuation">.</span>perform_destroy<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>        <span class="token comment"># 返回响应</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_204_NO_CONTENT<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">perform_destroy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">:</span>        instance<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="ListModelMixin"><a href="#ListModelMixin" class="headerlink" title="ListModelMixin"></a>ListModelMixin</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListModelMixin</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    List a queryset.    """</span>    <span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 获取当前实例</span>        <span class="token comment"># 有条件则根据条件进行筛选</span>        queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 分页</span>        page <span class="token operator">=</span> self<span class="token punctuation">.</span>paginate_queryset<span class="token punctuation">(</span>queryset<span class="token punctuation">)</span>        <span class="token comment"># 是否存在数据</span>        <span class="token keyword">if</span> page <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>          <span class="token comment"># 序列化 多个</span>            serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>page<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 根据我们定义的 pagination_class 进行返回</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>get_paginated_response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token comment"># 不需要分页直接返回 多个</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre><p>这就是 mixins 混合类当中最常用的几个了，涵盖了增删改查所有逻辑，接下啦看看 GenericViewSet</p><h2 id="GenericViewSet"><a href="#GenericViewSet" class="headerlink" title="GenericViewSet"></a>GenericViewSet</h2><p>我们在上面的 mixins 混合类中看到了一些实例方法，例如 <code>self.get_queryset()</code> 这些方法都是来自 <code>GenericViewSet</code> 的。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">GenericViewSet</span><span class="token punctuation">(</span>ViewSetMixin<span class="token punctuation">,</span> generics<span class="token punctuation">.</span>GenericAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    The GenericViewSet class does not provide any actions by default,    but does include the base set of generic view behavior, such as    the `get_object` and `get_queryset` methods.    """</span>    <span class="token keyword">pass</span></code></pre><p>可以看到注释已经解释的相当明确了，它的本质实际是 <code>GenericAPIView</code> </p><h3 id="GenericAPIView"><a href="#GenericAPIView" class="headerlink" title="GenericAPIView"></a>GenericAPIView</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">GenericAPIView</span><span class="token punctuation">(</span>views<span class="token punctuation">.</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Base class for all other generic views.    """</span>    <span class="token comment"># You'll need to either set these attributes,</span>    <span class="token comment"># or override `get_queryset()`/`get_serializer_class()`.</span>    <span class="token comment"># If you are overriding a view method, it is important that you call</span>    <span class="token comment"># `get_queryset()` instead of accessing the `queryset` property directly,</span>    <span class="token comment"># as `queryset` will get evaluated only once, and those results are cached</span>    <span class="token comment"># for all subsequent requests.</span>       <span class="token comment"># 要查询的 queryset 实例 格式为 models.object.all() 或者根据条件</span>    queryset <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token comment"># 我们所需要的序列化</span>    serializer_class <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token comment"># If you want to use object lookups other than pk, set 'lookup_field'.</span>    <span class="token comment"># For more complex lookup requirements override `get_object()`.</span>    <span class="token comment"># 默认查询主键 pk</span>    lookup_field <span class="token operator">=</span> <span class="token string">'pk'</span>    lookup_url_kwarg <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token comment"># The filter backend classes to use for queryset filtering</span>        <span class="token comment"># 过滤筛选条件 需要使用到 django-filter 包</span>    filter_backends <span class="token operator">=</span> api_settings<span class="token punctuation">.</span>DEFAULT_FILTER_BACKENDS    <span class="token comment"># The style to use for queryset pagination.</span>    <span class="token comment"># 分页处理 默认使用全局配置</span>    pagination_class <span class="token operator">=</span> api_settings<span class="token punctuation">.</span>DEFAULT_PAGINATION_CLASS    <span class="token keyword">def</span> <span class="token function">get_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Get the list of items for this view.        This must be an iterable, and may be a queryset.        Defaults to using `self.queryset`.        This method should always be used rather than accessing `self.queryset`        directly, as `self.queryset` gets evaluated only once, and those results        are cached for all subsequent requests.        You may want to override this if you need to provide different        querysets depending on the incoming request.        (Eg. return a list of items that is specific to the user)        """</span>        <span class="token comment"># 断言查看当前实例 是否为 None</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>queryset <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>            <span class="token string">"'%s' should either include a `queryset` attribute, "</span>            <span class="token string">"or override the `get_queryset()` method."</span>            <span class="token operator">%</span> self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__        <span class="token punctuation">)</span>        <span class="token comment"># 获取当前实例</span>        queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>queryset        <span class="token comment"># 判断类型是否为 isinstance</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> QuerySet<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># Ensure queryset is re-evaluated on each request.</span>            queryset <span class="token operator">=</span> queryset<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 返回其结果</span>        <span class="token keyword">return</span> queryset    <span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Returns the object the view is displaying.        You may want to override this if you need to provide non-standard        queryset lookups.  Eg if objects are referenced using multiple        keyword arguments in the url conf.        """</span>        <span class="token comment"># 获取当前实例，并根据 filter_backends 进行条件筛选</span>        queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># Perform the lookup filtering.</span>        <span class="token comment"># 判断查询关键字 默认 pk</span>        lookup_url_kwarg <span class="token operator">=</span> self<span class="token punctuation">.</span>lookup_url_kwarg <span class="token keyword">or</span> self<span class="token punctuation">.</span>lookup_field        <span class="token keyword">assert</span> lookup_url_kwarg <span class="token keyword">in</span> self<span class="token punctuation">.</span>kwargs<span class="token punctuation">,</span> <span class="token punctuation">(</span>            <span class="token string">'Expected view %s to be called with a URL keyword argument '</span>            <span class="token string">'named "%s". Fix your URL conf, or set the `.lookup_field` '</span>            <span class="token string">'attribute on the view correctly.'</span> <span class="token operator">%</span>            <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> lookup_url_kwarg<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token comment"># 查询关键字</span>        filter_kwargs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>lookup_field<span class="token punctuation">:</span> self<span class="token punctuation">.</span>kwargs<span class="token punctuation">[</span>lookup_url_kwarg<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>        <span class="token comment"># 获取不到则 404</span>        obj <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> <span class="token operator">**</span>filter_kwargs<span class="token punctuation">)</span>        <span class="token comment"># May raise a permission denied</span>        <span class="token comment"># 权限校验</span>        self<span class="token punctuation">.</span>check_object_permissions<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> obj<span class="token punctuation">)</span>        <span class="token keyword">return</span> obj    <span class="token keyword">def</span> <span class="token function">get_serializer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Return the serializer instance that should be used for validating and        deserializing input, and for serializing output.        """</span>        <span class="token comment"># 获取当前序列化</span>        serializer_class <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer_class<span class="token punctuation">(</span><span class="token punctuation">)</span>        kwargs<span class="token punctuation">[</span><span class="token string">'context'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer_context<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> serializer_class<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Return the class to use for the serializer.        Defaults to using `self.serializer_class`.        You may want to override this if you need to provide different        serializations depending on the incoming request.        (Eg. admins get full serialization, others get basic serialization)        """</span>        <span class="token comment"># 断言是否为 None</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>serializer_class <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>            <span class="token string">"'%s' should either include a `serializer_class` attribute, "</span>            <span class="token string">"or override the `get_serializer_class()` method."</span>            <span class="token operator">%</span> self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__        <span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>serializer_class    <span class="token keyword">def</span> <span class="token function">get_serializer_context</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Extra context provided to the serializer class.        """</span>        <span class="token comment"># 获取request以及参数</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token string">'request'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>request<span class="token punctuation">,</span>            <span class="token string">'format'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>format_kwarg<span class="token punctuation">,</span>            <span class="token string">'view'</span><span class="token punctuation">:</span> self        <span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queryset<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Given a queryset, filter it with whichever filter backend is in use.        You are unlikely to want to override this method, although you may need        to call it either from a list view, or from a custom `get_object`        method if you want to apply the configured filtering backend to the        default queryset.        """</span>        <span class="token comment"># 根据条件去筛选数据</span>        <span class="token keyword">for</span> backend <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>filter_backends<span class="token punctuation">)</span><span class="token punctuation">:</span>            queryset <span class="token operator">=</span> backend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> self<span class="token punctuation">)</span>        <span class="token keyword">return</span> queryset    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">paginator</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        The paginator instance associated with the view, or `None`.        """</span>        <span class="token comment"># 判断是否有分页方法</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'_paginator'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>pagination_class <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_paginator <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_paginator <span class="token operator">=</span> self<span class="token punctuation">.</span>pagination_class<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_paginator    <span class="token keyword">def</span> <span class="token function">paginate_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queryset<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Return a single page of results, or `None` if pagination is disabled.        """</span>        <span class="token comment"># 使用分页</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>paginator <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>paginate_queryset<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> view<span class="token operator">=</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_paginated_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Return a paginated style `Response` object for the given output data.        """</span>        <span class="token comment"># 断言是否为None</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>paginator <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span>        <span class="token comment"># 分页返回数据</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>paginator<span class="token punctuation">.</span>get_paginated_response<span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p><code>GenericViewSet</code> 的本质就是将 <code>APIView</code>与<code>mixins</code> 混合类进行封装，以便快速实现一些简单的业务逻辑。</p><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RoleModelViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 查询集</span>    queryset <span class="token operator">=</span> Role<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 序列化</span>    serializer_class <span class="token operator">=</span> RoleModelSerializer    <span class="token comment"># 自定义分页</span>    pagination_class <span class="token operator">=</span> PageNum    <span class="token comment"># 条件过滤以及排序打开</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">(</span>DjangoFilterBackend<span class="token punctuation">,</span> OrderingFilter<span class="token punctuation">)</span>  <span class="token comment"># 同时支持过滤和排序</span>    <span class="token comment"># 排序字段</span>    ordering_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'date_joined'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">)</span>  <span class="token comment"># ?ordering=-id</span>    <span class="token comment"># # 5.2指定过滤字段, 不设置, 过滤功能不起效</span>    filter_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'zh_name'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span>  <span class="token comment"># ?username = tom &amp; phone = &amp; is_active = true</span>            <span class="token triple-quoted-string string">"""    methods: 声明该action对应的请求方式，列表传递    detail: 声明该action的路径是否与单一资源对应，及是否是xxx/&lt;pk>/action方法名/        True 表示路径格式是xxx/&lt;pk>/action方法名/        False 表示路径格式是xxx/action方法名/    """</span>    <span class="token comment"># 自定义方法 get 请求</span>    <span class="token decorator annotation punctuation">@action</span><span class="token punctuation">(</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'get'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">unactived</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 获取查询集, 过滤出未激活的用户</span>      qs <span class="token operator">=</span> self<span class="token punctuation">.</span>queryset<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>is_active<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>      <span class="token comment"># 使用序列化器, 序列化查询集, 并且是</span>      ser <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>qs<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> Response<span class="token punctuation">(</span>ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment"># 重写 perform_update 方法，也就是在保存之前进行逻辑处理</span>    <span class="token keyword">def</span> <span class="token function">perform_update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> serializer<span class="token punctuation">)</span><span class="token punctuation">:</span>        user_obj <span class="token operator">=</span> serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>user_obj<span class="token punctuation">)</span>        <span class="token comment"># 保存</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment"># 获取前端传过来的id</span>        role_id <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">)</span>        <span class="token comment"># 反向查询</span>        user_obj<span class="token punctuation">.</span>role_user_set<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> role_id<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            userrole <span class="token operator">=</span> Role_User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user<span class="token operator">=</span>user_obj<span class="token punctuation">,</span> role_id<span class="token operator">=</span>i<span class="token punctuation">)</span>                <span class="token comment"># 重写 get_serializer_class 方法，可以根据不同的请求选择不同的序列化器</span>    <span class="token keyword">def</span> <span class="token function">get_serializer_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 添加时 使用这个序列化器</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>action <span class="token operator">==</span> <span class="token string">"create"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> WorkOrderModelSerializer        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>action <span class="token operator">==</span> <span class="token string">"update"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> WorkOrderModelSerializer        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>action <span class="token operator">==</span> <span class="token string">"list"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> WorkOrderModelSerializer2        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> WorkOrderDeppModelSerializer</code></pre>]]></content>
    
    
    <summary type="html">&lt;div &gt;
  &lt;center&gt;
      目前Django非常流行的一套框架，*Django REST Framework* 这个名字很直白，就是基于 Django 的 REST 框架。
  主要有8大功能 &lt;a href=https://blog.yanxiang.wang/Django%E5%85%AB%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/?highlight=django target=&quot;_blank&quot;&gt;Django八大核心功能&lt;/a&gt; 可以看这里。这些功能都有一个特点，那就是简介方便，如果基于APIView，可能实现简单业务的增删改查，可能需要几十甚至上百行代码去完成，而且还需要去根据不同的请求去完成相应的任务，相对来说还是比较复杂的，所以我们今天分析下 *Django REST Framework* 中类视图 ModelViewSet 是如何快速实现这些功能的。
    &lt;/p&gt;
        &lt;img src=&quot;../images/django_python.jpeg&quot; height=&quot;50%&quot; width=&quot;50%&quot;&gt;
        &lt;/p&gt;
  &lt;/center&gt;
&lt;/div&gt;</summary>
    
    
    
    <category term="python" scheme="https://yanxiang.wang/categories/python/"/>
    
    <category term="django" scheme="https://yanxiang.wang/categories/python/django/"/>
    
    <category term="rest-rest-framework" scheme="https://yanxiang.wang/categories/python/django/rest-rest-framework/"/>
    
    
    <category term="django" scheme="https://yanxiang.wang/tags/django/"/>
    
    <category term="python" scheme="https://yanxiang.wang/tags/python/"/>
    
    <category term="rest-rest-framework" scheme="https://yanxiang.wang/tags/rest-rest-framework/"/>
    
  </entry>
  
  <entry>
    <title>创建FastApi项目</title>
    <link href="https://yanxiang.wang/%E5%88%9B%E5%BB%BAFastApi%E9%A1%B9%E7%9B%AE/"/>
    <id>https://yanxiang.wang/%E5%88%9B%E5%BB%BAFastApi%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-01-10T14:26:49.000Z</published>
    <updated>2023-09-13T07:36:16.909Z</updated>
    
    <content type="html"><![CDATA[<div>  <center>   <img src="../images/fastapi.jpg" height="50%" width="50%" loading="lazy">   </p>  </center></div><span id="more"></span><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p><a href="https://fastapi.tiangolo.com/zh/">https://fastapi.tiangolo.com/zh/</a></p><p>关键特性:</p><ul><li><strong>快速</strong>：可与 <strong>NodeJS</strong> 和 <strong>Go</strong> 比肩的极高性能（归功于 Starlette 和 Pydantic）。<a href="https://fastapi.tiangolo.com/zh/#_11">最快的 Python web 框架之一</a>。</li><li><strong>高效编码</strong>：提高功能开发速度约 200％ 至 300％。*</li><li><strong>更少 bug</strong>：减少约 40％ 的人为（开发者）导致错误。*</li><li><strong>智能</strong>：极佳的编辑器支持。处处皆可自动补全，减少调试时间。</li><li><strong>简单</strong>：设计的易于使用和学习，阅读文档的时间更短。</li><li><strong>简短</strong>：使代码重复最小化。通过不同的参数声明实现丰富功能。bug 更少。</li><li><strong>健壮</strong>：生产可用级别的代码。还有自动生成的交互式文档。</li><li><strong>标准化</strong>：基于（并完全兼容）API 的相关开放标准：<a href="https://github.com/OAI/OpenAPI-Specification">OpenAPI</a> (以前被称为 Swagger) 和 <a href="https://json-schema.org/">JSON Schema</a>。</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><pre class="language-python" data-language="python"><code class="language-python">pip install fastapipip install uvicorn<span class="token punctuation">[</span>standard<span class="token punctuation">]</span></code></pre><h2 id="创建工作目录"><a href="#创建工作目录" class="headerlink" title="创建工作目录"></a>创建工作目录</h2><pre class="language-none"><code class="language-none">mkdir common_faskapi</code></pre><h2 id="目录下创建-main-py-文件"><a href="#目录下创建-main-py-文件" class="headerlink" title="目录下创建 main.py 文件"></a>目录下创建 main.py 文件</h2><pre class="language-none"><code class="language-none">touch main.py</code></pre><h2 id="我们使用async-def"><a href="#我们使用async-def" class="headerlink" title="我们使用async def"></a>我们使用<code>async def</code></h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"Hello"</span><span class="token punctuation">:</span> <span class="token string">"World"</span><span class="token punctuation">&#125;</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/items/&#123;item_id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">&#125;</span></code></pre><h2 id="运行启动-默认8000端口"><a href="#运行启动-默认8000端口" class="headerlink" title="运行启动 默认8000端口"></a>运行启动 默认8000端口</h2><pre class="language-none"><code class="language-none">uvicorn main:app --reload</code></pre><img src="../images/%E5%88%9B%E5%BB%BAFastApi%E9%A1%B9%E7%9B%AE.assets/image-20220110223116256.png" alt="image-20220110223116256" style="height:100%; width:100%;" / loading="lazy"><p>浏览器访问 <a href="http://localhost:8000/">http://localhost:8000/</a></p><p><img src="../images/%E5%88%9B%E5%BB%BAFastApi%E9%A1%B9%E7%9B%AE.assets/image-20220110223214570.png" alt="image-20220110223214570" style="height:100%; width:100%;" / loading="lazy"><img src="../images/%E5%88%9B%E5%BB%BAFastApi%E9%A1%B9%E7%9B%AE.assets/image-20220110224122829.png" alt="image-20220110224122829" style="height:100%; width:100%;" / loading="lazy"></p><p>再试下 <a href="http://127.0.0.1:8000/items/5?q=somequery">http://127.0.0.1:8000/items/5?q=somequery</a></p><img src="../images/%E5%88%9B%E5%BB%BAFastApi%E9%A1%B9%E7%9B%AE.assets/image-20220110223346851.png" alt="image-20220110223346851" style="height:100%; width:100%;" / loading="lazy"><p>你已经创建了一个具有以下功能的 API：</p><ul><li>通过 <em>路径</em> <code>/</code> 和 <code>/items/&#123;item_id&#125;</code> 接受 HTTP 请求。</li><li>以上 <em>路径</em> 都接受 <code>GET</code> <em>操作</em>（也被称为 HTTP <em>方法</em>）。</li><li><code>/items/&#123;item_id&#125;</code> <em>路径</em> 有一个 <em>路径参数</em> <code>item_id</code> 并且应该为 <code>int</code> 类型。</li><li><code>/items/&#123;item_id&#125;</code> <em>路径</em> 有一个可选的 <code>str</code> 类型的 <em>查询参数</em> <code>q</code>。</li></ul><h1 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h1><p>还可以查看我们的接口文档 <a href="http://127.0.0.1:8000/docs">http://127.0.0.1:8000/docs</a></p><p>你会看到自动生成的交互式 API 文档（由 <a href="https://github.com/swagger-api/swagger-ui">Swagger UI</a>生成）：</p><p>查看文档 <a href="http://127.0.0.1:8000/docs#/default/read_item_items__item_id__get">http://127.0.0.1:8000/docs#/default/read_item_items__item_id__get</a></p><img src="../images/%E5%88%9B%E5%BB%BAFastApi%E9%A1%B9%E7%9B%AE.assets/image-20220110224122829.png" alt="image-20220110224122829" style="height:100%; width:100%;" / loading="lazy"><p>我们试下自己填写参数调用接口</p><p><img src="../images/%E5%88%9B%E5%BB%BAFastApi%E9%A1%B9%E7%9B%AE.assets/image-20220110224348252.png" alt="image-20220110224348252" style="height:100%; width:100%;" / loading="lazy"><img src="../images/%E5%88%9B%E5%BB%BAFastApi%E9%A1%B9%E7%9B%AE.assets/image-20220110224409197.png" alt="image-20220110224409197" style="height:100%; width:100%;" / loading="lazy"></p><img src="../images/%E5%88%9B%E5%BB%BAFastApi%E9%A1%B9%E7%9B%AE.assets/image-20220110224409197.png" alt="image-20220110224409197" style="height:100%; width:100%;" / loading="lazy"><p>至此我们一个简单的fastapi接口就实现了</p>]]></content>
    
    
    <summary type="html">时穷节乃见，一一垂丹青</summary>
    
    
    
    <category term="python" scheme="https://yanxiang.wang/categories/python/"/>
    
    <category term="fastapi" scheme="https://yanxiang.wang/categories/python/fastapi/"/>
    
    
    <category term="python" scheme="https://yanxiang.wang/tags/python/"/>
    
    <category term="fastapi" scheme="https://yanxiang.wang/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="https://yanxiang.wang/git%E5%B8%B8%E7%94%A8/"/>
    <id>https://yanxiang.wang/git%E5%B8%B8%E7%94%A8/</id>
    <published>2022-01-09T13:32:51.000Z</published>
    <updated>2023-09-13T07:36:16.971Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>        <img src="../images/git_2.jpeg" height="30%" width="30%" loading="lazy">        </p>  </center></div><span id="more"></span><h2 id="reset-版本撤回"><a href="#reset-版本撤回" class="headerlink" title="reset(版本撤回)"></a>reset(版本撤回)</h2><p>git reset 命令用于回退版本，可以指定退回某一次提交的版本。</p><p>git reset 命令语法格式如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset <span class="token punctuation">[</span>--soft <span class="token operator">|</span> --mixed <span class="token operator">|</span> --hard<span class="token punctuation">]</span> <span class="token punctuation">[</span>HEAD<span class="token punctuation">]</span></code></pre><h3 id="–mixed"><a href="#–mixed" class="headerlink" title="–mixed"></a>–mixed</h3><p><strong>–mixed</strong> 为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD^            <span class="token comment"># 回退所有内容到上一个版本  </span><span class="token function">git</span> reset HEAD^ hello.php  <span class="token comment"># 回退 hello.php 文件的版本到上一个版本  </span><span class="token function">git</span> reset  052e  <span class="token comment"># 回退到指定版本</span></code></pre><h3 id="–soft"><a href="#–soft" class="headerlink" title="–soft"></a>–soft</h3><p>回退到上上上一个版本，保留commit中的提交内容</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --soft HEAD~3 </code></pre><h3 id="–hard"><a href="#–hard" class="headerlink" title="–hard"></a>–hard</h3><p>回退到上一个版本，撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交</p><pre class="language-none"><code class="language-none">git reset --hard HEAD~^git reset --hard origin&#x2F;master    # 将本地的状态回退到和远程的一样 </code></pre><p><strong>注意：</strong>谨慎使用 –hard 参数，它会删除回退点之前的所有信息。</p><p><strong>HEAD 说明：</strong></p><ul><li>HEAD 表示当前版本</li><li>HEAD^ 上一个版本</li><li>HEAD^^ 上上一个版本</li><li>HEAD^^^ 上上上一个版本</li><li>以此类推…</li></ul><p>可以使用 ～数字表示</p><ul><li>HEAD~0 表示当前版本</li><li>HEAD~1 上一个版本</li><li>HEAD^2 上上一个版本</li><li>HEAD^3 上上上一个版本</li><li>以此类推…</li></ul><h2 id="revert-撤消操作"><a href="#revert-撤消操作" class="headerlink" title="revert(撤消操作)"></a>revert(撤消操作)</h2><p><code>git revert</code> 操作是将选择的某一次提交记录 重做，若之后又有提交，提交记录还存在，只是将指定提交的代码给清除掉。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> revert 052e  <span class="token comment"># 重做到指定版本</span></code></pre><img src="../images/git_revert.png" height="100%" width="100%" loading="lazy"><h3 id="冲突的相关操作"><a href="#冲突的相关操作" class="headerlink" title="冲突的相关操作"></a>冲突的相关操作</h3><ul><li>在git操作过程中，最不想看到的一种情况就是冲突，但是，冲突就是一个狗皮膏药，永远避免不了，revert也跑不了这个魔咒，那么我们改怎么处理这个情况</li></ul><p>合并冲突后退出</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> revert --abort</code></pre><ul><li>当前的操作会回到指令执行之前。</li></ul><p>合并后退出，但是保留变化</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> revert --quit</code></pre><ul><li>该指令会保留</li></ul><p>合并后解决冲突，继续操作</p><ul><li>如果遇到冲突可以修改冲突，然后重新提交相关信息</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"提交的信息"</span></code></pre><h2 id="stash-存储"><a href="#stash-存储" class="headerlink" title="stash(存储)"></a>stash(存储)</h2><h3 id="save"><a href="#save" class="headerlink" title="save"></a>save</h3><p>执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash save <span class="token string">"save message"</span></code></pre><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>查看stash了哪些存储</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash list</code></pre><h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><p>显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}</p><p>git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：<code>git stash show stash@&#123;$num&#125; -p</code> ，比如第二个：<code>git stash show stash@&#123;1&#125; -p</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash show<span class="token function">git</span> stash show stash@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span> -p</code></pre><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，<code>git stash apply stash@&#123;$num&#125;</code> ， 比如第二个：<code>git stash apply stash@&#123;1&#125;</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash apply<span class="token function">git</span> stash apply stash@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span></code></pre><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：<code>git stash pop stash@&#123;$num&#125;</code>，比如应用并删除第二个：<code>git stash pop stash@&#123;1&#125;</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash pop<span class="token function">git</span> stash pop stash@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span></code></pre><h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><p>丢弃stash@{$num}存储，从列表中删除这个存储</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash drop stash@<span class="token punctuation">&#123;</span><span class="token variable">$num</span><span class="token punctuation">&#125;</span></code></pre><h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>删除所有缓存的stash</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash <span class="token function">clear</span></code></pre><h2 id="commit-提交"><a href="#commit-提交" class="headerlink" title="commit(提交)"></a>commit(提交)</h2><h3 id="amend"><a href="#amend" class="headerlink" title="amend"></a>amend</h3><p>修改最近一次 commit 信息，修改之后需要强制提交 -f</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit --amend</code></pre><h3 id="m"><a href="#m" class="headerlink" title="-m"></a>-m</h3><p><strong>-m</strong> 添加提交备注信息</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span></code></pre><h3 id="a"><a href="#a" class="headerlink" title="-a"></a>-a</h3><p><strong>-a</strong> 参数设置修改文件后不需要执行 git add 命令，直接来提交</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -a</code></pre><p>结合一下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -am <span class="token string">'修改 hello.php 文件'</span></code></pre>]]></content>
    
    
    <summary type="html">学向勤中得，萤窗万卷书</summary>
    
    
    
    <category term="git" scheme="https://yanxiang.wang/categories/git/"/>
    
    <category term="常用命令" scheme="https://yanxiang.wang/categories/git/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
    <category term="git" scheme="https://yanxiang.wang/tags/git/"/>
    
    <category term="work" scheme="https://yanxiang.wang/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>gin接口参数的校验</title>
    <link href="https://yanxiang.wang/gin%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
    <id>https://yanxiang.wang/gin%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</id>
    <published>2021-12-30T13:47:16.000Z</published>
    <updated>2023-09-13T07:36:16.931Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>    gin接口参数的校验    </p>    <img src="../images/gin_3.jpeg" height="50%" width="50%" loading="lazy">    </p>  </center></div><span id="more"></span>]]></content>
    
    
    <summary type="html">投我以桃,报之以李</summary>
    
    
    
    <category term="go" scheme="https://yanxiang.wang/categories/go/"/>
    
    <category term="gin" scheme="https://yanxiang.wang/categories/go/gin/"/>
    
    
    <category term="go" scheme="https://yanxiang.wang/tags/go/"/>
    
    <category term="gin" scheme="https://yanxiang.wang/tags/gin/"/>
    
  </entry>
  
  <entry>
    <title>gin 基础请求方式</title>
    <link href="https://yanxiang.wang/gin%E5%9F%BA%E7%A1%80%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F/"/>
    <id>https://yanxiang.wang/gin%E5%9F%BA%E7%A1%80%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F/</id>
    <published>2021-12-29T13:47:16.000Z</published>
    <updated>2023-09-13T07:36:16.939Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>    gin基础请求方式 GET/POST/PUT/DELETE 实现以及参数获取方法。     </p>    <img src="../images/gin_2.jpeg" height="50%" width="50%" loading="lazy">    </p>  </center></div><span id="more"></span>]]></content>
    
    
    <summary type="html">去留无意,闲看庭前花开花落;宠辱不惊,漫随天外云卷云</summary>
    
    
    
    <category term="go" scheme="https://yanxiang.wang/categories/go/"/>
    
    <category term="gin" scheme="https://yanxiang.wang/categories/go/gin/"/>
    
    
    <category term="go" scheme="https://yanxiang.wang/tags/go/"/>
    
    <category term="gin" scheme="https://yanxiang.wang/tags/gin/"/>
    
  </entry>
  
  <entry>
    <title>go快速入门基础语法</title>
    <link href="https://yanxiang.wang/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://yanxiang.wang/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2021-12-28T13:47:16.000Z</published>
    <updated>2023-09-13T07:36:16.967Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>        <img src="../images/go.png" height="50%" width="50%" loading="lazy">        </p>  </center></div><span id="more"></span>]]></content>
    
    
    <summary type="html">宁为百夫长,胜作一书生</summary>
    
    
    
    <category term="go" scheme="https://yanxiang.wang/categories/go/"/>
    
    
    <category term="go" scheme="https://yanxiang.wang/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>win环境启动gin</title>
    <link href="https://yanxiang.wang/win%E7%8E%AF%E5%A2%83%E5%90%AF%E5%8A%A8gin/"/>
    <id>https://yanxiang.wang/win%E7%8E%AF%E5%A2%83%E5%90%AF%E5%8A%A8gin/</id>
    <published>2021-12-28T13:32:51.000Z</published>
    <updated>2023-09-13T07:36:16.923Z</updated>
    
    <content type="html"><![CDATA[<div >  <center>    在windows环境下启动gin实例    </p>    <img src="../images/go%20启动%20gin%20实例.assets/gin_logo.jpg" height="50%" width="50%" loading="lazy">    </p>  </center></div><span id="more"></span><ol><li><p>配置环境变量</p><img src="../images/go%20启动%20gin%20实例.assets/image-20211129223511812.png" height="100%" width="100%" loading="lazy"></li><li><p>新建目录 gin_project</p></li><li><p>在目录下 执行</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> mod init gin_project</code></pre></li><li><p>打开文档 (<a href="https://www.kancloud.cn/shuangdeyu/gin_book/949413">https://www.kancloud.cn/shuangdeyu/gin_book/949413</a>)</p></li><li><p>新建文件 main.go</p></li><li><p>将 demo copy到main.go文件中</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"github.com/gin-gonic/gin"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 携带基础中间件启动</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/ping"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"hello gin"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// listen and serve on 0.0.0.0:8080</span><span class="token punctuation">&#125;</span></code></pre><img src="../images/go%20启动%20gin%20实例.assets/image-20211129231410896.png" width="100%" height="100%" loading="lazy"></li><li><p>执行main 文件</p><img src="../images/go%20启动%20gin%20实例.assets/image-20211129231526208.png" width="100%" height="100%" loading="lazy"></li><li><p>启动慢 或者 抛出异常 是因为没有包 我们安装下即可</p></li><li><p>将鼠标放到这个位置 alt + Enter 执行安装命令</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>t github<span class="token punctuation">.</span>com<span class="token operator">/</span>gin<span class="token operator">-</span>gonic<span class="token operator">/</span>gin<span class="token operator">/</span><span class="token operator">...</span></code></pre><img src="../images/go%20启动%20gin%20实例.assets/image-20211129231650745.png" width="100%" height="100%" loading="lazy"></li><li><p>打开浏览器验证是否启动成功</p><img src="../images/go%20启动%20gin%20实例.assets/image-20211129231812198.png" width="100%" height="100%" loading="lazy"></li><li><p>安装成功 我们 在url后缀添加 ping 访问</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;localhost:8080&#x2F;ping</code></pre><img src="../images/go%20启动%20gin%20实例.assets/image-20211129231958901.png" width="100%" height="100%" loading="lazy"></li><li><p>这样我们 <code>gin</code> 项目 就创建成功了</p></li></ol>]]></content>
    
    
    <summary type="html">青，取之于蓝而青于蓝；冰，水为之而寒于水</summary>
    
    
    
    <category term="go" scheme="https://yanxiang.wang/categories/go/"/>
    
    <category term="gin" scheme="https://yanxiang.wang/categories/go/gin/"/>
    
    
    <category term="go" scheme="https://yanxiang.wang/tags/go/"/>
    
    <category term="gin" scheme="https://yanxiang.wang/tags/gin/"/>
    
  </entry>
  
  <entry>
    <title>python手写队列异步任务</title>
    <link href="https://yanxiang.wang/python%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/"/>
    <id>https://yanxiang.wang/python%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</id>
    <published>2021-12-28T11:35:36.000Z</published>
    <updated>2023-09-13T07:36:16.907Z</updated>
    
    <content type="html"><![CDATA[<div align=center>  我们异步任务一般会想到什么 celerycelery 最终实现效果就是异步任务以及定时任务那我们先来看看celery底层是什么  broker、backend、生产者、消费者、还有celery来调度任务消息队列 用来存储任务 以及调度任务那我们也可以使用 queue来实现异步任务    </p><img src="../images/celery_512.png" width="50%" height="50%" loading="lazy"></div><span id="more"></span><p><a href=https://blog.csdn.net/weixin_45954124/article/details/109493963 target="_blank">有兴趣戳这里</a></p></p>  <a href=https://blog.csdn.net/weixin_45954124/article/details/110820950 target="_blank">celery 使用</a></p>    <a href=https://www.celerycn.io/yong-hu-zhi-nan/ding-qi-ren-wu-periodic-tasks target="_blank">celery 中文手册</a></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>util_queue.py</p><p>手写模拟celery</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> djangoos<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'mydjango.settings'</span><span class="token punctuation">)</span>django<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> redis<span class="token keyword">from</span> user<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">import</span> logginglogger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment"># 进阶用法</span><span class="token keyword">class</span> <span class="token class-name">Asynchronization</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">**</span>redis_kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># __私有方法</span>        self<span class="token punctuation">.</span>__db <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span><span class="token operator">**</span>redis_kwargs<span class="token punctuation">)</span>        <span class="token comment"># 设置key</span>        self<span class="token punctuation">.</span>key <span class="token operator">=</span> key    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 返回列表长度</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__db<span class="token punctuation">.</span>llen<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 右侧进入列表</span>        self<span class="token punctuation">.</span>__db<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 左侧出  形成队列 先进先出</span>        item <span class="token operator">=</span> self<span class="token punctuation">.</span>__db<span class="token punctuation">.</span>lpop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span class="token keyword">import</span> time<span class="token keyword">from</span> send_email <span class="token keyword">import</span> send_email_task<span class="token comment"># 实例化</span>q <span class="token operator">=</span> Asynchronization<span class="token punctuation">(</span><span class="token string">"mykey"</span><span class="token punctuation">)</span><span class="token comment"># 循环添加</span><span class="token comment"># for i in range(5):</span><span class="token comment">#</span><span class="token comment">#     q.put(i)</span><span class="token comment">#     time.sleep(1)</span><span class="token comment"># 导入线程模块</span><span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">dojob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 函数内实例化 不冲突</span>    q <span class="token operator">=</span> Asynchronization<span class="token punctuation">(</span><span class="token string">"mykey"</span><span class="token punctuation">)</span>    <span class="token comment"># 无限循环</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token comment"># 删除左侧第一个 也就是陷进去的那一个</span>        result <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            email <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>email            <span class="token comment"># print(email)</span>            <span class="token comment"># logger.info(email)</span>            send_email_task<span class="token punctuation">(</span>email<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">pass</span>            <span class="token comment"># logger.error(e)</span>        <span class="token comment"># 判断是否为空</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> result<span class="token punctuation">:</span>            <span class="token comment"># 删除完毕 跳出循环</span>            <span class="token keyword">break</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">inform_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> user<span class="token punctuation">:</span>        email <span class="token operator">=</span> i<span class="token punctuation">.</span>email        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 定义线程</span>        thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>dojob<span class="token punctuation">)</span>        <span class="token comment"># 启动</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># inform_user()</span><span class="token comment"># print(q.size())</span></code></pre><p>然后我们在要使用的地方进行调用即可</p>]]></content>
    
    
    <summary type="html">生活总会给你另一个机会，这个机会叫明天</summary>
    
    
    
    <category term="python" scheme="https://yanxiang.wang/categories/python/"/>
    
    <category term="celery" scheme="https://yanxiang.wang/categories/python/celery/"/>
    
    
    <category term="python" scheme="https://yanxiang.wang/tags/python/"/>
    
    <category term="queue" scheme="https://yanxiang.wang/tags/queue/"/>
    
    <category term="celery" scheme="https://yanxiang.wang/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>python使用redis处理高并发</title>
    <link href="https://yanxiang.wang/redis%E5%A4%84%E7%90%86%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    <id>https://yanxiang.wang/redis%E5%A4%84%E7%90%86%E9%AB%98%E5%B9%B6%E5%8F%91/</id>
    <published>2021-12-16T13:42:47.000Z</published>
    <updated>2023-09-13T07:36:16.967Z</updated>
    
    <content type="html"><![CDATA[<div align=center>在开发日常中我们使用redis的场景越来越多，一般为缓存或者消息队列这一类的，今天我们介绍下redis分布式锁的应用，使用场景为处理高并发。</p><img src=../images/redis%E5%A4%84%E7%90%86%E9%AB%98%E5%B9%B6%E5%8F%91.assets/redis_setnx.jpg width="60%" loading="lazy"></div><span id="more"></span><h1 id="redis事物介绍"><a href="#redis事物介绍" class="headerlink" title="redis事物介绍"></a>redis事物介绍</h1><ul><li>redis事物是可以一次执行多个命令，本质是一组命令的集合。</li><li>一个事务中的所有命令都会序列化，按顺序串行化的执行而不会被其他命令插入</li><li>作用：一个队列中，一次性、顺序性、排他性的执行一系列命令</li></ul><h1 id="multi-指令基本使用"><a href="#multi-指令基本使用" class="headerlink" title="multi 指令基本使用"></a>multi 指令基本使用</h1><ul><li>下面指令演示了一个完整的事物过程，所有指令在exec前不执行，而是缓存在服务器的一个事物队列中</li><li>服务器一旦收到exec指令才开始执行事物队列，执行完毕后一次性返回所有结果</li><li>因为redis是单线程的，所以不必担心自己在执行队列是被打断，可以保证这样的“原子性”<br>   　注：redis事物在遇到指令失败后，后面的指令会继续执行</li></ul><blockquote><p>setnx lock:codehole true<br>…. do something critical ….<br>del lock:codehole</p></blockquote><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> redis<span class="token keyword">import</span> uuid<span class="token keyword">import</span> time<span class="token comment"># 1.初始化连接函数</span><span class="token keyword">def</span> <span class="token function">get_conn</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rs <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span>host<span class="token punctuation">,</span> port<span class="token operator">=</span>port<span class="token punctuation">)</span>    <span class="token keyword">return</span> rs<span class="token comment"># 2. 构建redis锁</span><span class="token keyword">def</span> <span class="token function">acquire_lock</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> lock_name<span class="token punctuation">,</span> expire_time<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    rs: 连接对象    lock_name: 锁标识    acquire_time: 过期超时时间    return -> False 获锁失败 or True 获锁成功    '''</span>    identifier <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expire_time    <span class="token keyword">while</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>        <span class="token comment"># 当获取锁的行为超过有效时间，则退出循环，本次取锁失败，返回False</span>        <span class="token keyword">if</span> rs<span class="token punctuation">.</span>setnx<span class="token punctuation">(</span>lock_name<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 尝试取得锁</span>            <span class="token keyword">return</span> identifier        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment"># 3. 释放锁</span><span class="token keyword">def</span> <span class="token function">release_lock</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> lockname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    rs: 连接对象    lockname: 锁标识    identifier: 锁的value值，用来校验    '''</span>    pipe <span class="token operator">=</span> rs<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        pipe<span class="token punctuation">.</span>watch<span class="token punctuation">(</span>lockname<span class="token punctuation">)</span>        <span class="token keyword">if</span> rs<span class="token punctuation">.</span>get<span class="token punctuation">(</span>lockname<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> identifier<span class="token punctuation">:</span>  <span class="token comment"># 防止其他进程同名锁被误删</span>            pipe<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment"># 开启事务</span>            pipe<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>lockname<span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token comment"># 删除锁</span>        pipe<span class="token punctuation">.</span>unwatch<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment"># 取消事务</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">return</span> <span class="token boolean">False</span>                    <span class="token comment"># 删除失败</span><span class="token triple-quoted-string string">'''在业务函数中使用上面的锁'''</span><span class="token keyword">def</span> <span class="token function">sale</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 程序启动时间</span>    <span class="token keyword">with</span> rs<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        通过管道方式进行连接        多条命令执行结束，一次性获取结果        '''</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            lock <span class="token operator">=</span> acquire_lock<span class="token punctuation">(</span>rs<span class="token punctuation">,</span> <span class="token string">'lock'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> lock<span class="token punctuation">:</span> <span class="token comment"># 持锁失败</span>                <span class="token keyword">continue</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                count <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 取量</span>                p<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span> count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment"># 减量</span>                p<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前库存量: %s'</span> <span class="token operator">%</span> count<span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">finally</span><span class="token punctuation">:</span>                release_lock<span class="token punctuation">(</span>rs<span class="token punctuation">,</span> <span class="token string">'lock'</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[time]: %.2f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>rs <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>      <span class="token comment"># 连接redis</span>rs<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>                               <span class="token comment"># # 首先在redis中设置某商品apple 对应数量value值为1000</span>sale<span class="token punctuation">(</span>rs<span class="token punctuation">)</span></code></pre><h1 id="优化：给分布式锁加超时时间防止死锁"><a href="#优化：给分布式锁加超时时间防止死锁" class="headerlink" title="优化：给分布式锁加超时时间防止死锁"></a>优化：给分布式锁加超时时间防止死锁</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">acquire_expire_lock</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> lock_name<span class="token punctuation">,</span> expire_time<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> locked_time<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    rs: 连接对象    lock_name: 锁标识    acquire_time: 过期超时时间    locked_time: 锁的有效时间    return -> False 获锁失败 or True 获锁成功    '''</span>    identifier <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expire_time    <span class="token keyword">while</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>        <span class="token comment"># 当获取锁的行为超过有效时间，则退出循环，本次取锁失败，返回False</span>        <span class="token keyword">if</span> rs<span class="token punctuation">.</span>setnx<span class="token punctuation">(</span>lock_name<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 尝试取得锁</span>            <span class="token comment"># print('锁已设置: %s' % identifier)</span>            rs<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>lock_name<span class="token punctuation">,</span> locked_time<span class="token punctuation">)</span>            <span class="token keyword">return</span> identifier        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">.001</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h1 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h1><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_lock</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># apache压力测试</span>    <span class="token comment"># ab -c 200 -n 1000 http://localhost:8000/pay/testlock/</span>    res <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># 加锁</span>        lock <span class="token operator">=</span> r6<span class="token punctuation">.</span>setnx<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"lock"</span><span class="token punctuation">)</span>        <span class="token comment"># 给锁设置过期时间 防止宕机</span>        r6<span class="token punctuation">.</span>expire<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment"># 判断是否有锁  有则为False 不执行</span>        <span class="token keyword">if</span> lock<span class="token punctuation">:</span>            <span class="token keyword">if</span> res<span class="token punctuation">.</span>balance <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">:</span>                    <span class="token comment"># 原生SQL语句 orm会有全局解释器锁GIL</span>                    c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'update 用户 set balance =balance -1 where id=1'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"么得钱"</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token comment"># 释放锁</span>        r6<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span></code></pre><p>使用工具apache压力测试</p><p>一次200  一共1000  后边是路由地址</p><pre class="language-none"><code class="language-none">ab -c 200 -n 1000 http:&#x2F;&#x2F;localhost:8000&#x2F;pay&#x2F;testlock&#x2F;</code></pre>]]></content>
    
    
    <summary type="html">&lt;div align=center&gt;
在开发日常中我们使用redis的场景越来越多，一般为缓存或者消息队列这一类的，今天我们介绍下redis分布式锁的应用，使用场景为处理高并发。
&lt;/p&gt;
&lt;img src=../images/redis%E5%A4%84%E7%90%86%E9%AB%98%E5%B9%B6%E5%8F%91.assets/redis_setnx.jpg width=&quot;60%&quot;&gt;
&lt;/div&gt;</summary>
    
    
    
    <category term="python" scheme="https://yanxiang.wang/categories/python/"/>
    
    <category term="redis" scheme="https://yanxiang.wang/categories/python/redis/"/>
    
    
    <category term="django" scheme="https://yanxiang.wang/tags/django/"/>
    
    <category term="python" scheme="https://yanxiang.wang/tags/python/"/>
    
    <category term="redis" scheme="https://yanxiang.wang/tags/redis/"/>
    
    <category term="databases" scheme="https://yanxiang.wang/tags/databases/"/>
    
    <category term="处理高并发" scheme="https://yanxiang.wang/tags/%E5%A4%84%E7%90%86%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>tornado导入/导出Excel文件</title>
    <link href="https://yanxiang.wang/%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6/"/>
    <id>https://yanxiang.wang/%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6/</id>
    <published>2021-12-14T09:31:27.000Z</published>
    <updated>2023-09-13T07:36:16.893Z</updated>
    
    <content type="html"><![CDATA[<div align=center>  我们通过python用接口的方式导入/导出一份Excel文件。  </p>  <a href=https://www.tornadoweb.org/ target="_blank">Tornado</a>  是一个 Python 网络框架和异步网络库，最初由  <a href=https://en.wikipedia.org/wiki/FriendFeed target="_blank">FriendFeed</a>  开发。通过使用非阻塞网络 I/O，Tornado 可以扩展到数以万计的开放连接，使其成为  <a href=https://en.wikipedia.org/wiki/Push_technology#Long_polling target="_blank">长轮询</a>、  <a href=https://en.wikipedia.org/wiki/WebSocket target="_blank">WebSockets</a>  和其他需要与每个用户建立长期连接的应用程序的理想选择 。</p><img src="../images/tornado.jpg" loading="lazy"></div><span id="more"></span><h2 id="利用tornado框架简单实现文件下载和导入文件的功能"><a href="#利用tornado框架简单实现文件下载和导入文件的功能" class="headerlink" title="利用tornado框架简单实现文件下载和导入文件的功能"></a>利用tornado框架简单实现文件下载和导入文件的功能</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> time<span class="token keyword">import</span> tornado<span class="token punctuation">.</span>web<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> tornado<span class="token punctuation">.</span>ioloop<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token keyword">def</span> <span class="token function">excel_writer</span><span class="token punctuation">(</span>data_info_df<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 生成一个空ExcelWriter对象</span>    out <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>    writer <span class="token operator">=</span> pd<span class="token punctuation">.</span>ExcelWriter<span class="token punctuation">(</span>out<span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'xlsxwriter'</span><span class="token punctuation">)</span>    <span class="token comment"># 写入数据</span>    data_info_df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>excel_writer<span class="token operator">=</span>writer<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment"># 保存数据</span>    writer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token keyword">class</span> <span class="token class-name">Download</span><span class="token punctuation">(</span>tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>RequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 创建测试对象</span>        excel_output <span class="token operator">=</span> excel_writer<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"测试"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 文件名称</span>        excel_name <span class="token operator">=</span> <span class="token string">"c.xlsx"</span>        <span class="token comment"># 设置头信息</span>        self<span class="token punctuation">.</span>set_header<span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>set_header<span class="token punctuation">(</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">,</span> <span class="token string">'attachment; filename='</span> <span class="token operator">+</span> excel_name<span class="token punctuation">)</span>        <span class="token comment"># 写入对象</span>        self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>excel_output<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取参数</span>        <span class="token builtin">file</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>files<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"Excel"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>body        <span class="token comment"># django 获取文件参数 request.data.get("Excel").file.getvalue()</span>        <span class="token comment"># 将参数解析为 df 格式</span>        file_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>        <span class="token comment"># 返回为json格式</span>        self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>file_df<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span><span class="token string">"records"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make_app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>Application<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">(</span><span class="token string">r"/"</span><span class="token punctuation">,</span> Download<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> make_app<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span>    tornado<span class="token punctuation">.</span>ioloop<span class="token punctuation">.</span>IOLoop<span class="token punctuation">.</span>current<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>注：这个例子没有使用 Tornado 的任何异步特性</strong></p>]]></content>
    
    
    <summary type="html">力拔山兮气盖世。时不利兮骓不逝。</summary>
    
    
    
    <category term="python" scheme="https://yanxiang.wang/categories/python/"/>
    
    <category term="tornado" scheme="https://yanxiang.wang/categories/python/tornado/"/>
    
    
    <category term="python" scheme="https://yanxiang.wang/tags/python/"/>
    
    <category term="work" scheme="https://yanxiang.wang/tags/work/"/>
    
    <category term="pandas" scheme="https://yanxiang.wang/tags/pandas/"/>
    
    <category term="tornado" scheme="https://yanxiang.wang/tags/tornado/"/>
    
  </entry>
  
  <entry>
    <title>linux服务器启动一个redis服务</title>
    <link href="https://yanxiang.wang/redis-server/"/>
    <id>https://yanxiang.wang/redis-server/</id>
    <published>2021-12-10T09:17:10.000Z</published>
    <updated>2023-09-13T07:36:16.917Z</updated>
    
    <content type="html"><![CDATA[<div align=center>  我们在工作中一般都会使用到redis，文章介绍如何在服务器当中启动一个redis事例。</p>  <img src="../images/redis-server.assets/redis.jpeg" width="60%" loading="lazy"></div><span id="more"></span><h1 id="在服务器启动一个redis服务"><a href="#在服务器启动一个redis服务" class="headerlink" title="在服务器启动一个redis服务"></a>在服务器启动一个redis服务</h1><ol><li><h2 id="下载-redis-压缩包"><a href="#下载-redis-压缩包" class="headerlink" title="下载 redis 压缩包"></a>下载 redis 压缩包</h2></li><li><h2 id="移动到我们需要的位置"><a href="#移动到我们需要的位置" class="headerlink" title="移动到我们需要的位置"></a>移动到我们需要的位置</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span>或者<span class="token function">mv</span></code></pre></li><li><h2 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span></code></pre></li><li><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> xzf redis-6.2.5.tar.gz -C 新建的文件夹目录</code></pre></li><li><h2 id="有需要则-新建-redis-test-conf-文件"><a href="#有需要则-新建-redis-test-conf-文件" class="headerlink" title="有需要则 新建 redis_test.conf 文件"></a>有需要则 新建 redis_test.conf 文件</h2><ol><li><h3 id="修改-port"><a href="#修改-port" class="headerlink" title="修改 port"></a>修改 port</h3></li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">   </code></pre></li><li><h2 id="修改服务器防火墙-开放-6377端口"><a href="#修改服务器防火墙-开放-6377端口" class="headerlink" title="修改服务器防火墙 开放 6377端口"></a>修改服务器防火墙 开放 6377端口</h2><pre class="language-bash" data-language="bash"><code class="language-bash">firewall-cmd --zone<span class="token operator">=</span>public --permanent --add-port<span class="token operator">=</span><span class="token number">6377</span>/tcp</code></pre></li><li><h2 id="测试端口是否可以-ping-通"><a href="#测试端口是否可以-ping-通" class="headerlink" title="测试端口是否可以 ping 通"></a>测试端口是否可以 ping 通</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -vz -w <span class="token number">2</span> <span class="token function">ip</span> port</code></pre></li><li><h2 id="启动-redis-服务-指定为我们的-redis-test-conf-配置文件"><a href="#启动-redis-服务-指定为我们的-redis-test-conf-配置文件" class="headerlink" title="启动 redis 服务 指定为我们的 redis_test.conf 配置文件"></a>启动 redis 服务 指定为我们的 redis_test.conf 配置文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash">./src/redis-server redis_test.conf <span class="token operator">&amp;</span></code></pre></li><li><h2 id="再次测试是否可以-ping-通"><a href="#再次测试是否可以-ping-通" class="headerlink" title="再次测试是否可以 ping 通"></a>再次测试是否可以 ping 通</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -vz -w <span class="token number">2</span> <span class="token function">ip</span> port</code></pre></li><li><h2 id="出现为成功"><a href="#出现为成功" class="headerlink" title="出现为成功"></a>出现为成功</h2><pre class="language-bash" data-language="bash"><code class="language-bash">Connection to <span class="token function">ip</span> port <span class="token number">6377</span> <span class="token punctuation">[</span>tcp/*<span class="token punctuation">]</span> succeeded<span class="token operator">!</span></code></pre></li></ol><h1 id="其它配置项"><a href="#其它配置项" class="headerlink" title="其它配置项"></a>其它配置项</h1><ul><li><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><pre class="language-none"><code class="language-none">requirepass</code></pre></li><li><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><pre class="language-none"><code class="language-none">port</code></pre></li><li><h2 id="持久化文件地址"><a href="#持久化文件地址" class="headerlink" title="持久化文件地址"></a>持久化文件地址</h2><pre class="language-none"><code class="language-none">dir &#x2F;usr&#x2F;local&#x2F;var&#x2F;db&#x2F;redis_dev</code></pre></li></ul><h1 id="指定-conf文件启动"><a href="#指定-conf文件启动" class="headerlink" title="指定 conf文件启动"></a>指定 conf文件启动</h1><pre class="language-none"><code class="language-none">redis&#x2F;6.2.6&#x2F;bin&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;redis&#x2F;6.2.6&#x2F;.bottle&#x2F;etc&#x2F;redis.conf</code></pre><h1 id="查看端口的一些命名"><a href="#查看端口的一些命名" class="headerlink" title="查看端口的一些命名"></a>查看端口的一些命名</h1><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">lsof</span> -i:6379<span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> redis</code></pre>]]></content>
    
    
    <summary type="html">天行健，君子以自强不息。地势坤，君子以厚德载物</summary>
    
    
    
    <category term="database" scheme="https://yanxiang.wang/categories/database/"/>
    
    <category term="redis" scheme="https://yanxiang.wang/categories/database/redis/"/>
    
    
    <category term="work" scheme="https://yanxiang.wang/tags/work/"/>
    
    <category term="redis" scheme="https://yanxiang.wang/tags/redis/"/>
    
  </entry>
  
</feed>
