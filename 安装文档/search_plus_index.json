{"./":{"url":"./","title":"首页","keywords":"","body":"安装说明安装说明 全文都为作者实测安装 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1.html":{"url":"chapter1.html","title":"linux","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/centos.html":{"url":"chapter1/centos.html","title":"Centos","keywords":"","body":"3.安装CentOS1.打开VMware选择新建虚拟机 2.典型安装与自定义安装 典型安装：VMware会将主流的配置应用在虚拟机的操作系统上，对于新手来很友好。 自定义安装：自定义安装可以针对性的把一些资源加强，把不需要的资源移除。避免资源的浪费。 这里我选择自定义安装。 3.虚拟机兼容性选择 这里要注意兼容性，如果是VMware12创建的虚拟机复制到VM11、10或者更低的版本会出现一不兼容的现象。如果是用VMware10创建的虚拟机在VMware12中打开则不会出现兼容性问题。 4.选择稍后安装操作系统 5.操作系统的选择 这里选择之后安装的操作系统，正确的选择会让vm tools更好的兼容。这里选择linux下的CentOS 6.虚拟机位置与命名 虚拟机名称就是一个名字，在虚拟机多的时候方便自己找到。 VMware的默认位置是在C盘下，我这里改成D盘。 7.处理器与内存的分配 处理器分配要根据自己的实际需求来分配。在使用过程中CPU不够的话是可以再增加的。这次只做安装CentOS演示，所以处理器与核心都选1. 内存也是要根据实际的需求分配。我的宿主机内存是8G所以我给虚拟机分配2G内存。 8.网络连接类型的选择，网络连接类型一共有桥接、NAT、仅主机和不联网四种。 桥接：选择桥接模式的话虚拟机和宿主机在网络上就是平级的关系，相当于连接在同一交换机上。 NAT：NAT模式就是虚拟机要联网得先通过宿主机才能和外面进行通信。 仅主机：虚拟机与宿主机直接连起来 桥接与NAT模式访问互联网过程，如下图所示 桥接与NAT区别 9.其余两项按虚拟机默认选项即可 10.磁盘容量 磁盘容量暂时分配100G即可后期可以随时增加，不要勾选立即分配所有磁盘，否则虚拟机会将100G直接分配给CentOS，会导致宿主机所剩硬盘容量减少。 勾选将虚拟磁盘拆分成多个文件，这样可以使虚拟机方便用储存设备拷贝复制。 11.磁盘名称，默认即可 12.取消不需要的硬件 点击自定义硬件 选择声卡、打印机等不需要的硬件然后移除。 13.点击完成，已经创建好虚拟机。 3.安装CentOS 1.连接光盘 右击刚创建的虚拟机，选择设置 先选择CD/DVD，再选择使用ISO映像文件，最后选择浏览找到下载好的镜像文件。启动时连接一定要勾选上后确定。 2.开启虚拟机 3.安装操作系统 开启虚拟机后会出现以下界面: Install CentOS 7 安装CentOS 7 Test this media & install CentOS 7 测试安装文件并安装CentOS 7 Troubleshooting 修复故障 重点：选择第一项，安装直接CentOS 7，回车，进入下面的界面 选择安装过程中使用的语言，这里选择英文、键盘选择美式键盘。点击Continue 首先设置时间 时区选择上海，查看时间是否正确。然后点击Done 选择需要安装的软件 选择 Server with Gui，然后点击Done 选择安装位置，在这里可以进行磁盘划分。 选择i wil configure partitioning（我将会配置分区），然后点击done 如下图所示，点击加号，选择/boot，给boot分区分200M。最后点击Add 然后以同样的办法给其他三个区分配好空间后点击Done 然后会弹出摘要信息，点击AcceptChanges(接受更改) 设置主机名与网卡信息 首先要打开网卡，然后查看是否能获取到IP地址(我这里是桥接)，再更改主机名后点击Done。 最后选择Begin Installation(开始安装) 设置root密码 设置root密码后点击Done 点击USER CREATION 创建管理员用户 输入用户名密码后点击Done 等待系统安装完毕重启系统即可 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/centos/centos-an-zhuang-docker-dockercompose.html":{"url":"chapter1/centos/centos-an-zhuang-docker-dockercompose.html","title":"Centos安装docker & docker-compose","summary":"Centosdocker","keywords":"","body":"Centos安装docker & docker-compose安装docker1. 检查 Docker Compose 是否已安装2. 安装 Docker ComposeCentos安装docker & docker-compose 安装docker 1. 确保 Docker 仓库已正确添加 重新添加 Docker 官方源或国内镜像源。 使用 Docker 官方源： sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 使用阿里云镜像源（推荐国内）： sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 2. 清理 YUM 缓存并更新 执行以下命令清理缓存并重新更新包列表： sudo yum clean all sudo yum makecache fast 3. 列出可用的 Docker 版本 使用以下命令列出所有可用的 Docker 版本： yum list docker-ce --showduplicates | sort -r 输出示例： docker-ce.x86_64 24.0.7-3.el7 docker-ce-stable docker-ce.x86_64 23.0.6-1.el7 docker-ce-stable docker-ce.x86_64 20.10.24-3.el7 docker-ce-stable 4. 安装 Docker 安装最新的稳定版： sudo yum install -y docker-ce docker-ce-cli containerd.io 安装指定版本： 例如安装 20.10.24-3.el7 版本： sudo yum install -y docker-ce-20.10.24-3.el7 docker-ce-cli-20.10.24-3.el7 containerd.io 5. 启动并验证 Docker 启动 Docker 服务： sudo systemctl start docker sudo systemctl enable docker 验证 Docker 是否正常安装： docker --version docker-compose\\ 1. 检查 Docker Compose 是否已安装 执行以下命令检查 Docker Compose 是否已安装： docker-compose --version 如果输出版本号，说明已安装。 如果提示 command not found，说明未安装。 2. 安装 Docker Compose 对于 CentOS 7.9，安装 Docker Compose 的步骤如下： 安装 Docker Compose v2（推荐方式） Docker Compose v2 是一个插件形式集成到 docker 命令中。 安装步骤： sudo mkdir -p /usr/local/lib/docker/cli-plugins sudo curl -SL https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose 验证安装： docker compose version 注意： 如果你使用的是 docker compose 而非 docker-compose，请确保 run.sh 脚本里的命令从 docker-compose 改为 docker compose。 安装 Docker Compose v1（传统方式） 如果你的环境不支持插件形式，可以安装 docker-compose v1： sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose 验证安装： console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/centos/centos-an-zhuang-duo-yong-hu-gong-yong-python-huan-jing.html":{"url":"chapter1/centos/centos-an-zhuang-duo-yong-hu-gong-yong-python-huan-jing.html","title":"Centos安装多用户共用python环境","keywords":"","body":"Centos安装多用户共用python环境将虚拟环境添加到系统全局环境变量Centos安装多用户共用python环境 创建共享目录，并设置正确的权限： sudo mkdir -p /opt/pyenv sudo chmod -R 755 /opt/pyenv sudo chown -R root:root /opt/pyenv 为所有用户配置 PYENV_ROOT 和 PATH： 编辑 /etc/profile.d/pyenv.sh，配置 pyenv 的路径。 sudo tee /etc/profile.d/pyenv.sh 加载环境变量： source /etc/profile.d/pyenv.sh 使用 pyenv 重新安装 Python： pyenv install 3.8.10 pyenv global 3.8.10 验证 Python 和 pip： python --version pip --version 确认你要使用的 Python 3.8.10 路径： pyenv which python3.8 或手动查看路径： which python3.8 假设路径为 /opt/pyenv/versions/3.8.10/bin/python3.8。 使用该 Python 路径创建虚拟环境： /opt/pyenv/versions/3.8.10/bin/python3.8 -m venv /opt/common_python 验证虚拟环境 Python 版本： source /opt/common_python/bin/activate python --version 将虚拟环境添加到系统全局环境变量 可以通过将虚拟环境的 bin 目录添加到全局 PATH 环境变量中，让所有用户直接使用虚拟环境的 python 和 pip，无需手动激活。 步骤 编辑 /etc/profile.d 下的配置文件\\ 创建或编辑 /etc/profile.d/common_python.sh 文件： sudo tee /etc/profile.d/common_python.sh 修改文件权限： sudo chmod 644 /etc/profile.d/common_python.sh 让新配置立即生效： source /etc/profile.d/common_python.sh 验证： 打开新终端，运行： python --version pip --version 这样，python 和 pip 就会直接指向 /opt/common_python/bin 下的虚拟环境版本，无需每次执行 source。 放到 ~/.bash_profile，每次直接执行 common_python 就激活环境了 echo 'alias common_python=\"source /opt/common_python/bin/activate\"' >> ~/.bash_profile console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/centos/centos-shang-an-zhuang-python-pyenv.html":{"url":"chapter1/centos/centos-shang-an-zhuang-python-pyenv.html","title":"CentOS 上安装python pyenv","summary":"python多环境管理工具","keywords":"","body":"CentOS 上安装python pyenv前提条件步骤 1：安装 pyenv步骤 2：配置 Shell 环境步骤 3：安装 Python 版本步骤 4：设置默认 Python 版本步骤 5：使用 pyenv 管理虚拟环境完成CentOS 上安装python pyenv 本指南将帮助您在 CentOS 7.9 系统上安装并配置 pyenv，以便您能够轻松管理多个 Python 版本。 前提条件 在安装 pyenv 之前，您需要确保已安装一些必要的依赖项。运行以下命令来安装它们： sudo yum groupinstall \"Development Tools\" sudo yum install -y gcc libffi-devel zlib-devel bzip2-devel readline-devel sqlite-devel openssl-devel make wget curl git 步骤 1：安装 pyenv 您可以通过使用官方的自动安装脚本来安装 pyenv。在终端中运行以下命令： curl https://pyenv.run | bash 该脚本会自动完成以下内容： 安装 pyenv 安装 pyenv-doctor 安装 pyenv-virtualenv 安装 pyenv-update 步骤 2：配置 Shell 环境 安装完成后，您需要将 pyenv 添加到您的 shell 配置文件中，使其在终端启动时自动加载。具体操作如下： 对于 Bash 用户： 将以下内容添加到您的 ~/.bash_profile 文件中： echo 'export PATH=\"$HOME/.pyenv/bin:$PATH\"' >> ~/.bash_profile echo 'eval \"$(pyenv init --path)\"' >> ~/.bash_profile echo 'eval \"$(pyenv init -)\"' >> ~/.bash_profile echo 'eval \"$(pyenv virtualenv-init -)\"' >> ~/.bash_profile source ~/.bash_profile 对于 Zsh 用户： 如果您使用的是 zsh，则将 ~/.bash_profile 替换为 ~/.zshrc，然后运行以下命令： echo 'export PATH=\"$HOME/.pyenv/bin:$PATH\"' >> ~/.zshrc echo 'eval \"$(pyenv init --path)\"' >> ~/.zshrc echo 'eval \"$(pyenv init -)\"' >> ~/.zshrc echo 'eval \"$(pyenv virtualenv-init -)\"' >> ~/.zshrc source ~/.zshrc 步骤 3：安装 Python 版本 一旦 pyenv 安装完成，您可以使用它来安装不同版本的 Python。例如，安装 Python 3.8.10 版本： pyenv install 3.8.10 您可以使用以下命令列出所有可用的 Python 版本： pyenv install --list 步骤 4：设置默认 Python 版本 安装完成后，您可以设置一个默认的 Python 版本。例如，设置 Python 3.8.10 为全局默认版本： pyenv global 3.8.10 您可以通过以下命令检查当前使用的 Python 版本： pyenv version 步骤 5：使用 pyenv 管理虚拟环境 pyenv 还支持管理 Python 的虚拟环境。您可以通过以下命令创建和激活虚拟环境： pyenv virtualenv 3.8.10 myenv pyenv activate myenv 退出虚拟环境，使用以下命令： pyenv deactivate 完成 至此，您已经成功在 CentOS 7.9 上安装并配置了 pyenv，并可以开始使用它来管理多个 Python 版本和虚拟环境。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/centos/mysql.html":{"url":"chapter1/centos/mysql.html","title":"centos安装mysql","keywords":"","body":"centos安装mysqlcentos安装mysql 1.查看mysql是否存在，存在先卸载 rpm -qa | grep mysql 2.下载MySQL仓库并安装 wget https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm yum -y install mysql80-community-release-el7-3.noarch.rpm 3.默认安装MySQL8.0，如果需要使用MySQL5.7的话需要修改/etc/yum.repos.d/mysql-community.repo配置文件 将mysql80中enabled属性改为0，并添加图中红框内代码(安装MySQL8.0跳过该步骤) 4.安装MySQL数据库 yum -y install mysql-community-server 5.开启mysql服务 systemctl start mysqld.service 6.查看mysql默认密码并登陆 cat /var/log/mysqld.log | grep password mysql -uroot -p 7.修改初始密码（若想改为弱密码） SHOW variables LIKE 'validate_password%'; 注：有可能遇到情况，此时先修改密码为强密码，便可以继续进行修改密码验证策略操作 将密码验证策略改为LOW，密码长度4位以上 1 set global validate_password.policy=0; 2 set global validate_password.length=4; #重启MySQL后失效 此时再进行修改密码操作，可以修改为弱密码了 ALTER USER 'root'@'localhost' IDENTIFIED BY 'your password'; set password = 'your password'; #两种命令二选一进行修改密码 以后便可以使用你自己设置的密码登陆 8.设置远程连接(前提：关闭防火墙或开放3306端口) 在实际工作中，经常会用到诸如DBeaver等的数据库管理工具进行远程连接mysql数据库，需要设置允许远程连接。 在mysql数据库的user表中查看host，默认只允许localhost访问 只需将localhost改为%允许任意地址访问即可 update user set host = '%' where user = 'root'; flush privileges; # 刷新权限 权限更新后刷新才会起作用 注：如果使用客户端连接提示了plugin caching_sha2_password错误，这是因为MySQL8.0的密码策略默认为caching_sha2_password(MySQL5.7无此问题) update user set plugin = 'mysql_native_password' where user = 'root'; flush privileges; # 刷新权限 权限更新后刷新才会起作用 如果使用DBeaver建立MySQL 8+连接，无需修改默认密码策略，但可能会提示Public Key Retrieval is not allowed错误 这是因为MySQL8.0的密码策略默认为caching_sha2_password认证，密码在传输过程中必须使用 SSL 协议保护，但是如果 RSA 公钥不可用，可以使用服务器提供的公钥；需要修改AllowPublicKeyRetrieval=True参数以允许客户端从服务器获取公钥，在Dbeaver的修改如下： 修改完成后可以正确建立远程连接 9.my.cnf配置文件 前言：若rpm安装无/etc/my.cnf文件，需将/usr/share/mysql目录下配置文件复制至/etc目录下 cp /usr/share/mysql/my-large.cnf /etc/my.cnf [client] port = 3306 socket = /var/run/mysql/mysql.sock [mysqldump] quick max_allowed_packet = 16M 以上参数会被 MySQL 客户端应用读取，参数说明如下： port：MySQL 客户端连接服务器端时使用的端口号，默认为 3306 socket：套接字文件所在目录 quick：支持较大的数据库转储，导出非常巨大的表时需要此项。 max_allowed_packet：服务所能处理的请求包的最大大小以及服务所能处理的最大的请求大小（当与大的BLOB字段一起工作时相当必要），每个连接独立的大小，大小动态增加。 [mysqld] user = mysql basedir = /usr/local/mysql datadir = /mydata/mysql/data port = 3306 server-id = 1 socket = /var/run/mysql/mysql.sock 上述参数说明如下： user：mysqld 程序在启动后将在给定 UNIX/Linux 账户下执行。mysqld 必须从 root 账户启动才能在启动后切换到另一个账户下执行。mysqld_safe 脚本将默认使用 user=mysql 选项来启动 mysqld 程序。 basedir：指定 MySQL 安装的绝对路径； datadir：指定 MySQL 数据存放的绝对路径； port：服务端口号，默认为 3306 server-id：MySQL 服务的唯一编号，每个 MySQL 服务的 id 需唯一。 socket：socket 文件所在目录 character-set-server = utf8mb4 collation-server = utf8mb4_general_ci init_connect = 'SET NAMES utf8mb4' lower_case_table_names = 1 key_buffer_size = 16M max_allowed_packet = 8M no-auto-rehash sql_mode=TRADITIONAL skip-grant-tables character-set-server：数据库默认字符集 collation-server：数据库字符集对应一些排序等规则，注意要和character-set-server对应 init_connect：设置client连接mysql时的字符集，防止乱码 lower_case_table_names：是否对sql语句大小写敏感，1表示不敏感(MySQL8.0+需要初始化之前设置) key_buffer_size：用于指定索引缓冲区的大小 max_allowed_packet：设置一次消息传输的最大值 no-auto-rehash：仅仅允许使用键值的UPDATES和DELETES sql_mode：表示 SQL 模式的参数，通过这个参数可以设置检验 SQL 语句的严格程度 skip-grant-tables：跳过密码验证 (平时不要开启，忘记root密码时再使用) 忘记root密码时： 重置root密码为空(开启skip-grant-tables) UPDATE mysql.user SET authentication_string = '' WHERE user = 'root'; console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/centos/fang-huo-qiang-she-zhi.html":{"url":"chapter1/centos/fang-huo-qiang-she-zhi.html","title":"centos防火墙设置","keywords":"","body":"linux-centos7-防火墙linux-centos7-防火墙 1、开放端口 firewall-cmd --zone=public --add-port=5672/tcp --permanent # 开放5672端口 firewall-cmd --zone=public --remove-port=5672/tcp --permanent #关闭5672端口 firewall-cmd --reload # 配置立即生效 2、查看防火墙所有开放的端口 firewall-cmd --zone=public --list-ports 3.、关闭防火墙 如果要开放的端口太多，嫌麻烦，可以关闭防火墙，安全性自行评估 systemctl stop firewalld.service 4、查看防火墙状态 firewall-cmd --state 5、查看监听的端口 netstat -lnpt PS:centos7默认没有 netstat 命令，需要安装 net-tools 工具，yum install -y net-tools 6、检查端口被哪个进程占用 netstat -lnpt |grep 5672 7、查看进程的详细信息 ps 6832 8、中止进程 kill -9 6832 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/centos/xie-zai-mysql.html":{"url":"chapter1/centos/xie-zai-mysql.html","title":"centos卸载mysql","keywords":"","body":"卸载mysql卸载mysql 方法一、 1.查看mysql安装 rpm -qa|grep -i mysql 2.卸载前关闭mysql服务 rpm -ev --nodeps 上面的 执行完命令之后再次执行 rpm-qa|grep -i mysql 会发现已经卸载完成。 执行完命令之后再次执行 rpm-qa|grep -i mysql 会发现已经卸载完成。 方法二、 执行命令 find / -name mysql 把查找出的目录删除 rm -rf 上面查出的文件夹 etc/my.cnf 如果存在的话手动删除，这样mysql就卸载完成了。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/centos/centosan-zhuang-python3-10.html":{"url":"chapter1/centos/centosan-zhuang-python3-10.html","title":"centos安装python3.10","keywords":"","body":"centos7 安装python3.10.1下载安装编译相关工具编译安装创建软连接验证修改下载源centos7 安装python3.10.1 Python官网版本https://www.python.org/downloads/source/ 下载.tar.xz包就可以了。其实下面的2个包其一都可以使用 Python-3.10.0.tgz （这个不是编译过的东西，不能解压之后直接使用） Python-3.10.0.tar.xz (这个是pthon的源码) 下载 下载安装包 wget https://www.python.org/ftp/python/3.10.1/Python-3.10.1.tar.xz 执行解压命令 tar -xvJf [文件名] 安装编译相关工具 在解压后目录中执行 yum -y groupinstall \"Development tools\" yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel yum install libffi-devel -y 编译安装 ​ 创建编译安装目录 mkdir /usr/local/python3 ./configure --prefix=/usr/local/python3 make && make install 创建软连接 ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3 ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3 验证 python3 -V pip3 -V 修改下载源 cd ~ mkdir .pip cd .pip vim pip.conf [global] index-url=http://mirrors.aliyun.com/pypi/simple/ [install] trusted-host=mirrors.aliyun.com console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/ubuntu.html":{"url":"chapter1/ubuntu.html","title":"Ubuntu","keywords":"","body":" 下载vm 下载ubuntu镜像 升级电脑到专业版 开启 Hyper-v 功能 重启电脑 打开 vm 开始安装 创建新的虚拟机 配置信息 不修改 下一步 选择镜像 设置名称以及账户密码 然后下一步 设置处理器 根据自己的电脑配置设置(并不是越高越好) 设置 内存 网络模式 NAT I/O 推荐即可 磁盘 推荐即可 内存 用不了多少东西 这样会更快（除非拿虚拟机当主力机器） 无需更改 无需自定义(以后也可以修改) 点击完成 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"chapter1/ubuntu/ubuntuan-zhuang-docker.html":{"url":"chapter1/ubuntu/ubuntuan-zhuang-docker.html","title":"ubuntu安装docker","keywords":"","body":"1.docker基本原理2.ubuntu安装docker2.1 安装docker2.2 docker默认是国外源可以设置成国内镜像源2.3 docker启动设置2.4 docker简单使用（创建一个ngixn容器）1.docker基本原理 https://www.cnblogs.com/xiaonq/p/10241045.html 2.ubuntu安装docker 2.1 安装docker # 1.卸载旧版本 sudo apt-get remove docker docker-engine docker.io containerd runc # 2.更新ubuntu的apt源索引 # 修改apt国内源为中科大源 sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak sudo sed -i 's/archive.ubuntu.com/mirrors.ustc.edu.cn/' /etc/apt/sources.list sudo apt update #3.安装包允许apt通过HTTPS使用仓库 sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common #4.添加Docker官方GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - #5.设置Docker稳定版仓库 #5.1 设置使用官方，很慢 sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" #5.2 设置使用阿里云 add-apt-repository \"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\" #6.添加仓库后，更新apt源索引 sudo apt-get update #7.安装最新版Docker CE（社区版） sudo apt-get install docker-ce #8.检查Docker CE是否安装正确 sudo docker run hello-world 2.2 docker默认是国外源可以设置成国内镜像源 root@linux-node1 django-docker]# vim /etc/docker/daemon.json # 设置docker镜像源 { \"registry-mirrors\": [\"http://hub-mirror.c.163.com\"] } [root@linux-node2 ~]# systemctl daemon-reload # 重载文件 [root@linux-node2 ~]# systemctl restart docker # 重启docker生效 2.3 docker启动设置 # 启动Docker服务并设置开机启动 systemctl start docker systemctl enable docker 2.4 docker简单使用（创建一个ngixn容器） # 1、创建一个nginx容器 docker run -it nginx # 2、查看docker运行的容器(可以获取到这个容器的id) docker ps # 3、访问这个容器 # 进入这个nginx容器（进入的文件系统和宿主机是完全隔离的，有自己独立的文件系统） docker exec -it 73877e65c07d bash # 4、查看当前容器的 IP docker inspect 73877e65c07d # 73877e65c07d是通过docekr ps查看到的容器ID curl 172.17.0.2 # 测试这个nginx容器是否可以访问 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"windos.html":{"url":"windos.html","title":"windos","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"an-zhuang-nav-15.html":{"url":"an-zhuang-nav-15.html","title":"windows安装 nav 15","keywords":"","body":" 下载 nav 15 自定义安装即可，一直下一步 下载破解工具 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"windowsan-zhuang-go-huan-jing.html":{"url":"windowsan-zhuang-go-huan-jing.html","title":"windows安装go环境","keywords":"","body":"安装go语言安装go语言 1.0 官网下载安装包 2.0下载完成后 一直下一步 安装完成 3.0 配置环境变量 此电脑-右击-属性-高级系统设置-环境变量 4.0 打开cmd 测试 输入go env 出现相似则为成功 出现相似则为成功 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"goxiang-mu-huan-jing-pei-zhi.html":{"url":"goxiang-mu-huan-jing-pei-zhi.html","title":"windows go项目环境配置","keywords":"","body":"GOROOT （go环境地址）GOPATH （GO项目地址）GOROOT （go环境地址） GOPATH （GO项目地址） 需要创建三个目录 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"windows-an-zhuang-pycharm-gong-ju.html":{"url":"windows-an-zhuang-pycharm-gong-ju.html","title":"windows 安装pycharm工具","keywords":"","body":"官网下载安装pycharm选择安装路径安装下载所需包配置Django环境配置python环境配置Django设置配置启动服务官网下载 https://www.jetbrains.com/pycharm/download/#section=windows 安装pycharm 选择安装路径 安装 下载所需包 配置Django环境 配置python环境配置Django设置配置启动服务 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac.html":{"url":"mac.html","title":"mac","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/mac-pei-zhi-kai-ji-qi-dong-zhi-hang-wen-jian.html":{"url":"mac/mac-pei-zhi-kai-ji-qi-dong-zhi-hang-wen-jian.html","title":"mac 配置开机启动执行文件","keywords":"","body":"mac 配置开机启动执行文件mac 配置开机启动执行文件 在登录项配置即可 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/mac-shan-chu-ben-di-shu-ru-fa.html":{"url":"mac/mac-shan-chu-ben-di-shu-ru-fa.html","title":"mac 删除本地输入法","keywords":"","body":"mac 删除本地输入法mac 删除本地输入法 plist edit安装文件地址：链接: https://pan.baidu.com/s/1DMPXh7Oed6lftooz54BgTQ 密码: nj06 或者https://github.com/x515250339/PackageDownload/blob/main/PlistEdit_Pro_v1.9.1_cn/PlistEdit_Pro_v1.9.1_cn.dmg 下载之后进行安装 然后执行 sudo open ~/Library/Preferences/com.apple.HIToolbox.plist 打开选中，然后删除 重启电脑就可以了 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/mac-crontab.html":{"url":"mac/mac-crontab.html","title":"mac crontab","keywords":"","body":"mac crontab什么是 crontab如何管理 crontabcron 表达式（具体命令）crontab 执行记录mac crontab 什么是 crontab crontab 是一个专门用于管理 cron 表达式的工具，它可以实现定时执行任务，而不需要人的参与。它可以根据用户输入的 cron 表达式，自动按照指定的频率执行指定的任务。它简化了定时任务的管理，提高了工作效率。crontab 充当了管理员的角色，它来“发号施令”，Mac 乖乖干活。 crontab 在 Mac 中已经自带，不需要额外安装。 如何管理 crontab 查看当前正在运行的 cron 任务 bash复制代码# 显示与 cron 相关的进程和命令，以及它们的 PID（进程 ID） ps -ef | grep cron 停止 cron 服务 bash复制代码# 暂停所有任务的执行 sudo launchctl unload /System/Library/LaunchDaemons/com.vix.cron.plist 启用 cron 服务 bash复制代码# 恢复所有任务的执行 sudo launchctl load /System/Library/LaunchDaemons/com.vix.cron.plist 注意：添加定时任务后，不需要先停用后启用 cron 来重新加载它。 编辑任务 bash复制代码# 完成编辑后，保存并关闭文本编辑器即可 crontab -e 删除任务（慎用） bash复制代码# 注意！！！这将删除所有 cron 任务，包括重要的系统任务！！！ crontab -r 列出任务 bash复制代码# 列出当前用户的所有 cron 表达式 crontab -l cron 表达式（具体命令） 既然 crontab 是管理 cron 表达式 的，那就必须要了解了解 cron 表达式了。 cron 表达式是一个时间计划的字符串，用于指定何时运行命令或脚本。每个字段代表一个时间节点，它们分别是分钟（0-59）、小时（0-23）、日（1-31）、月（1-12）、星期（0-6)，它们之间用一个空格分隔。 scss复制代码* * * * * - - - - - | | | | | | | | | +----- day of the week (0 - 6) (Sunday=0) | | | +---------- month (1 - 12) | | +--------------- day of the month (1 - 31) | +-------------------- hour (0 - 23) +------------------------- minute (0 - 59) 每个字段都代表时间的不同部分，例如，第一个字段代表分钟，第二个字段代表小时，以此类推。 字段可以使用以下符号和值： 星号（*）：匹配任何可能的值。 逗号（,）：用于分隔多个可能的值。 连接号（-）：用于指定一系列连续的值。 正斜杠（/）：用于指定间隔时间。例如，*/5 表示每隔 5 个时间单位（分钟、小时等）执行一次命令。 数字：表示具体的时间值。 以下是一些例子： 0 0 * * *：每天午夜执行一次。 0 0 * * 1：每周一午夜执行一次。 0 9-17 * * 1-5：工作日的 9 点到 17 点每隔一小时执行一次。 0 */3 * * *：每隔 3 小时执行一次。 */5 * * * *：每隔 5 分钟执行一次。 需要注意的是，cron 表达式的时间是基于系统时区设置的，因此请确保在编写 cron 表达式时考虑正确的时区。 如果你看了上面的例子还是不会写，请不要怀疑&#x1F928;，这是我的问题。但是希望下面的这个小工具可以帮到你，网站地址请点击这里。 crontab 执行记录 在 Mac 系统中可以使用命令行工具 \"cron\" 来查看 crontab 执行记录。 打开终端。 输入以下命令，查看 crontab 中设置的任务： crontab -l 若想查看 cron 中所有用户的任务记录，可以使用： cat /var/log/cron.log 另外，还可以使用 syslog 查看 cron 日志。 tail -f /var/log/system.log console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/.bashrc-.zshrc-.profile-.bashprofile-de-qu-bie.html":{"url":"mac/.bashrc-.zshrc-.profile-.bashprofile-de-qu-bie.html","title":".bashrc .zshrc .profile .bash_profile 的区别","keywords":"","body":".bashrc .zshrc .profile .bash_profile 的区别一、bashrc和profile的差异 二、.bash_profile 三、.zshrc .bashrc .zshrc .profile .bash_profile 的区别 一、bashrc和profile的差异 bashrc是在系统启动后就会自动运行。 进行设置后，可运终端命令用source bashrc命令更新bashrc profile是在用户登录后才会运行。 进行设置后，可运终端命令用source profile命令更新profile\\ PS：通常我们修改bashrc,有些linux的发行版本不一定有profile这个文件 /etc/profile中设定的变量(全局)的可以作用于任何用户，而~/.bashrc等中设定的变量(局部)只能继承/etc/profile中的变量，他们是\"父子\"关系。 二、.bash_profile ~/.bash_profile: 每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。 ~/.bash_logout: 当每次退出系统(退出bash shell)时，执行该文件。 ~/.bash_profile: 是交互式、login方式进入bash运行的。 ~/.bashrc:是交互式non-login方式进入bash运行的，通常二者设置大致相同，所以通常前者会调用后者。 三、.zshrc zsh终端命令工具的全局变量设置，和bashrc区别是 默认很多linux系统是base，就配置在bashrc里 如里是使用zsh 就配置在 zshrc里 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/mac-pei-zhi-duo-ge-git-zhang-hao.html":{"url":"mac/mac-pei-zhi-duo-ge-git-zhang-hao.html","title":"mac 配置多个git账号","keywords":"","body":"mac 配置多个git账号2. 定义两个标识符，这两个标识符以后会被用来代替“github.com”来使用。3. 为两个账户生成公钥和私钥4. 将生成的密钥添加到ssh-agent信任列表5. 将公钥添加到 github 网站上6. 配置 config 文件7. 测试连接8. 开心的使用吧9. 配置多账号之前已有项目的配置mac 配置多个git账号 1. 清空git全局配置的username和email git config --global --unset user.name git config --global --unset user.email git config --list 可以查看是否清空了 2. 定义两个标识符，这两个标识符以后会被用来代替“github.com”来使用。 假设两个账号的邮箱地址分别是 @qq.com 和@gmail.com， 3. 为两个账户生成公钥和私钥 两个生成中只是邮箱和文件名不同，以第一个为例。\\ 生成第一个： ssh-keygen -t rsa -C \"qq.com\" -f ~/.ssh/id_rsa_qq ssh-keygen -t rsa -C \"gmail.com\" -f ~/.ssh/id_rsa_gmail 会有如图输出，这里是需要指定秘钥的存储路径 \\ rsa是私钥，rsa.pub 是公钥。\\ 这便完成了账号的生成 4. 将生成的密钥添加到ssh-agent信任列表 以第一个账号为例 ssh-add -K ~/.ssh/id_rsa_qq // 这里指定自己的路径 ssh-add -K ~/.ssh/id_rsa_gmail // 返回这个就表示添加成功了 Identitiy added: ~/.ssh/id_rsa_{email} 进行查看验证 ssh-add -l 5. 将公钥添加到 github 网站上 先复制 .pub 文件中的内容，可以文本打开复制，也可以用命令，如下 pbcopy title 随便写，key type默认如图不用修改，Key 中粘贴复制的公钥，Save。 6. 配置 config 文件 编辑 ~/.ssh/config 文件，如果没有就新建一个。内容如下：\\ 这里就用到了前面定义的标识符。 Host {gmail.com} UseKeychain yes Hostname github.com IdentityFile ~/.ssh/id_rsa_gmail User git Host {qq.com} UseKeychain yes Hostname github.com IdentityFile ~/.ssh/id_rsa_qq User git 7. 测试连接 // 测试第一个账号 ssh -T git@{gmail.com} // 测试第二个账号 ssh -T git@{qq.com} 如果连接成功能看到以下输出： Hi xxx！ You've successfully authenticated.but GitHub does not provide shell acess 即使ssh config中的文件路径配置错误，ssh -T也会通过，所以路径一定要自己检查清楚。 8. 开心的使用吧 注意地址的变化，之前是 git clone git@github.com:xxx/yyyy.git 地址的 github.com需要被自定义的标识符替换掉，比如第一个账户是 aaccount，那么命令就是 git clone git@aaccount:xxx/yyyy.git clone到本地后，可以使用 git remote -v 查看远程地址，就是“git@aaccount:xxx/yyyy.git” 9. 配置多账号之前已有项目的配置 如果是之前已经 clone 的项目需要重新指定 remote 地址以及需要配置项目的 email 和username。可以先试一下，如果不能使用再来改配置。 修改项目remote地址 git remote -v // 查看 remote 地址 git remote rm origin git remote add origin git@aaccount:xxx/yyy.git // 这里是第一个账号为例 然后在每个项目中，执行： git config user.email \"{qq.com}\" git config user.name \"{gmail.com}\" 为项目单独设置用户名和邮箱。\\ 可以查看一下： git config user.name git config user.email push 的话还是照常使用：git push origin master 失败可以直接使用。变量为项目地址。 git push {ssh} {branch} git push {https} {branch} console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/mac-server.html":{"url":"mac/mac-server.html","title":"mac server","keywords":"","body":"mac server基础设置1.1 将睡眠关闭1.2 断电重启1.3 关闭文件保险箱服务设置2.1 找到 通用 -》 共享2.2 打开以下设置2.3 文件共享配置2.4 远程登录2.5 远程管理2.6 内容缓存mac server 基础设置 1.1 将睡眠关闭 1.2 断电重启 1.3 关闭文件保险箱 服务设置 2.1 找到 通用 -》 共享 2.2 打开以下设置 2.3 文件共享配置 配置需要共享的文件 选项 配置允许访问的用户 2.4 远程登录 配置允许访问的用户 2.5 远程管理 配置可以访问的用户 选项 .png>) 电脑设置 开启状态方便观察 开启密码提高安全性 2.6 内容缓存 选择位置以及大小 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/mac-you-hua-zsh.html":{"url":"mac/mac-you-hua-zsh.html","title":"mac优化zsh","keywords":"","body":"mac优化zshmac优化zsh sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" 国内 git clone https://gitee.com/mirrors/oh-my-zsh.git bash .oh-my-zsh/tools/install.sh 将环境变量配置到 ~/.bash_profile 在zshrc尾部追加，启动环境变量 echo `source ~/.bash_profile` >> ~/.zshrc console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/mac-an-zhuang-supervisor.html":{"url":"mac/mac-an-zhuang-supervisor.html","title":"mac安装supervisor","keywords":"","body":"mac安装supervisorMac环境安装和使用 supervisor 安装 配置 开始运行 命令行管理 mac安装supervisor Mac环境安装和使用 supervisor supervisor 用于管理自定义任务进程，可配置服务自动重启等多种功能，方便用户的计划任务管理。 安装 推荐采用 brew 包管理工具进行安装： brew install supervisor 如果通过pip进行安装，需要重点关注pip所在的python环境，是处于本机系统下还是在conda env中。\\ 不同环境下，supervisor的配置文件位置和参数有差异，容易导致问题。 检查是否安装成功： % brew info supervisor Last login: Thu Aug 24 22:18:25 on ttys002 ➜ ~ brew info supervisor ==> supervisor: stable 4.2.5 (bottled), HEAD Process Control System http://supervisord.org/ /opt/homebrew/Cellar/supervisor/4.2.5 (951 files, 13.7MB) * Poured from bottle using the formulae.brew.sh API on 2023-08-24 at 21:40:27 From: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/s/supervisor.rb License: BSD-3-Clause-Modification ==> Dependencies Required: python@3.11 ✔ ==> Options --HEAD Install HEAD version ==> Caveats To start supervisor now and restart at login: brew services start supervisor Or, if you don't want/need a background service you can just run: /opt/homebrew/opt/supervisor/bin/supervisord -c /opt/homebrew/etc/supervisord.conf --nodaemon ==> Analytics install: 371 (30 days), 1,001 (90 days), 1,962 (365 days) install-on-request: 367 (30 days), 997 (90 days), 1,958 (365 days) build-error: 0 (30 days) 其默认配置文件位置：/opt/homebrew/etc/supervisord.conf 配置 这里首先说明一下，有不少文章说明是按照如下方式生成supervisord配置文件： echo_supervisord_conf > /usr/local/etc/supervisord.ini 但是本文实践过程中，不需要这一步骤，安装完成后即自动存在supervisord.conf配置文件。\\ 接下来，我们直接打开并修改配置文件。 启用http服务 打开监听TCP socket，启动inet的http服务。这个模块默认是未开启状态，打开后可通过web界面的方式管理子进程。只要将每行首位的分号；字符去掉即可。 [inet_http_server] ; inet (TCP) server disabled by default port=127.0.0.1:9001 ; ip_address:port specifier, *:port for all iface username=user ; default is no username (open server) password=123 ; default is no password (open server) 查看 supervisord全局配置 在[supervisord]部分，可看到logfile等各类配置参数，一般情况下保持默认即可。 修改 supervisorctl配置 supervisord 与 supervisorctl 之间是服务端与客户端的关系，因此，需要配置如下： [supervisorctl] ;serverurl=unix:///opt/homebrew/var/run/supervisor.sock ; use a unix:// URL for a unix socket serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket username=user ; should be same as in [*_http_server] if set password=123 ; should be same as in [*_http_server] if set ;prompt=mysupervisor ; cmd line prompt (default \"supervisor\") ;history_file=~/.sc_history ; use readline history if available 这里服务端url和账户信息，要与前面 [inet_http_server]的配置保持一致。 编写 program任务配置 supervisord.conf的结尾处，定义了如何管理自定义配置文件： ; The [include] section can just contain the \"files\" setting. This ; setting can list multiple files (separated by whitespace or ; newlines). It can also contain wildcards. The filenames are ; interpreted as relative to this file. Included files *cannot* ; include files themselves. [include] files = /opt/homebrew/etc/supervisor.d/*.ini 因此，不推荐直接在 supervisord.conf中编写 program，而应该按照如上include说明，在同级目录下创建一个文件夹 supervisor.d，然后将自己的任务配置文件放在该文件夹下。 mkdir /opt/homebrew/etc/supervisor.d touch github_webhook.ini 子进程配置项主要包括： program: 设置子进程的名称，也即web界面中展示的进程名称，不允许重复。 command: 启动子进程的命令行 directory: 执行的项目目录 stdout_logfile: log日志输出文件路径，必须事先创建好 配置示例： [program:github_webhook] command=sh /Volumes/SDD/MyFile/Projects/github_webhook/run.sh directory=/Volumes/SDD/MyFile/Projects/github_webhook autostart=false startsecs=5 stdout_logfile=/Volumes/SDD/MyFile/Projects/logs/github_webhook/supervisor.log 开始运行 启动 supervisor supervisord -c /opt/homebrew/etc/supervisord.conf 进入 web后台管理页面，浏览器输入：http://127.0.0.1:9001，按照提示输入前面配置的用户名密码。\\ 登录成功后，即可通过web界面来操作已经配置的子进程。\\ 命令行管理 除了通过web页面进行任务进程的管理，也可使用 supervisorctl 命令进行管理。\\ 常用命令如下： supervisorctl #关闭所有任务 supervisorctl shutdown # 启动某个进程 supervisorctl start programxxx # 重启某个进程 supervisorctl restart programxxx # 停止全部进程 注：start、restart、stop都不会载入最新的配置文件 supervisorctl stop all # 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。 supervisorctl reload # 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。 supervisorctl update 查看执行的日志 supervisorctl tail 「name」 stderr brew安装的重启命令 brew services start supervisor 关闭supervisorctl密码，把图中的注释即可 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/mac-an-zhuang-gitbook.html":{"url":"mac/mac-an-zhuang-gitbook.html","title":"mac安装gitbook","keywords":"","body":"mac安装gitbook1.node 版本 v10.23.02.修改node镜像源为淘宝3.安装gitbook4.安装calibre-ebook5.导出pdfmac安装gitbook 1.node 版本 v10.23.0 2.修改node镜像源为淘宝 npm config set registry https://registry.npm.taobao.org 校验 npm config get registry 3.安装gitbook sudo npm install -g gitbook sudo npm install -g gitbook-cli 执行gitbook -V查看版本 4.安装calibre-ebook https://calibre-ebook.com/download_osx 配置 ~./bash_profile # gitbook export pdf app export EBOOK_PATH=/Applications/calibre.app/Contents/MacOS export PATH=$PATH:$EBOOK_PATH 执行 source ~./bash_profile 校验版本 ebook-convert --version 5.导出pdf # 生成 `pdf` 文件并输出 `debug` 级别日志 $ gitbook pdf ./ ./myBook.pdf --log=debug # 生成 `epub` 文件并输出 `debug` 级别日志 $ gitbook epub ./ ./myBook.epub --log=debug # 生成 `mobi` 文件并输出 `debug` 级别日志 $ gitbook mobi ./ ./myBook.mobi --log=debug console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/mac-an-zhuang-brew.html":{"url":"mac/mac-an-zhuang-brew.html","title":"mac安装brew","keywords":"","body":"mac安装brew包管理工具mac安装brew 包管理工具 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" 下载完根据提示执行 (echo; echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"') >> /Users/wyx/.zprofile eval \"$(/opt/homebrew/bin/brew shellenv)\" ``` (echo; echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"') >> /Users/wyx/.bash_profile   eval \"$(/opt/homebrew/bin/brew shellenv)\" ``` console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/macan-zhuang-mysql.html":{"url":"mac/macan-zhuang-mysql.html","title":"mac安装mysql","keywords":"","body":"Mac上如何安装Mysql以及可视化工具navicat 安装Mysql 去官网下载https://www.mysql.com 到达官网划到页面最低端，进入社区 建议选择5.5、5.7的稳定版本 ​ ​ 下载好后 双击 如果出现了下面的情况无法打开，就打开电脑的系统偏好设置>安全与隐私>通用>点击仍要打开 打开后 一路按继续就行 ⚠️注意安装好后会自动生成一个密码，要记住这个，可以保存到备忘录里 启动Mysql 进入系统偏好设置>MySQL 然后点击启动 Start MySQL Server 变成这个状态 打开终端配置环境变量 输入 cd /usr/local/mysql/bin 进入mysql文件下的bin目录 bash终端输入 open ~/.bash_profile zsh终端输入 open ~/.zshrc 以此打开.zshrc文件 往.zshrc文件文件中添加以下代码，以此来配置环境变量 export PATH=$PATH:/usr/local/mysql/bin alias mysql=/usr/local/mysql/bin/mysql alias mysqladmin=/usr/local/mysql/bin/mysqladmin 添加好后，按command+S快捷键保存文件 添加好后，按command+S快捷键保存文件 终端继续输入 source ~/.bash_profile 或 source ~/.zshrc 然后登录mysql mysql -uroot -p 输入之前保存的密码 给mysql设置新密码,一般改成123456 SET PASSWORD FOR 'root'@'localhost' = PASSWORD('你的新密码'); 设置好后，输入quit退出 安装可视化工具 百度网盘链接: 链接: https://pan.baidu.com/s/17XAT95XL1MWuaTRcnlMmgw 提取码: aw74 里面的dmg、zip文件打开密码均是xclient.info 下载好后安装 点击Connection,选择MySQL 下面的Password就是上面设置的123456 汉化 在上面的网址中下载好对应的汉化包，或用网盘中下载好的汉化包 解压得到一个文件夹 command+C复制这个文件夹，到应用程序找到安装好的navicat，打开其包目录 进入Contents>Resources,cmmand+V粘贴到Resources目录下 重启navicat，汉化完成 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/macxia-an-zhuang-python-yi-ji-xu-ni-huan-jing.html":{"url":"mac/macxia-an-zhuang-python-yi-ji-xu-ni-huan-jing.html","title":"mac搭建python多环境以及虚拟环境","keywords":"","body":"mac搭建python多环境以及虚拟环境普通安装单版本多环境虚拟环境更换源mac搭建python多环境以及虚拟环境 普通安装单版本 首先我们进入官网下载 对应的版本的 python包 https://www.python.org/downloads/mac-osx/ 之后进行安装一直下一步傻瓜式安装即可 安装完成之后输入python3 显示对应的版本号则安装成功 之后测试 pip3 输出一堆命令及正确 多环境 一、安装pyenv brew install pyenv 二、查看当前安装的pyenv的版本 pyenv -v 三、将pyenv配置到全局环境变量中 1.打开全局的环境变量配置文件 vim /etc/profile 2.在最下边加上这两行配置 export PYENV_ROOT=~/.pyenv export PATH=$PYENV_ROOT/shims:$PATH 3.使环境变量配置文件立即生效 source /etc/profile 四、查看所有的python版本 pyenv versions *指向的是当前所使用的版本，system是系统安装的python 五、查看所有可以安装的python版本 pyenv install --list 列表很长，这里截图只是一部分。 六、安装指定版本的python 命令格式：pyenv install 版本号 ，eg： pyenv install 3.11.4 pyenv rehash # 在进行安装、删除指定python版本后使用，更新版本管理数据库 七、查看当前安装的所有版本 pyenv versions 八、切换python版本 1. 全局切换 命令格式：pyenv global 版本号，eg： pyenv global 3.11.4 2.当前目录及其子目录生效（激活） 命令格式： pyenv local 版本号， eg： pyenv local 3.11.4 激活后，在每次进入该目录时会自动切换到指定的版本。如果取消激活则使用--unset参数： pyenv local --unset 验证是否切换成功 python -V 九、卸载指定的Python版本 pyenv uninstall 3.8.9 pyenv rehash # 在进行安装、删除指定python版本后使用，更新版本管理数据库 十、更新版本管理数据库 在进行安装、删除指定python版本后使用，更新版本管理数据库 pyenv rehash 虚拟环境 安装python虚拟环境核心目的就是为了复制一个python环境,这样新项目下载的所有包,都会存放在虚拟环境下的python site-package 中 首先安装 sudo pip install virtualenv # 安装虚拟环境 sudo pip install virtualenvwrapper # 安装虚拟环境扩展包 vim .zshrc # 家目录下编辑.bash_profile文件,加入以下 # python 虚拟环境 export WORKON_HOME='~/.virtualenvs' export VIRTUALENVWRAPPER_PYTHON=$PYENV_ROOT/shims/python # 获取当前全局python版本 p_env=`python -V | cut -d' ' -f2` source /Users/wyx/.pyenv/versions/$p_env/bin/virtualenvwrapper.sh WORKON_HOME定义虚拟工作目录文件夹的存放位置 VIRTUALENVWRAPPER_PYTHON需要填写 本机python的安装位置 具体可以 which python source是更新这个文件使其生效 具体可以 which virtualenvwrapper.sh，激活安装的虚拟机 virtualenvwrapper.sh 保存运行这个命令 source ~/.zshrc 目前为止已经安装完毕,加下来新建工作目录(npy 为新建的虚拟环境) 新建虚拟环境:mkvirtualenv -p python npy #新建成功后,当前路径前面就会有npy 进入虚拟环境工作:workon npy 查看机器上有多少虚拟环境:workon tab按两下 退出虚拟环境:deactivat 删除虚拟环境:rmvirtualenc npy 虚拟环境下安装包:pip install XXX # 前面不能带sudo 查看虚拟环境中安装了哪些python包: pip list 更换源 在终端进入目录： cd ~/.pip/ 如果没有 .pip 文件夹，新建文件夹: mkdir .pip cd .pip vim pip.conf 粘贴如下内容 [global] index-url = [http://mirrors.aliyun.com/pypi/simple/](https://link.jianshu.com/?t=http://mirrors.aliyun.com/pypi/simple/) [install] trusted-host=mirrors.aliyun.com Copy 或者 清华镜像源 [global] index-url = [https://pypi.tuna.tsinghua.edu.cn/simple](https://link.jianshu.com/?t=https://pypi.tuna.tsinghua.edu.cn/simple) [install] trusted-host=pypi.tuna.tsinghua.edu.cn Copy mac python 安装-虚拟环境-跟换源 完成 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/mac-an-zhuang-duo-ban-ben-node.html":{"url":"mac/mac-an-zhuang-duo-ban-ben-node.html","title":"mac安装多版本node","keywords":"","body":"mac安装多版本node下载安装nvm配置环境变量安装node.js安装镜像配置mac安装多版本node 下载安装nvm nvm安装 nvm是node版本管理工具，为了解决node各种版本存在不兼容现象，nvm是让你在同一台机器上安装和切换不同版本的node的工具。 终端输入以下代码运行 brew install nvm 配置环境变量 创建载入环境文件 touch ~/.zshrc 配置环境或者open -e直接复制 echo 'export NVM_DIR=~/.nvm source $(brew --prefix nvm)/nvm.sh' >> ~/.zshrc 激活环境变量 source ~/.zshrc 输入nvm -v查看是否输出版本号，输出版本号代表成功！ 安装node.js 安装node.js的指定版本：nvm install 版本号（版本号查询官网） 查看本地node.js的版本：nvm list 切换到指定版本：nvm use 版本号（本地node.js的版本) 设置默认版本的node.js，每次启动终端都使用该版本：nvm alias default 版本号（本地node.js的版本) 卸载指定node.js版本：nvm uninstall 版本号（本地node.js的版本) 安装最新的node.js稳定版本：nvm install --lts 查看node.js的所有版本：nvm ls-remote 使用node.js指定版本执行文件：nvm exec 版本号 node 要执行的文件路径 安装镜像配置 npm淘宝镜像配置 众所周知，访问国外网站很慢，所以配置国内镜像是很有必要的 查看原本镜像：npm get registry 修改成淘宝镜像 ：npm config set registry https://registry.npm.taobao.org/ 镜像还原：npm config set registry https://registry.npmjs.org/ 至此，利用nvm管理多版本node.js及npm淘宝镜像配置完成！ console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/macan-zhuang-influxdb.html":{"url":"mac/macan-zhuang-influxdb.html","title":"mac安装InfluxDB","keywords":"","body":"Mac如何安装InfluxDB 打开命令行 brew update brew install influxdb 出现下边这样代表安装成功 如果要启动操作系统时，自动启动InfluxDB。则需要运行以下两句命令 出现下边这样代表安装成功 如果要启动操作系统时，自动启动InfluxDB。则需要运行以下两句命令 ln -sfv /usr/local/opt/influxdb/*.plist ~/Library/LaunchAgents launchctl load ~/Library/LaunchAgents/homebrew.mxcl.influxdb.plist 如果只需要在使用时运行，则运行 influxd -config /usr/local/etc/influxdb.conf 完成后，另开启一个bash工具，执行influx命令，看到如下界面，即为安装成功。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mac/mac-an-zhuang-go-yu-yan.html":{"url":"mac/mac-an-zhuang-go-yu-yan.html","title":"Mac安装go语言","keywords":"","body":"Mac安装go语言MacBook安装go语言下载安装GO语言&配置环境变量Mac安装go语言 MacBook安装go语言 下载 国内下载推荐，go语言中文网，中文社区，也可以去golang官网下载对应安装包，这两个网站都有go语言各个历史版本安装包，可根据自己设备型号系统以及需求版本进行下载 安装GO语言&配置环境变量 二进制安装包： 推荐下载1.15.15，下载尾缀为 “amd64.tar.gz”安装包 通过 tar -zcvf go1.15.15.darwin-amd64.tar.gz 解压 ，解压路径(A)自定义 创建GOPATH，GOPATH可以理解为开发所用配置。找一个可以合适放置开发项目的目录，创建gopath文件夹，然后分别在gopath目录下创建分别创建src，pkg，bin等三个目录。 #1.进入合适放置开发项目的目录 cd /Users/bytedance/ # 不强制，选择合适的即可 #2.创建gopath命令 mkdir -p Home/gopath/{bin,src,pkg} 配置环境变量，打开命令窗口(不需要获取root身份),输入 vim ~/.bash_profile，配置以下参数 export GOPATH=/Users/bytedance/Home/gopath // 本人gopath路径 export GOROOT=/Users/bytedance/Home/go // go语言解压路径位置：A export GOBIN=$GOPATH/bin PATH=$PATH:$GOPATH PATH=$PATH:$GOROOT/bin PATH=$PATH:$GOBIN 执行命令 : source ~/.bash_profile 使环境变量快速生效 测试go版本:go version，如图 查看go环境变量配置: go env，如图 (1).png>) 如果以上操作完成，也就完成了一个go 语言环境的基本搭建 开启go mod 使用命令 ： # 分别有三种状态 off / on /auto go env -w GO111MODULE=\"on\" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"frp.html":{"url":"frp.html","title":"frp","keywords":"","body":"frp一、frp简介二、前置环境准备三、服务端配置三、客户端配置四、常见问题及解决小结frp 一、frp简介 1.frp是什么 FRP 是一种用于实现内网穿透的工具。内网穿透是一种技术，允许你从互联网访问位于私有网络（内网）中的计算机、服务器或设备，即使它们位于防火墙或路由器后面。 FRP 使用客户端-服务器架构，其中客户端位于内网，服务器位于公共网络中（例如互联网）。 项目地址：https://github.com/fatedier/frp/releases 2.为什么使用 frp ？ 使用FRP进行内网穿透有几个优势和原因，特别是在需要远程访问位于私有网络内的设备或服务时： 绕过网络限制和防火墙： 很多公司、组织和家庭网络都设置了防火墙和网络限制，以保护内部网络安全。使用FRP可以绕过这些限制，从外部网络访问内部设备，而无需在防火墙上进行复杂的端口映射设置。 安全性和加密： FRP支持数据的加密传输，从而确保通过公共网络传输的数据是安全的。这对于保护敏感信息和隐私非常重要。 简化网络配置： 使用FRP可以避免手动配置复杂的端口映射和路由设置，这在某些情况下可能会很繁琐和容易出错。FRP提供了更简化的方法来实现内网穿透。 动态 IP 地址处理： 如果你的内部网络中的设备使用动态分配的IP地址，使用FRP可以消除由于IP地址变化而导致的连接问题。FRP通过与服务器建立稳定的连接，无论IP地址是否变化，都能够维持通信。 跨平台支持： FRP在多个操作系统和平台上都有支持，这使得它适用于不同类型的设备和应用。 远程维护和访问： 使用FRP，你可以轻松地远程访问和维护内部网络中的设备，无论你身在何处。这对于IT支持、设备管理和远程故障排除非常有用。 访问内部服务： 如果你运行着一些需要从外部网络访问的服务（如网站、数据库等），使用FRP可以方便地使这些服务对外开放。 需要注意的是，使用内网穿透工具时要确保安全性和隐私，以避免未经授权的访问。另外，选择正确的工具并正确配置它是确保成功实现内网穿透的关键。 通过使用 FRP，你可以实现安全且受控的内网穿透，允许远程访问内部服务，而无需将内网设备暴露在公共网络中。 请注意，由于技术和软件可能会不断演进，建议在使用任何工具之前查阅最新的文档和教程以获取准确的设置和配置信息。 3.基本原理 在带有公网ip的云服务器上部署frp的服务端frps； 在需要穿透的内网服务器上部署frp的客户端frpc； 二、前置环境准备 服务端和客户端使用的都是同一份文件，只是配置文件和启动文件不同。因此只需要下载一份文件，将其上传到各个服务器即可。 1.下载解压 下载地址： https://github.com/fatedier/frp/releases 解压： tar -xvf frp_0.44.0_linux_amd64.tar.gz # 解压缩 mv frp_0.44.0_linux_amd64 frp # 重命名文件夹为frp 2.目录解读 frpc：客户端可执行程序 frpc_full.ini：客户端所有配置项（可以在此文件查看frp的所有的配置项） frpc.ini：客户端配置项 frps：服务端可执行程序 frps_full.ini：服务端所有配置项（可以在此文件查看frp的所有的配置项） frps.ini：服务端配置项 LICENSE：许可证 三、服务端配置 服务端需部署在带有公网ip的服务器上，最好是云服务器。frp对于云服务器的配置要求不高，类似2C2G的入门级云服务器即可。而且目前各大厂商都在搞活动，入门级云服务器一年才50元左右。 1.配置服务端（阿里云） 为避免误操作，可以删除客户端相关的文件及配置 rm -fr frpc* # 删除所有客户端相关的文件及配置 cp frps.ini frps.ini.bak # 备份原始配置文件 编辑配置文件：frps.ini [common] bind_port = 7000 token = U4ZvrO/.M]Wp{D;@[u;vUMZ5es9&)}( # vhost_http_port = 18888 # tcp_mux = false # frp管理后台端口，请按自己需求更改 dashboard_port = 7500 # frp管理后台用户名和密码，请改成自己的 dashboard_user = admin dashboard_pwd = password enable_prometheus = true # frp日志配置 log_file = /home/frp/log/frps.log log_level = info log_max_days = 3 ./frps -c frps.ini # 启动服务端 2.开通安全组 若公网服务器是在阿里云、百度云等云服务器上的，则需要在安全组中为frp开通指定的端口号，如：7000是frp服务默认端口号、7500是在frps.ini配置文件中指定的dashboard_port、其他的则是需要映射到内网服务器的端口 3.访问dashboard 访问地址：http://**.***.***:7500/ 账号密码：admin、password（对应配置文件中的dashboard_user与dashboard_pwd） 4.将frps添加为本地服务（可选） 也可以将frps添加为本地服务，具体步骤如下： ① 服务端新建文件：frps.service 内容如下： [Unit] Description=frps service After=network.target syslog.target Wants=network.target [Service] Type=simple ExecStart=/home/frp/frps -c /home/frp/frps.ini [Install] WantedBy=multi-user.target ② 创建配置文件目录并复制文件 mkdir -p /etc/frp cp frps.ini /etc/frp/ cp frps /usr/bin/ cp frps.service /usr/lib/systemd/system/ ③ 配置自并启动客户端服务 systemctl enable frps # 允许自启动 # 执行成功会提示“Created symlink /etc/systemd/system/multi-user.target.wants/frps.service → /usr/lib/systemd/system/frps.service.” systemctl start frps # 启动客户端服务 若更改了frps.service，则需使用“systemctl daemon-reload”命令重新加载配置。 三、客户端配置 1.配置客户端 编辑客户端配置文件frpc.ini [common] server_addr = .xxx.xxx.xxx # 服务端所在的公网ip地址 server_port = 7000 # 服务端默认端口号，与服务端配置文件保持一致 token = e10adc3949ba59abbe56e057f20f883e # 去掉速度限制 tcp_mux = false # [sample] # type = tcp # 注意：这个地方一律填写tcp # local_ip = 0.0.0.0 # jira所在内网服务器的ip地址 # local_port = 8088 # 本地访问端口号 # remote_port = 8088 # 映射到云服务器的端口号 [vnc] type = tcp local_ip = 0.0.0.0 local_port = 5900 remote_port = 35900 use_encryption = true use_compression = true [ssh] type = tcp local_ip = 0.0.0.0 local_port = 22 remote_port = 322 [test] type = tcp local_ip = 0.0.0.0 local_port = 4000 remote_port = 4000 2.启动客户端 ./frpc -c frpc.ini # 启动客户端 3.云服务器安全组添加端口号 安全组中添加remote_port端口号 4.访问HTTP服务 此时则可以通过公网IP+内网端口访问指定服务，如下图所示，访问的是内网服务器的服务。 5.查看dashboard连接记录 客户端启动成功，通过代理访问后，可以看到dashboard的Proxies-TCP中记录了连接信息： 6.将frpc服务加为本地服务（可选） 要实现macOS下程序的自启动，很多人都知道在“设置” - “用户和群组”中设置和取消开机启动，但这里要说的是另外一种方式，那就是launchd的方式，通过在launchd下编写plist启动文件实现FRP带参数启动。这里要啰嗦两句，在launchd下其实有两种实现程序自启的方式 1.如果需要 root，并且是需要用户登陆后才能运行，把 plist 放在 /Library/LaunchAgents/\\ 2.如果需要 root，并且不需要用户登陆后都能运行，把 plist 放在 /Library/LaunchDaemons/ 怎么理解呢，第一种就是系统启动后，你不登录到桌面，程序就不会在后台启动，类似于Windows下的开始菜单里的startup。第二种就是系统启动后，程序也随系统在后台启动，不管用户是否登录桌面，类似于Windows下的系统服务。你需要哪种方式让程序自启，自行选择第一种或者第二种。 出于安全的考虑或者说被迫害妄想症作怪 我不想完全把我的macOS暴露出去，我只选择了在/Library/LaunchAgents/创建plist sudo vim ~/Library/LaunchAgents/frpc.plist 让我们用上面的命令创建FRP的启动文件frpc.plist，并用vim编辑它，你当然也可以用你自己喜欢的编辑器编辑 \\\\ \\http://www.apple.com/DTDs/PropertyList-1.0.dtd >\\ \\\\ \\\\ \\Label\\\\ \\frpc\\\\ \\ProgramArguments\\\\ \\\\ \\pwd/frpc\\\\ \\-c\\\\ \\pwd/frpc.ini\\\\ \\\\ \\KeepAlive\\\\ \\\\ \\RunAtLoad\\\\ \\\\ \\\\ \\\\ 将上面一段代码粘贴到frpc.plist里，粗体字部分请修改为你的frpc和frpc.ini的真实路径，千万别照抄作业哦，老师会发现的 最后，在终端输入下面的两段命令给frpc.plist赋予权限，并加载配置到系统使配置生效 sudo chown root ~/Library/LaunchAgents/frpc.plist\\ sudo launchctl load -w ~/Library/LaunchAgents/frpc.plist\\ 好了，现在你可以重启系统，然后就会发现FRP客户端已经可以随系统自启 打开活动监视器，可以看到frpc的后台进程 如果某一天你后悔了，不想让它自启了，只要在终端里输入下面的命令，下次FRP客户端就不会跟随你的系统自启了 sudo launchctl unload -w ~/Library/LaunchAgents/frpc.plist 四、常见问题及解决 1.客户端配置http转发启动服务报错 若在客户端配置文件中配置了http转发，启动客户端服务时发生如下报错： 【原因】：服务端配置文件frps.ini中未配置vhost_http_port 【解决办法】： ① 服务端配置文件frps.ini的[common]中添加vhost_http_port [common] # frp监听的端口，默认是7000，可以改成其他的 bind_port = 7000 # 授权码，请改成更复杂的，这个token之后在客户端会用到 token = e10adc3949ba59abbe56e057f20f883e # 开启HTTP vhost_http_port = 8088 ② 客户端配置文件frpc.ini中添加custom_domains [web] type = http local_ip = 192.168.1.211 # 内网本机ip local_port = 8088 # 本地服务端口号 remote_port = 8088 # 映射到的公网服务器端口号 custom_domains = 服务端所在的公网ip ③ 配置后重新启动客户端服务 ./frpc -c frpc.ini 注意事项： 1、若要直接在客户端配置文件中配置http代理，则服务端配置文件frps.ini中必须配置vhost_http_port； 2、若在客户端配置文件中配置http代理：type = http，则必须在底部带上custom_domains=xxx.xxx.xx.xx； 2.配置代理多HTTP 上述问题1的配置方法，似乎只能代理访问一个端口的http，即使客户端配置文件frpc.ini中指定了多个type=http的 [web] 项，但因为服务端配置文件frps.ini中只能指定一个vhost_http_port=xxx，所以此方法最终还是只能代理访问一个http的服务，即vhost_http_port端口号对应的那个http。 【解决方法】： 参考： 服务端配置文件frps.ini中不需要配置vhost_http_port，直接在客户端配置文件frpc.ini中配置多个 [web] 项，即要代理的HTTP即可，其中type=tcp，也不用指定custom_domains。配置示例如下： [common] server_addr = 180.xx.xx.xx server_port = 7000 token = e10adc3949ba59abbe56e057f20f883e # 去掉速度限制 tcp_mux = false [jira] type = tcp local_ip = 192.168.1.211 local_port = 8088 remote_port = 8088 [gitlab] type = tcp local_ip = 192.168.1.211 local_port = 8081 remote_port = 8081 小结 以上就是利用frp实现内网穿透的全过程，相比于之前介绍过的zerotier，frp无需在各个访问端上安装客户端，只需在公网服务器上安装服务端，在需要被代理转发的内网服务器上安装客户端，并配置好各个服务的端口号，其他所有用户即可在手机、PC、平板上随时随地访问内网服务。 另外，网络安全同样需要关注。由于内网穿透服务带有一定风险，因此无论是公网服务器还是内网服务器，最好都开启防火墙，用到哪个端口再放开哪个端口，服务器的密码最好也设置得复杂一些。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}